
LAP for object 1 in R7RS library (example grid)
    (named-lambda (make n m)
      (let ((grid (make-vector n)))
        ((let ()
           (define do-loop
             (named-lambda (do-loop i)
               (if (&= i n)
                   grid
                   (begin
                    (let ((v (make-vector m #f)))
                      (vector-set! grid i v))
                    (do-loop (|1+| i))))))
           do-loop)
         0)))


	(entry-point make-15)
	(scheme-object |CONSTANT-7| 6)
	(scheme-object |make-vector-2-ARGS-1| 3)
	(scheme-object |CONSTANT-6| make-vector)
	(scheme-object |CONSTANT-5| #f)
	(scheme-object |make-vector-1-ARGS-0| 2)
	(scheme-object |CONSTANT-4| make-vector)
	(scheme-object |CONSTANT-3| #f)
	(scheme-object |OBJECT-2| #[primitive-procedure 0 vector-set!])
	(scheme-object |CONSTANT-8| debugging-info)
	(scheme-object |CONSTANT-9| environment)
	;; (procedure-header make-10 3 3)
	(equate make-15 make-10)
label-16:
	(call (@ro 6 #x98))
	(word u #x303)
	(block-offset make-10)
make-10:
	(cmp q (r 7) (@r 6))
	(jge (@pcr interrupt-17))
	(cmp q (r 4) (@ro 6 #x58))
	(jl (@pcr interrupt-17))
	;; (assign (register #x22) (cons-pointer (machine-constant #x28) (entry:continuation continuation-0)))
	(mov q (r 1) (&u #xa000000000000000))
	(lea q (r 0) (@pcr continuation-0))
	(or q (r 0) (r 1))
	;; (assign (pre-increment (register 4) -1) (register #x22))
	(push q (r 0))
	;; (assign (register #x23) (offset (register 4) (machine-constant 1)))
	(mov q (r 0) (@ro 4 8))
	;; (assign (pre-increment (register 4) -1) (register #x23))
	(push q (r 0))
	;; (invocation:uuo-link 2 continuation-0 make-vector)
	(jmp (@pcro |make-vector-1-ARGS-0| 8))
	;; (continuation-header continuation-0)
	(word u #x8280)
	(block-offset continuation-0)
continuation-0:
	;; (assign (register #x21) (offset (register 6) (machine-constant 2)))
	(mov q (r 0) (@ro 6 #x10))
	;; (assign (pre-increment (register 4) -1) (register #x21))
	(push q (r 0))
	;; (assign (pre-increment (register 4) -1) (constant 0))
	(mov q (r 0) (&u #x6800000000000000))
	(push q (r 0))
	;; (invocation:jump 1 #f do-loop-7)
	(jmp (@pcr do-loop-7))
	;; (open-procedure-header do-loop-7)
	(equate do-loop-20 do-loop-7)
label-18:
	(call (@ro 6 #x98))
	(word u #x8480)
	(block-offset do-loop-7)
do-loop-7:
	(cmp q (r 7) (@r 6))
	(jge (@pcr interrupt-19))
	(cmp q (r 4) (@ro 6 #x58))
	(jl (@pcr interrupt-19))
	;; (assign (register #x20) (offset (register 4) (machine-constant 0)))
	(mov q (r 0) (@r 4))
	;; (assign (register #x21) (object->type (register #x20)))
	(mov q (r 1) (r 0))
	(shr q (r 1) (&u #x3a))
	;; (type-test (register #x21) #x1a)
	(cmp b (r 1) (&u #x1a))
	(jne (@pcr label-28))
	;; (assign (register #x22) (offset (register 4) (machine-constant 2)))
	(mov q (r 1) (@ro 4 #x10))
	;; (assign (register #x23) (object->type (register #x22)))
	(mov q (r 2) (r 1))
	(shr q (r 2) (&u #x3a))
	;; (type-test (register #x23) #x1a)
	(cmp b (r 2) (&u #x1a))
	(jne (@pcr label-28))
	;; (eq-test (register #x20) (register #x22))
	(cmp q (r 0) (r 1))
	(je (@pcr label-27))
label-26:
	;; (assign (register #x2d) (cons-pointer (machine-constant #x28) (entry:continuation continuation-4)))
	(mov q (r 1) (&u #xa000000000000000))
	(lea q (r 0) (@pcr continuation-4))
	(or q (r 0) (r 1))
	;; (assign (pre-increment (register 4) -1) (register #x2d))
	(push q (r 0))
	;; (assign (register #x30) (cons-pointer (machine-constant #x28) (entry:continuation continuation-3)))
	(mov q (r 2) (&u #xa000000000000000))
	(lea q (r 0) (@pcr continuation-3))
	(or q (r 0) (r 2))
	;; (assign (pre-increment (register 4) -1) (register #x30))
	(push q (r 0))
	;; (assign (pre-increment (register 4) -1) (constant #f))
	(push q (&u 0))
	;; (assign (register #x32) (offset (register 4) (machine-constant 6)))
	(mov q (r 0) (@ro 4 #x30))
	;; (assign (pre-increment (register 4) -1) (register #x32))
	(push q (r 0))
	;; (invocation:uuo-link 3 continuation-3 make-vector)
	(jmp (@pcro |make-vector-2-ARGS-1| 8))
	;; (continuation-header continuation-3)
	(word u #x8580)
	(block-offset continuation-3)
continuation-3:
	;; (assign (register #x3e) (offset (register 6) (machine-constant 2)))
	(mov q (r 0) (@ro 6 #x10))
	;; (assign (pre-increment (register 4) -1) (register #x3e))
	(push q (r 0))
	;; (assign (register #x2b) (offset (register 4) (machine-constant 2)))
	(mov q (r 1) (@ro 4 #x10))
	;; (assign (pre-increment (register 4) -1) (register #x2b))
	(push q (r 1))
	;; (assign (register #x2c) (offset (register 4) (machine-constant 4)))
	(mov q (r 2) (@ro 4 #x20))
	;; (assign (pre-increment (register 4) -1) (register #x2c))
	(push q (r 2))
	;; (assign (register #x3d) (object->type (register #x2c)))
	(mov q (r 3) (r 2))
	(shr q (r 3) (&u #x3a))
	;; (type-test (register #x3d) #xa)
	(cmp b (r 3) (&u #xa))
	(je (@pcr label-22))
label-21:
	;; (invocation:primitive 4 #f #[primitive-procedure 0 vector-set!])
	(mov q (r 3) (@pcr |OBJECT-2|))
	(jmp (@ro 6 #xb8))
label-22:
	;; (assign (register #x35) (object->type (register #x2b)))
	(mov q (r 3) (r 1))
	(shr q (r 3) (&u #x3a))
	;; (type-test (register #x35) #x1a)
	(cmp b (r 3) (&u #x1a))
	(jne (@pcr label-21))
	;; (assign (register #x37) (object->fixnum (register #x2b)))
	(mov q (r 3) (r 1))
	(sal q (r 3) (&u 6))
	;; (assign (register #x39) (object->address (register #x2c)))
	(and q (r 2) (r 5))
	;; (assign (register #x3a) (offset (register #x39) (machine-constant 0)))
	(mov q (r 8) (@r 2))
	;; (assign (register #x3b) (object->fixnum (register #x3a)))
	(sal q (r 8) (&u 6))
	;; (fixnum-pred-2-args unsigned-less-than-fixnum? (register #x37) (register #x3b))
	(cmp q (r 3) (r 8))
	(jae (@pcr label-21))
	;; (assign (offset (offset-address (register #x39) (object->datum (register #x2b))) (machine-constant 1)) (register #x3e))
	(lea q (r 2) (@roi 2 8 1 8))
	(and q (r 2) (r 5))
	(mov q (@r 2) (r 0))
	;; (assign #0=(register 4) (offset-address #0# (machine-constant 4)))
	(add q (r 4) (& #x20))
label-25:
	;; (assign (register #x26) (offset (register 4) (machine-constant 0)))
	(mov q (r 0) (@r 4))
	;; (assign (register #x27) (object->type (register #x26)))
	(mov q (r 1) (r 0))
	(shr q (r 1) (&u #x3a))
	;; (type-test (register #x27) #x1a)
	(cmp b (r 1) (&u #x1a))
	(jne (@pcr label-24))
	;; (assign (register #x2a) (object->fixnum (register #x26)))
	(sal q (r 0) (&u 6))
	;; (assign (register #x28) (fixnum-1-arg one-plus-fixnum (register #x2a) #t))
	(add q (r 0) (& #x40))
	;; (overflow-test)
	(jo (@pcr label-24))
	;; (assign (register #x25) (fixnum->object (register #x28)))
	(or q (r 0) (&u #x1a))
	(ror q (r 0) (&u 6))
label-23:
	;; (assign (offset (register 4) (machine-constant 0)) (register #x25))
	(mov q (@r 4) (r 0))
	;; (invocation:jump 1 #f do-loop-7)
	(jmp (@pcr do-loop-7))
label-24:
	;; (assign (register #x20) (offset (register 4) (machine-constant 0)))
	(mov q (r 0) (@r 4))
	;; (assign (register #x23) (cons-pointer (machine-constant #x28) (entry:continuation label-13)))
	(mov q (r 2) (&u #xa000000000000000))
	(lea q (r 1) (@pcr label-13))
	(or q (r 1) (r 2))
	;; (assign (pre-increment (register 4) -1) (register #x23))
	(push q (r 1))
	;; (assign (pre-increment (register 4) -1) (register #x20))
	(push q (r 0))
	;; (invocation:special-primitive 2 label-13 #[primitive-procedure 0 |1+|])
	(jmp (@ro 6 #x130))
	;; (continuation-entry label-13)
	(word u #x8480)
	(block-offset label-13)
label-13:
	;; (assign (register #x25) (offset (register 6) (machine-constant 2)))
	(mov q (r 0) (@ro 6 #x10))
	(jmp (@pcr label-23))
label-27:
	;; (assign (register #x34) (offset (register 4) (machine-constant 1)))
	(mov q (r 0) (@ro 4 8))
	;; (assign (offset (register 6) (machine-constant 2)) (register #x34))
	(mov q (@ro 6 #x10) (r 0))
	;; (assign #0=(register 4) (offset-address #0# (machine-constant 4)))
	(add q (r 4) (& #x20))
	;; (pop-return)
	(pop q (r 0))
	(and q (r 0) (r 5))
	(jmp (r 0))
label-28:
	;; (assign (register #x24) (offset (register 4) (machine-constant 0)))
	(mov q (r 0) (@r 4))
	;; (assign (register #x25) (offset (register 4) (machine-constant 2)))
	(mov q (r 1) (@ro 4 #x10))
	;; (assign (register #x28) (cons-pointer (machine-constant #x28) (entry:continuation label-12)))
	(mov q (r 3) (&u #xa000000000000000))
	(lea q (r 2) (@pcr label-12))
	(or q (r 2) (r 3))
	;; (assign (pre-increment (register 4) -1) (register #x28))
	(push q (r 2))
	;; (assign (pre-increment (register 4) -1) (register #x25))
	(push q (r 1))
	;; (assign (pre-increment (register 4) -1) (register #x24))
	(push q (r 0))
	;; (invocation:special-primitive 3 label-12 #[primitive-procedure 0 &=])
	(jmp (@ro 6 #x118))
	;; (continuation-entry label-12)
	(word u #x8480)
	(block-offset label-12)
label-12:
	;; (eq-test (offset (register 6) (machine-constant 2)) (constant #f))
	(cmp q (@ro 6 #x10) (&u 0))
	(je (@pcr label-26))
	(jmp (@pcr label-27))
	;; (continuation-header continuation-4)
	(word u #x8480)
	(block-offset continuation-4)
continuation-4:
	(jmp (@pcr label-25))
interrupt-17:
	(jmp (@pcr label-16))
interrupt-19:
	(jmp (@pcr label-18))

LAP for object 2 in R7RS library (example grid)
    (named-lambda (rows grid)
      (vector-length grid))


	(entry-point rows-3)
	(scheme-object |OBJECT-0| #[primitive-procedure 0 vector-length])
	(scheme-object |CONSTANT-1| debugging-info)
	(scheme-object |CONSTANT-2| environment)
	;; (procedure-header rows-0 2 2)
	(equate rows-3 rows-0)
label-4:
	(call (@ro 6 #x98))
	(word u #x202)
	(block-offset rows-0)
rows-0:
	(cmp q (r 7) (@r 6))
	(jge (@pcr interrupt-5))
	;; (assign (register #x27) (offset (register 4) (machine-constant 0)))
	(mov q (r 0) (@r 4))
	;; (assign (register #x28) (object->type (register #x27)))
	(mov q (r 1) (r 0))
	(shr q (r 1) (&u #x3a))
	;; (type-test (register #x28) #xa)
	(cmp b (r 1) (&u #xa))
	(je (@pcr label-6))
	;; (invocation:primitive 2 #f #[primitive-procedure 0 vector-length])
	(mov q (r 3) (@pcr |OBJECT-0|))
	(jmp (@ro 6 #xb8))
label-6:
	;; (assign (register #x23) (object->address (register #x27)))
	(and q (r 0) (r 5))
	;; (assign (register #x24) (offset (register #x23) (machine-constant 0)))
	(mov q (r 1) (@r 0))
	;; (assign (register #x25) (object->datum (register #x24)))
	(and q (r 1) (r 5))
	;; (assign (register #x26) (cons-pointer (machine-constant #x1a) (register #x25)))
	(mov q (r 0) (&u #x6800000000000000))
	(or q (r 0) (r 1))
	;; (assign (offset (register 6) (machine-constant 2)) (register #x26))
	(mov q (@ro 6 #x10) (r 0))
	;; (assign #0=(register 4) (offset-address #0# (machine-constant 1)))
	(add q (r 4) (& 8))
	;; (pop-return)
	(pop q (r 0))
	(and q (r 0) (r 5))
	(jmp (r 0))
interrupt-5:
	(jmp (@pcr label-4))

LAP for object 3 in R7RS library (example grid)
    (named-lambda (cols grid)
      (vector-length (vector-ref grid 0)))


	(entry-point cols-5)
	(scheme-object |OBJECT-1| #[primitive-procedure 0 vector-length])
	(scheme-object |OBJECT-0| #[primitive-procedure 0 vector-ref])
	(scheme-object |CONSTANT-2| debugging-info)
	(scheme-object |CONSTANT-3| environment)
	;; (procedure-header cols-1 2 2)
	(equate cols-5 cols-1)
label-6:
	(call (@ro 6 #x98))
	(word u #x202)
	(block-offset cols-1)
cols-1:
	(cmp q (r 7) (@r 6))
	(jge (@pcr interrupt-7))
	(cmp q (r 4) (@ro 6 #x58))
	(jl (@pcr interrupt-7))
	;; (assign (register #x29) (offset (register 4) (machine-constant 0)))
	(mov q (r 0) (@r 4))
	;; (assign (register #x2a) (object->type (register #x29)))
	(mov q (r 1) (r 0))
	(shr q (r 1) (&u #x3a))
	;; (type-test (register #x2a) #xa)
	(cmp b (r 1) (&u #xa))
	(jne (@pcr label-10))
	;; (assign (register #x26) (object->address (register #x29)))
	(and q (r 0) (r 5))
	;; (assign (register #x27) (offset (register #x26) (machine-constant 0)))
	(mov q (r 1) (@r 0))
	;; (assign (register #x28) (object->fixnum (register #x27)))
	(sal q (r 1) (&u 6))
	;; (fixnum-pred-2-args unsigned-less-than-fixnum? (object->fixnum (constant 0)) (register #x28))
	(cmp q (r 1) (& 0))
	(jbe (@pcr label-10))
	;; (assign (register #x20) (offset (register #x26) (machine-constant 1)))
	(mov q (r 1) (@ro 0 8))
	(mov q (r 0) (r 1))
label-9:
	;; (assign (offset (register 4) (machine-constant 0)) (register #x20))
	(mov q (@r 4) (r 0))
	;; (assign (register #x38) (object->type (register #x20)))
	(mov q (r 1) (r 0))
	(shr q (r 1) (&u #x3a))
	;; (type-test (register #x38) #xa)
	(cmp b (r 1) (&u #xa))
	(je (@pcr label-8))
	;; (invocation:primitive 2 #f #[primitive-procedure 0 vector-length])
	(mov q (r 3) (@pcr |OBJECT-1|))
	(jmp (@ro 6 #xb8))
label-8:
	;; (assign (register #x33) (object->address (register #x20)))
	(and q (r 0) (r 5))
	;; (assign (register #x34) (offset (register #x33) (machine-constant 0)))
	(mov q (r 1) (@r 0))
	;; (assign (register #x35) (object->datum (register #x34)))
	(and q (r 1) (r 5))
	;; (assign (register #x36) (cons-pointer (machine-constant #x1a) (register #x35)))
	(mov q (r 0) (&u #x6800000000000000))
	(or q (r 0) (r 1))
	;; (assign (offset (register 6) (machine-constant 2)) (register #x36))
	(mov q (@ro 6 #x10) (r 0))
	;; (assign #0=(register 4) (offset-address #0# (machine-constant 1)))
	(add q (r 4) (& 8))
	;; (pop-return)
	(pop q (r 0))
	(and q (r 0) (r 5))
	(jmp (r 0))
label-10:
	;; (assign (register #x2b) (offset (register 4) (machine-constant 0)))
	(mov q (r 0) (@r 4))
	;; (assign (register #x2f) (cons-pointer (machine-constant #x28) (entry:continuation label-3)))
	(mov q (r 2) (&u #xa000000000000000))
	(lea q (r 1) (@pcr label-3))
	(or q (r 1) (r 2))
	;; (assign (pre-increment (register 4) -1) (register #x2f))
	(push q (r 1))
	;; (assign (pre-increment (register 4) -1) (constant 0))
	(mov q (r 1) (&u #x6800000000000000))
	(push q (r 1))
	;; (assign (pre-increment (register 4) -1) (register #x2b))
	(push q (r 0))
	;; (invocation:primitive 3 label-3 #[primitive-procedure 0 vector-ref])
	(mov q (r 3) (@pcr |OBJECT-0|))
	(jmp (@ro 6 #xb8))
	;; (continuation-entry label-3)
	(word u #x8180)
	(block-offset label-3)
label-3:
	;; (assign (register #x20) (offset (register 6) (machine-constant 2)))
	(mov q (r 0) (@ro 6 #x10))
	(jmp (@pcr label-9))
interrupt-7:
	(jmp (@pcr label-6))

LAP for object 4 in R7RS library (example grid)
    (named-lambda (ref grid n m)
      (and (< -1 n (rows grid))
           (< -1 m (cols grid))
           (vector-ref (vector-ref grid n) m)))


	(entry-point ref-9)
	(scheme-object |CONSTANT-10| 9)
	(scheme-object |<-3-ARGS-2| 4)
	(scheme-object |CONSTANT-9| <)
	(scheme-object |CONSTANT-8| #f)
	(scheme-object |cols-1-ARGS-1| 2)
	(scheme-object |CONSTANT-7| cols)
	(scheme-object |CONSTANT-6| #f)
	(scheme-object |rows-1-ARGS-0| 2)
	(scheme-object |CONSTANT-5| rows)
	(scheme-object |CONSTANT-4| #f)
	(scheme-object |OBJECT-3| #[primitive-procedure 0 vector-ref])
	(scheme-object |CONSTANT-11| debugging-info)
	(scheme-object |CONSTANT-12| environment)
	;; (procedure-header ref-5 4 4)
	(equate ref-9 ref-5)
label-10:
	(call (@ro 6 #x98))
	(word u #x404)
	(block-offset ref-5)
ref-5:
	(cmp q (r 7) (@r 6))
	(jge (@pcr interrupt-11))
	(cmp q (r 4) (@ro 6 #x58))
	(jl (@pcr interrupt-11))
	;; (assign (register #x22) (cons-pointer (machine-constant #x28) (entry:continuation continuation-1)))
	(mov q (r 1) (&u #xa000000000000000))
	(lea q (r 0) (@pcr continuation-1))
	(or q (r 0) (r 1))
	;; (assign (pre-increment (register 4) -1) (register #x22))
	(push q (r 0))
	;; (assign (register #x25) (cons-pointer (machine-constant #x28) (entry:continuation continuation-0)))
	(mov q (r 2) (&u #xa000000000000000))
	(lea q (r 0) (@pcr continuation-0))
	(or q (r 0) (r 2))
	;; (assign (pre-increment (register 4) -1) (register #x25))
	(push q (r 0))
	;; (assign (register #x26) (offset (register 4) (machine-constant 2)))
	(mov q (r 0) (@ro 4 #x10))
	;; (assign (pre-increment (register 4) -1) (register #x26))
	(push q (r 0))
	;; (invocation:uuo-link 2 continuation-0 rows)
	(jmp (@pcro |rows-1-ARGS-0| 8))
	;; (continuation-header continuation-0)
	(word u #x8480)
	(block-offset continuation-0)
continuation-0:
	;; (assign (register #x22) (offset (register 6) (machine-constant 2)))
	(mov q (r 0) (@ro 6 #x10))
	;; (assign (pre-increment (register 4) -1) (register #x22))
	(push q (r 0))
	;; (assign (register #x20) (offset (register 4) (machine-constant 3)))
	(mov q (r 0) (@ro 4 #x18))
	;; (assign (pre-increment (register 4) -1) (register #x20))
	(push q (r 0))
	;; (assign (pre-increment (register 4) -1) (constant -1))
	(mov q (r 0) (&u #x6bffffffffffffff))
	(push q (r 0))
	;; (invocation:uuo-link 4 continuation-1 <)
	(jmp (@pcro |<-3-ARGS-2| 8))
	;; (continuation-header continuation-1)
	(word u #x8380)
	(block-offset continuation-1)
continuation-1:
	;; (eq-test (offset (register 6) (machine-constant 2)) (constant #f))
	(cmp q (@ro 6 #x10) (&u 0))
	(je (@pcr label-19))
	;; (assign (register #x24) (cons-pointer (machine-constant #x28) (entry:continuation continuation-3)))
	(mov q (r 1) (&u #xa000000000000000))
	(lea q (r 0) (@pcr continuation-3))
	(or q (r 0) (r 1))
	;; (assign (pre-increment (register 4) -1) (register #x24))
	(push q (r 0))
	;; (assign (register #x27) (cons-pointer (machine-constant #x28) (entry:continuation continuation-2)))
	(mov q (r 2) (&u #xa000000000000000))
	(lea q (r 0) (@pcr continuation-2))
	(or q (r 0) (r 2))
	;; (assign (pre-increment (register 4) -1) (register #x27))
	(push q (r 0))
	;; (assign (register #x28) (offset (register 4) (machine-constant 2)))
	(mov q (r 0) (@ro 4 #x10))
	;; (assign (pre-increment (register 4) -1) (register #x28))
	(push q (r 0))
	;; (invocation:uuo-link 2 continuation-2 cols)
	(jmp (@pcro |cols-1-ARGS-1| 8))
	;; (continuation-header continuation-2)
	(word u #x8480)
	(block-offset continuation-2)
continuation-2:
	;; (assign (register #x22) (offset (register 6) (machine-constant 2)))
	(mov q (r 0) (@ro 6 #x10))
	;; (assign (pre-increment (register 4) -1) (register #x22))
	(push q (r 0))
	;; (assign (register #x20) (offset (register 4) (machine-constant 4)))
	(mov q (r 0) (@ro 4 #x20))
	;; (assign (pre-increment (register 4) -1) (register #x20))
	(push q (r 0))
	;; (assign (pre-increment (register 4) -1) (constant -1))
	(mov q (r 0) (&u #x6bffffffffffffff))
	(push q (r 0))
	;; (invocation:uuo-link 4 continuation-3 <)
	(jmp (@pcro |<-3-ARGS-2| 8))
	;; (continuation-header continuation-3)
	(word u #x8380)
	(block-offset continuation-3)
continuation-3:
	;; (eq-test (offset (register 6) (machine-constant 2)) (constant #f))
	(cmp q (@ro 6 #x10) (&u 0))
	(je (@pcr label-18))
	;; (assign (register #x30) (offset (register 4) (machine-constant 0)))
	(mov q (r 0) (@r 4))
	;; (assign (register #x31) (object->type (register #x30)))
	(mov q (r 1) (r 0))
	(shr q (r 1) (&u #x3a))
	;; (type-test (register #x31) #xa)
	(cmp b (r 1) (&u #xa))
	(jne (@pcr label-17))
	;; (assign (register #x28) (offset (register 4) (machine-constant 1)))
	(mov q (r 1) (@ro 4 8))
	;; (assign (register #x29) (object->type (register #x28)))
	(mov q (r 2) (r 1))
	(shr q (r 2) (&u #x3a))
	;; (type-test (register #x29) #x1a)
	(cmp b (r 2) (&u #x1a))
	(jne (@pcr label-17))
	;; (assign (register #x2b) (object->fixnum (register #x28)))
	(mov q (r 2) (r 1))
	(sal q (r 2) (&u 6))
	;; (assign (register #x2d) (object->address (register #x30)))
	(and q (r 0) (r 5))
	;; (assign (register #x2e) (offset (register #x2d) (machine-constant 0)))
	(mov q (r 3) (@r 0))
	;; (assign (register #x2f) (object->fixnum (register #x2e)))
	(sal q (r 3) (&u 6))
	;; (fixnum-pred-2-args unsigned-less-than-fixnum? (register #x2b) (register #x2f))
	(cmp q (r 2) (r 3))
	(jae (@pcr label-17))
	;; (assign (register #x22) (offset (offset-address (register #x2d) (object->datum (register #x28))) (machine-constant 1)))
	(lea q (r 0) (@roi 0 8 1 8))
	(and q (r 0) (r 5))
	(mov q (r 2) (@r 0))
	(mov q (r 0) (r 2))
label-16:
	;; (assign (offset (register 4) (machine-constant 1)) (register #x22))
	(mov q (@ro 4 8) (r 0))
	;; (assign #0=(register 4) (offset-address #0# (machine-constant 1)))
	(add q (r 4) (& 8))
	;; (assign (register #x46) (offset (register 4) (machine-constant 0)))
	(mov q (r 0) (@r 4))
	;; (assign (register #x47) (object->type (register #x46)))
	(mov q (r 1) (r 0))
	(shr q (r 1) (&u #x3a))
	;; (type-test (register #x47) #xa)
	(cmp b (r 1) (&u #xa))
	(je (@pcr label-14))
label-13:
	;; (invocation:primitive 3 #f #[primitive-procedure 0 vector-ref])
	(mov q (r 3) (@pcr |OBJECT-3|))
	(jmp (@ro 6 #xb8))
label-14:
	;; (assign (register #x3e) (offset (register 4) (machine-constant 1)))
	(mov q (r 1) (@ro 4 8))
	;; (assign (register #x3f) (object->type (register #x3e)))
	(mov q (r 2) (r 1))
	(shr q (r 2) (&u #x3a))
	;; (type-test (register #x3f) #x1a)
	(cmp b (r 2) (&u #x1a))
	(jne (@pcr label-13))
	;; (assign (register #x41) (object->fixnum (register #x3e)))
	(mov q (r 2) (r 1))
	(sal q (r 2) (&u 6))
	;; (assign (register #x43) (object->address (register #x46)))
	(and q (r 0) (r 5))
	;; (assign (register #x44) (offset (register #x43) (machine-constant 0)))
	(mov q (r 3) (@r 0))
	;; (assign (register #x45) (object->fixnum (register #x44)))
	(sal q (r 3) (&u 6))
	;; (fixnum-pred-2-args unsigned-less-than-fixnum? (register #x41) (register #x45))
	(cmp q (r 2) (r 3))
	(jae (@pcr label-13))
	;; (assign (register #x3d) (offset (offset-address (register #x43) (object->datum (register #x3e))) (machine-constant 1)))
	(lea q (r 0) (@roi 0 8 1 8))
	(and q (r 0) (r 5))
	(mov q (r 2) (@r 0))
	;; (assign (offset (register 6) (machine-constant 2)) (register #x3d))
	(mov q (@ro 6 #x10) (r 2))
	;; (assign #0=(register 4) (offset-address #0# (machine-constant 2)))
	(add q (r 4) (& #x10))
	;; (pop-return)
label-15:
	(cmp q (r 7) (@r 6))
	(jge (@pcr interrupt-12))
	(pop q (r 0))
	(and q (r 0) (r 5))
	(jmp (r 0))
interrupt-12:
	(jmp (@ro 6 #x1b8))
label-17:
	;; (assign (register #x32) (offset (register 4) (machine-constant 0)))
	(mov q (r 0) (@r 4))
	;; (assign (register #x33) (offset (register 4) (machine-constant 1)))
	(mov q (r 1) (@ro 4 8))
	;; (assign (register #x36) (cons-pointer (machine-constant #x28) (entry:continuation label-7)))
	(mov q (r 3) (&u #xa000000000000000))
	(lea q (r 2) (@pcr label-7))
	(or q (r 2) (r 3))
	;; (assign (pre-increment (register 4) -1) (register #x36))
	(push q (r 2))
	;; (assign (pre-increment (register 4) -1) (register #x33))
	(push q (r 1))
	;; (assign (pre-increment (register 4) -1) (register #x32))
	(push q (r 0))
	;; (invocation:primitive 3 label-7 #[primitive-procedure 0 vector-ref])
	(mov q (r 3) (@pcr |OBJECT-3|))
	(jmp (@ro 6 #xb8))
	;; (continuation-entry label-7)
	(word u #x8380)
	(block-offset label-7)
label-7:
	;; (assign (register #x22) (offset (register 6) (machine-constant 2)))
	(mov q (r 0) (@ro 6 #x10))
	(jmp (@pcr label-16))
label-18:
	;; (assign (offset (register 6) (machine-constant 2)) (constant #f))
	(mov q (@ro 6 #x10) (&u 0))
	;; (assign #0=(register 4) (offset-address #0# (machine-constant 3)))
	(add q (r 4) (& #x18))
	;; (pop-return)
	(jmp (@pcr label-15))
label-19:
	;; (assign (offset (register 6) (machine-constant 2)) (constant #f))
	(mov q (@ro 6 #x10) (&u 0))
	;; (assign #0=(register 4) (offset-address #0# (machine-constant 3)))
	(add q (r 4) (& #x18))
	;; (pop-return)
	(jmp (@pcr label-15))
interrupt-11:
	(jmp (@pcr label-10))

LAP for object 5 in R7RS library (example grid)
    (named-lambda (put! grid n m v)
      (vector-set! (vector-ref grid n) m v))


	(entry-point put!-5)
	(scheme-object |OBJECT-1| #[primitive-procedure 0 vector-set!])
	(scheme-object |OBJECT-0| #[primitive-procedure 0 vector-ref])
	(scheme-object |CONSTANT-2| debugging-info)
	(scheme-object |CONSTANT-3| environment)
	;; (procedure-header put!-1 5 5)
	(equate put!-5 put!-1)
label-6:
	(call (@ro 6 #x98))
	(word u #x505)
	(block-offset put!-1)
put!-1:
	(cmp q (r 7) (@r 6))
	(jge (@pcr interrupt-7))
	(cmp q (r 4) (@ro 6 #x58))
	(jl (@pcr interrupt-7))
	;; (assign (register #x2e) (offset (register 4) (machine-constant 0)))
	(mov q (r 0) (@r 4))
	;; (assign (register #x2f) (object->type (register #x2e)))
	(mov q (r 1) (r 0))
	(shr q (r 1) (&u #x3a))
	;; (type-test (register #x2f) #xa)
	(cmp b (r 1) (&u #xa))
	(jne (@pcr label-11))
	;; (assign (register #x26) (offset (register 4) (machine-constant 1)))
	(mov q (r 1) (@ro 4 8))
	;; (assign (register #x27) (object->type (register #x26)))
	(mov q (r 2) (r 1))
	(shr q (r 2) (&u #x3a))
	;; (type-test (register #x27) #x1a)
	(cmp b (r 2) (&u #x1a))
	(jne (@pcr label-11))
	;; (assign (register #x29) (object->fixnum (register #x26)))
	(mov q (r 2) (r 1))
	(sal q (r 2) (&u 6))
	;; (assign (register #x2b) (object->address (register #x2e)))
	(and q (r 0) (r 5))
	;; (assign (register #x2c) (offset (register #x2b) (machine-constant 0)))
	(mov q (r 3) (@r 0))
	;; (assign (register #x2d) (object->fixnum (register #x2c)))
	(sal q (r 3) (&u 6))
	;; (fixnum-pred-2-args unsigned-less-than-fixnum? (register #x29) (register #x2d))
	(cmp q (r 2) (r 3))
	(jae (@pcr label-11))
	;; (assign (register #x20) (offset (offset-address (register #x2b) (object->datum (register #x26))) (machine-constant 1)))
	(lea q (r 0) (@roi 0 8 1 8))
	(and q (r 0) (r 5))
	(mov q (r 2) (@r 0))
	(mov q (r 0) (r 2))
label-10:
	;; (assign (offset (register 4) (machine-constant 1)) (register #x20))
	(mov q (@ro 4 8) (r 0))
	;; (assign #0=(register 4) (offset-address #0# (machine-constant 1)))
	(add q (r 4) (& 8))
	;; (assign (register #x45) (offset (register 4) (machine-constant 0)))
	(mov q (r 0) (@r 4))
	;; (assign (register #x46) (object->type (register #x45)))
	(mov q (r 1) (r 0))
	(shr q (r 1) (&u #x3a))
	;; (type-test (register #x46) #xa)
	(cmp b (r 1) (&u #xa))
	(je (@pcr label-9))
label-8:
	;; (invocation:primitive 4 #f #[primitive-procedure 0 vector-set!])
	(mov q (r 3) (@pcr |OBJECT-1|))
	(jmp (@ro 6 #xb8))
label-9:
	;; (assign (register #x3d) (offset (register 4) (machine-constant 1)))
	(mov q (r 1) (@ro 4 8))
	;; (assign (register #x3e) (object->type (register #x3d)))
	(mov q (r 2) (r 1))
	(shr q (r 2) (&u #x3a))
	;; (type-test (register #x3e) #x1a)
	(cmp b (r 2) (&u #x1a))
	(jne (@pcr label-8))
	;; (assign (register #x40) (object->fixnum (register #x3d)))
	(mov q (r 2) (r 1))
	(sal q (r 2) (&u 6))
	;; (assign (register #x42) (object->address (register #x45)))
	(and q (r 0) (r 5))
	;; (assign (register #x43) (offset (register #x42) (machine-constant 0)))
	(mov q (r 3) (@r 0))
	;; (assign (register #x44) (object->fixnum (register #x43)))
	(sal q (r 3) (&u 6))
	;; (fixnum-pred-2-args unsigned-less-than-fixnum? (register #x40) (register #x44))
	(cmp q (r 2) (r 3))
	(jae (@pcr label-8))
	;; (assign (register #x39) (register #x42))
	;; (assign (register #x3b) (offset (register 4) (machine-constant 2)))
	(mov q (r 2) (@ro 4 #x10))
	;; (assign (offset (offset-address (register #x39) (object->datum (register #x3d))) (machine-constant 1)) (register #x3b))
	(lea q (r 0) (@roi 0 8 1 8))
	(and q (r 0) (r 5))
	(mov q (@r 0) (r 2))
	;; (assign (offset (register 6) (machine-constant 2)) (constant #!unspecific))
	(mov q (r 2) (&u #x2000000000000001))
	(mov q (@ro 6 #x10) (r 2))
	;; (assign #0=(register 4) (offset-address #0# (machine-constant 3)))
	(add q (r 4) (& #x18))
	;; (pop-return)
	(pop q (r 0))
	(and q (r 0) (r 5))
	(jmp (r 0))
label-11:
	;; (assign (register #x30) (offset (register 4) (machine-constant 0)))
	(mov q (r 0) (@r 4))
	;; (assign (register #x31) (offset (register 4) (machine-constant 1)))
	(mov q (r 1) (@ro 4 8))
	;; (assign (register #x34) (cons-pointer (machine-constant #x28) (entry:continuation label-3)))
	(mov q (r 3) (&u #xa000000000000000))
	(lea q (r 2) (@pcr label-3))
	(or q (r 2) (r 3))
	;; (assign (pre-increment (register 4) -1) (register #x34))
	(push q (r 2))
	;; (assign (pre-increment (register 4) -1) (register #x31))
	(push q (r 1))
	;; (assign (pre-increment (register 4) -1) (register #x30))
	(push q (r 0))
	;; (invocation:primitive 3 label-3 #[primitive-procedure 0 vector-ref])
	(mov q (r 3) (@pcr |OBJECT-0|))
	(jmp (@ro 6 #xb8))
	;; (continuation-entry label-3)
	(word u #x8480)
	(block-offset label-3)
label-3:
	;; (assign (register #x20) (offset (register 6) (machine-constant 2)))
	(mov q (r 0) (@ro 6 #x10))
	(jmp (@pcr label-10))
interrupt-7:
	(jmp (@pcr label-6))

LAP for object 6 in R7RS library (example grid)
    (named-lambda (each grid proc)
      ((let ()
         (define do-loop
           (named-lambda (do-loop j)
             (let ((temp (&= j (rows grid))))
               (if temp
                   temp
                   (begin
                    ((let ()
                       (define do-loop
                         (named-lambda (do-loop k)
                           (let ((temp (&= k (cols grid))))
                             (if temp
                                 temp
                                 (begin (proc j k (ref grid j k))
                                        (do-loop (|1+| k)))))))
                       do-loop)
                     0)
                    (do-loop (|1+| j)))))))
         do-loop)
       0))


	(entry-point each-24)
	(scheme-object |CONSTANT-9| 9)
	(scheme-object |ref-3-ARGS-2| 4)
	(scheme-object |CONSTANT-8| ref)
	(scheme-object |CONSTANT-7| #f)
	(scheme-object |cols-1-ARGS-1| 2)
	(scheme-object |CONSTANT-6| cols)
	(scheme-object |CONSTANT-5| #f)
	(scheme-object |rows-1-ARGS-0| 2)
	(scheme-object |CONSTANT-4| rows)
	(scheme-object |CONSTANT-3| #f)
	(scheme-object |CONSTANT-10| debugging-info)
	(scheme-object |CONSTANT-11| environment)
	;; (procedure-header each-17 3 3)
	(equate each-24 each-17)
label-25:
	(call (@ro 6 #x98))
	(word u #x303)
	(block-offset each-17)
each-17:
	(cmp q (r 7) (@r 6))
	(jge (@pcr interrupt-26))
	;; (assign (pre-increment (register 4) -1) (constant 0))
	(mov q (r 0) (&u #x6800000000000000))
	(push q (r 0))
	;; (invocation:jump 1 #f do-loop-15)
	(jmp (@pcr do-loop-15))
	;; (open-procedure-header do-loop-15)
	(equate do-loop-29 do-loop-15)
label-27:
	(call (@ro 6 #x98))
	(word u #x8380)
	(block-offset do-loop-15)
do-loop-15:
	(cmp q (r 7) (@r 6))
	(jge (@pcr interrupt-28))
	(cmp q (r 4) (@ro 6 #x58))
	(jl (@pcr interrupt-28))
	;; (assign (register #x22) (cons-pointer (machine-constant #x28) (entry:continuation continuation-1)))
	(mov q (r 1) (&u #xa000000000000000))
	(lea q (r 0) (@pcr continuation-1))
	(or q (r 0) (r 1))
	;; (assign (pre-increment (register 4) -1) (register #x22))
	(push q (r 0))
	;; (assign (register #x23) (offset (register 4) (machine-constant 2)))
	(mov q (r 0) (@ro 4 #x10))
	;; (assign (pre-increment (register 4) -1) (register #x23))
	(push q (r 0))
	;; (invocation:uuo-link 2 continuation-1 rows)
	(jmp (@pcro |rows-1-ARGS-0| 8))
	;; (continuation-header continuation-1)
	(word u #x8380)
	(block-offset continuation-1)
continuation-1:
	;; (assign (register #x20) (offset (register 6) (machine-constant 2)))
	(mov q (r 0) (@ro 6 #x10))
	;; (assign (register #x21) (offset (register 4) (machine-constant 0)))
	(mov q (r 1) (@r 4))
	;; (assign (register #x22) (object->type (register #x21)))
	(mov q (r 2) (r 1))
	(shr q (r 2) (&u #x3a))
	;; (type-test (register #x22) #x1a)
	(cmp b (r 2) (&u #x1a))
	(jne (@pcr label-38))
	;; (assign (register #x23) (object->type (register #x20)))
	(mov q (r 2) (r 0))
	(shr q (r 2) (&u #x3a))
	;; (type-test (register #x23) #x1a)
	(cmp b (r 2) (&u #x1a))
	(jne (@pcr label-38))
	;; (eq-test (register #x21) (register #x20))
	(cmp q (r 1) (r 0))
	(je (@pcr label-35))
	;; (assign (pre-increment (register 4) -1) (constant #f))
	(push q (&u 0))
	(jmp (@pcr label-34))
label-35:
	;; (assign (pre-increment (register 4) -1) (constant #t))
	(mov q (r 1) (&u #x2000000000000000))
	(push q (r 1))
label-34:
label-37:
	;; (assign (register #x2d) (offset (register 4) (machine-constant 0)))
	(mov q (r 0) (@r 4))
	;; (eq-test (register #x2d) (constant #f))
	(cmp q (r 0) (&u 0))
	(jne (@pcr label-36))
	;; (assign (pre-increment (register 4) -1) (constant 0))
	(mov q (r 0) (&u #x6800000000000000))
	(push q (r 0))
	;; (invocation:jump 1 #f do-loop-11)
	(jmp (@pcr do-loop-11))
label-36:
	;; (assign (offset (register 6) (machine-constant 2)) (register #x2d))
	(mov q (@ro 6 #x10) (r 0))
	;; (assign #0=(register 4) (offset-address #0# (machine-constant 4)))
	(add q (r 4) (& #x20))
	;; (pop-return)
	(cmp q (r 7) (@r 6))
	(jge (@pcr interrupt-30))
	(pop q (r 0))
	(and q (r 0) (r 5))
	(jmp (r 0))
interrupt-30:
	(jmp (@ro 6 #x1b8))
label-38:
	;; (assign (register #x24) (offset (register 4) (machine-constant 0)))
	(mov q (r 1) (@r 4))
	;; (assign (register #x28) (cons-pointer (machine-constant #x28) (entry:continuation label-19)))
	(mov q (r 3) (&u #xa000000000000000))
	(lea q (r 2) (@pcr label-19))
	(or q (r 2) (r 3))
	;; (assign (pre-increment (register 4) -1) (register #x28))
	(push q (r 2))
	;; (assign (pre-increment (register 4) -1) (register #x20))
	(push q (r 0))
	;; (assign (pre-increment (register 4) -1) (register #x24))
	(push q (r 1))
	;; (invocation:special-primitive 3 label-19 #[primitive-procedure 0 &=])
	(jmp (@ro 6 #x118))
	;; (continuation-entry label-19)
	(word u #x8380)
	(block-offset label-19)
label-19:
	;; (assign (register #x29) (offset (register 6) (machine-constant 2)))
	(mov q (r 0) (@ro 6 #x10))
	;; (assign (pre-increment (register 4) -1) (register #x29))
	(push q (r 0))
	(jmp (@pcr label-37))
	;; (open-procedure-header do-loop-11)
	(equate do-loop-33 do-loop-11)
label-31:
	(call (@ro 6 #x98))
	(word u #x8580)
	(block-offset do-loop-11)
do-loop-11:
	(cmp q (r 7) (@r 6))
	(jge (@pcr interrupt-32))
	(cmp q (r 4) (@ro 6 #x58))
	(jl (@pcr interrupt-32))
	;; (assign (register #x22) (cons-pointer (machine-constant #x28) (entry:continuation continuation-5)))
	(mov q (r 1) (&u #xa000000000000000))
	(lea q (r 0) (@pcr continuation-5))
	(or q (r 0) (r 1))
	;; (assign (pre-increment (register 4) -1) (register #x22))
	(push q (r 0))
	;; (assign (register #x23) (offset (register 4) (machine-constant 4)))
	(mov q (r 0) (@ro 4 #x20))
	;; (assign (pre-increment (register 4) -1) (register #x23))
	(push q (r 0))
	;; (invocation:uuo-link 2 continuation-5 cols)
	(jmp (@pcro |cols-1-ARGS-1| 8))
	;; (continuation-header continuation-5)
	(word u #x8580)
	(block-offset continuation-5)
continuation-5:
	;; (assign (register #x20) (offset (register 6) (machine-constant 2)))
	(mov q (r 0) (@ro 6 #x10))
	;; (assign (register #x21) (offset (register 4) (machine-constant 0)))
	(mov q (r 1) (@r 4))
	;; (assign (register #x22) (object->type (register #x21)))
	(mov q (r 2) (r 1))
	(shr q (r 2) (&u #x3a))
	;; (type-test (register #x22) #x1a)
	(cmp b (r 2) (&u #x1a))
	(jne (@pcr label-47))
	;; (assign (register #x23) (object->type (register #x20)))
	(mov q (r 2) (r 0))
	(shr q (r 2) (&u #x3a))
	;; (type-test (register #x23) #x1a)
	(cmp b (r 2) (&u #x1a))
	(jne (@pcr label-47))
	;; (eq-test (register #x21) (register #x20))
	(cmp q (r 1) (r 0))
	(je (@pcr label-40))
	;; (assign (pre-increment (register 4) -1) (constant #f))
	(push q (&u 0))
	(jmp (@pcr label-39))
label-40:
	;; (assign (pre-increment (register 4) -1) (constant #t))
	(mov q (r 1) (&u #x2000000000000000))
	(push q (r 1))
label-39:
label-46:
	;; (eq-test (offset (register 4) (machine-constant 0)) (constant #f))
	(cmp q (@r 4) (&u 0))
	(jne (@pcr label-43))
	;; (assign (register #x3e) (cons-pointer (machine-constant #x28) (entry:continuation continuation-8)))
	(mov q (r 1) (&u #xa000000000000000))
	(lea q (r 0) (@pcr continuation-8))
	(or q (r 0) (r 1))
	;; (assign (pre-increment (register 4) -1) (register #x3e))
	(push q (r 0))
	;; (assign (register #x41) (cons-pointer (machine-constant #x28) (entry:continuation continuation-7)))
	(mov q (r 2) (&u #xa000000000000000))
	(lea q (r 0) (@pcr continuation-7))
	(or q (r 0) (r 2))
	;; (assign (pre-increment (register 4) -1) (register #x41))
	(push q (r 0))
	;; (assign (register #x42) (offset (register 4) (machine-constant 3)))
	(mov q (r 0) (@ro 4 #x18))
	;; (assign (pre-increment (register 4) -1) (register #x42))
	(push q (r 0))
	;; (assign (register #x43) (offset (register 4) (machine-constant 6)))
	(mov q (r 0) (@ro 4 #x30))
	;; (assign (pre-increment (register 4) -1) (register #x43))
	(push q (r 0))
	;; (assign (register #x44) (offset (register 4) (machine-constant 8)))
	(mov q (r 0) (@ro 4 #x40))
	;; (assign (pre-increment (register 4) -1) (register #x44))
	(push q (r 0))
	;; (invocation:uuo-link 4 continuation-7 ref)
	(jmp (@pcro |ref-3-ARGS-2| 8))
	;; (continuation-header continuation-7)
	(word u #x8780)
	(block-offset continuation-7)
continuation-7:
	;; (assign (register #x23) (offset (register 6) (machine-constant 2)))
	(mov q (r 0) (@ro 6 #x10))
	;; (assign (pre-increment (register 4) -1) (register #x23))
	(push q (r 0))
	;; (assign (register #x20) (offset (register 4) (machine-constant 3)))
	(mov q (r 0) (@ro 4 #x18))
	;; (assign (pre-increment (register 4) -1) (register #x20))
	(push q (r 0))
	;; (assign (register #x21) (offset (register 4) (machine-constant 6)))
	(mov q (r 0) (@ro 4 #x30))
	;; (assign (pre-increment (register 4) -1) (register #x21))
	(push q (r 0))
	;; (assign (register #x22) (offset (register 4) (machine-constant 9)))
	(mov q (r 0) (@ro 4 #x48))
	;; (assign (pre-increment (register 4) -1) (register #x22))
	(push q (r 0))
	;; (invocation:apply 4 continuation-8)
	(pop q (r 3))
	(jmp (@ro 6 #x190))
	;; (continuation-header continuation-8)
	(word u #x8680)
	(block-offset continuation-8)
continuation-8:
	;; (assign (register #x26) (offset (register 4) (machine-constant 1)))
	(mov q (r 0) (@ro 4 8))
	;; (assign (register #x27) (object->type (register #x26)))
	(mov q (r 1) (r 0))
	(shr q (r 1) (&u #x3a))
	;; (type-test (register #x27) #x1a)
	(cmp b (r 1) (&u #x1a))
	(jne (@pcr label-42))
	;; (assign (register #x2a) (object->fixnum (register #x26)))
	(sal q (r 0) (&u 6))
	;; (assign (register #x28) (fixnum-1-arg one-plus-fixnum (register #x2a) #t))
	(add q (r 0) (& #x40))
	;; (overflow-test)
	(jo (@pcr label-42))
	;; (assign (register #x25) (fixnum->object (register #x28)))
	(or q (r 0) (&u #x1a))
	(ror q (r 0) (&u 6))
label-41:
	;; (assign (offset (register 4) (machine-constant 1)) (register #x25))
	(mov q (@ro 4 8) (r 0))
	;; (assign #0=(register 4) (offset-address #0# (machine-constant 1)))
	(add q (r 4) (& 8))
	;; (invocation:jump 1 #f do-loop-11)
	(jmp (@pcr do-loop-11))
label-42:
	;; (assign (register #x20) (offset (register 4) (machine-constant 1)))
	(mov q (r 0) (@ro 4 8))
	;; (assign (register #x23) (cons-pointer (machine-constant #x28) (entry:continuation label-22)))
	(mov q (r 2) (&u #xa000000000000000))
	(lea q (r 1) (@pcr label-22))
	(or q (r 1) (r 2))
	;; (assign (pre-increment (register 4) -1) (register #x23))
	(push q (r 1))
	;; (assign (pre-increment (register 4) -1) (register #x20))
	(push q (r 0))
	;; (invocation:special-primitive 2 label-22 #[primitive-procedure 0 |1+|])
	(jmp (@ro 6 #x130))
	;; (continuation-entry label-22)
	(word u #x8680)
	(block-offset label-22)
label-22:
	;; (assign (register #x25) (offset (register 6) (machine-constant 2)))
	(mov q (r 0) (@ro 6 #x10))
	(jmp (@pcr label-41))
label-43:
	;; (assign #0=(register 4) (offset-address #0# (machine-constant 2)))
	(add q (r 4) (& #x10))
	;; (assign (register #x36) (offset (register 4) (machine-constant 1)))
	(mov q (r 0) (@ro 4 8))
	;; (assign (register #x37) (object->type (register #x36)))
	(mov q (r 1) (r 0))
	(shr q (r 1) (&u #x3a))
	;; (type-test (register #x37) #x1a)
	(cmp b (r 1) (&u #x1a))
	(jne (@pcr label-45))
	;; (assign (register #x3a) (object->fixnum (register #x36)))
	(sal q (r 0) (&u 6))
	;; (assign (register #x38) (fixnum-1-arg one-plus-fixnum (register #x3a) #t))
	(add q (r 0) (& #x40))
	;; (overflow-test)
	(jo (@pcr label-45))
	;; (assign (register #x35) (fixnum->object (register #x38)))
	(or q (r 0) (&u #x1a))
	(ror q (r 0) (&u 6))
label-44:
	;; (assign (offset (register 4) (machine-constant 1)) (register #x35))
	(mov q (@ro 4 8) (r 0))
	;; (assign #0=(register 4) (offset-address #0# (machine-constant 1)))
	(add q (r 4) (& 8))
	;; (invocation:jump 1 #f do-loop-15)
	(jmp (@pcr do-loop-15))
label-45:
	;; (assign (register #x30) (offset (register 4) (machine-constant 1)))
	(mov q (r 0) (@ro 4 8))
	;; (assign (register #x33) (cons-pointer (machine-constant #x28) (entry:continuation label-21)))
	(mov q (r 2) (&u #xa000000000000000))
	(lea q (r 1) (@pcr label-21))
	(or q (r 1) (r 2))
	;; (assign (pre-increment (register 4) -1) (register #x33))
	(push q (r 1))
	;; (assign (pre-increment (register 4) -1) (register #x30))
	(push q (r 0))
	;; (invocation:special-primitive 2 label-21 #[primitive-procedure 0 |1+|])
	(jmp (@ro 6 #x130))
	;; (continuation-entry label-21)
	(word u #x8480)
	(block-offset label-21)
label-21:
	;; (assign (register #x35) (offset (register 6) (machine-constant 2)))
	(mov q (r 0) (@ro 6 #x10))
	(jmp (@pcr label-44))
label-47:
	;; (assign (register #x24) (offset (register 4) (machine-constant 0)))
	(mov q (r 1) (@r 4))
	;; (assign (register #x28) (cons-pointer (machine-constant #x28) (entry:continuation label-20)))
	(mov q (r 3) (&u #xa000000000000000))
	(lea q (r 2) (@pcr label-20))
	(or q (r 2) (r 3))
	;; (assign (pre-increment (register 4) -1) (register #x28))
	(push q (r 2))
	;; (assign (pre-increment (register 4) -1) (register #x20))
	(push q (r 0))
	;; (assign (pre-increment (register 4) -1) (register #x24))
	(push q (r 1))
	;; (invocation:special-primitive 3 label-20 #[primitive-procedure 0 &=])
	(jmp (@ro 6 #x118))
	;; (continuation-entry label-20)
	(word u #x8580)
	(block-offset label-20)
label-20:
	;; (assign (register #x29) (offset (register 6) (machine-constant 2)))
	(mov q (r 0) (@ro 6 #x10))
	;; (assign (pre-increment (register 4) -1) (register #x29))
	(push q (r 0))
	(jmp (@pcr label-46))
interrupt-26:
	(jmp (@pcr label-25))
interrupt-28:
	(jmp (@pcr label-27))
interrupt-32:
	(jmp (@pcr label-31))

LAP for object 0 in R7RS library (example grid)
    (begin
     (define (make n m)
       (let ((grid (make-vector n)))
         ((let ()
            (define do-loop
              (named-lambda (do-loop i)
                (if (&= i n)
                    grid
                    (begin
                     (let ((v (make-vector m #f)))
                       (vector-set! grid i v))
                     (do-loop (|1+| i))))))
            do-loop)
          0)))
     (define (rows grid)
       (vector-length grid))
     (define (cols grid)
       (vector-length (vector-ref grid 0)))
     (define (ref grid n m)
       (and (< -1 n (rows grid))
            (< -1 m (cols grid))
            (vector-ref (vector-ref grid n) m)))
     (define (put! grid n m v)
       (vector-set! (vector-ref grid n) m v))
     (define (each grid proc)
       ((let ()
          (define do-loop
            (named-lambda (do-loop j)
              (let ((temp (&= j (rows grid))))
                (if temp
                    temp
                    (begin
                     ((let ()
                        (define do-loop
                          (named-lambda (do-loop k)
                            (let ((temp (&= k (cols grid))))
                              (if temp
                                  temp
                                  (begin (proc j k (ref grid j k))
                                         (do-loop (|1+| k)))))))
                        do-loop)
                      0)
                     (do-loop (|1+| j)))))))
          do-loop)
        0)))


	(entry-point expression-1)
	(word u #xffff)
	(block-offset expression-1)
expression-1:
	(scheme-object |CONSTANT-6| #x30003)
	(scheme-object |GLOBAL-define-multiple-3-ARGS-2| 4)
	(scheme-object |CONSTANT-5| define-multiple)
	(scheme-object |CONSTANT-4| #f)
	(scheme-object |OBJECT-3| #(#[compiled-code-block 16] #[compiled-code-block 17] #[compiled-code-block 18] #[compiled-code-block 19] #[compiled-code-block 20] #[compiled-code-block 21]))
	(scheme-object |OBJECT-1| #(#[compiled-procedure 22 ("r7rs-example" #x1) #x1a #x113f41eca] #[compiled-procedure 23 ("r7rs-example" #x2) #x1a #x1140120c2] #[compiled-procedure 24 ("r7rs-example" #x3) #x1a #x11419ea22] #[compiled-procedure 25 ("r7rs-example" #x4) #x1a #x1145946a2] #[compiled-procedure 26 ("r7rs-example" #x5) #x1a #x1147d26fa] #[compiled-procedure 27 ("r7rs-example" #x6) #x1a #x114dbebc2]))
	(scheme-object |OBJECT-0| #(make rows cols ref put! each))
	(scheme-object |CONSTANT-7| debugging-info)
	(scheme-object |CONSTANT-8| environment)
	(mov q (r 0) (@ro 6 #x18))
	(mov q (@pcr |CONSTANT-8|) (r 0))
	(lea q (r 2) (@pcr label-2))
	(lea q (r 1) (@pcr |CONSTANT-6|))
	(mov q (r 8) (&u 1))
	(call (@ro 6 #xe0))
	(word u #x8080)
	(block-offset label-7)
label-7:
	(push q (& 0))
label-5:
	(mov q (r 0) (@r 4))
	(mov q (r 2) (@pcr |OBJECT-3|))
	(xor q (r 8) (r 8))
	(lea q (r 1) (@pcr label-4))
	(mov b (r 8) (@ri 1 0 1))
	(and q (r 2) (r 5))
	(mov q (r 2) (@roi 2 8 0 8))
	(and q (r 2) (r 5))
	(mov q (r 1) (@r 2))
	(mov q (r 0) (@ro 6 #x18))
	(and q (r 1) (r 5))
	(mov q (@ri 2 1 8) (r 0))
	(mov q (r 0) (@ro 2 8))
	(and q (r 0) (r 5))
	(lea q (r 1) (@roi 2 #x10 0 8))
	(call (@ro 6 #xe0))
	(word u #x8080)
	(block-offset label-6)
label-6:
	(add q (@r 4) (&u 1))
	(cmp q (@r 4) (&u 6))
	(jl (@pcr label-5))
	(jmp (@pcr label-3))
label-4:
	(byte u 1)
	(byte u 0)
	(byte u 1)
	(byte u 0)
	(byte u 0)
	(byte u 1)
label-3:
	(pop q (r 0))
	;; (assign (register #x20) (offset (register 6) (machine-constant 3)))
	(mov q (r 0) (@ro 6 #x18))
	;; (assign (pre-increment (register 4) -1) (register #x20))
	(push q (r 0))
	;; (assign (register #x21) (constant #(make rows cols ref put! each)))
	(mov q (r 1) (@pcr |OBJECT-0|))
	;; (assign (pre-increment (register 4) -1) (register #x21))
	(push q (r 1))
	;; (assign (pre-increment (register 4) -1) (register #x20))
	(push q (r 0))
	;; (assign (register #x23) (constant #(#[compiled-procedure 22 ("r7rs-example" #x1) #x1a #x113f41eca] #[compiled-procedure 23 ("r7rs-example" #x2) #x1a #x1140120c2] #[compiled-procedure 24 ("r7rs-example" #x3) #x1a #x11419ea22] #[compiled-procedure 25 ("r7rs-example" #x4) #x1a #x1145946a2] #[compiled-procedure 26 ("r7rs-example" #x5) #x1a #x1147d26fa] #[compiled-procedure 27 ("r7rs-example" #x6) #x1a #x114dbebc2])))
	(mov q (r 0) (@pcr |OBJECT-1|))
	;; (assign (offset (register 4) (machine-constant 2)) (register #x23))
	(mov q (@ro 4 #x10) (r 0))
	;; (invocation:global-link 4 #f define-multiple)
	(jmp (@pcro |GLOBAL-define-multiple-3-ARGS-2| 8))

LAP for object 1 in R7RS library (example life)
    (named-lambda (life-count grid i j)
      (define count
        (named-lambda (count i j)
          (if (ref grid i j)
              1
              0)))
      (+ (count (-1+ i) (-1+ j))
         (count (-1+ i) j)
         (count (-1+ i) (|1+| j))
         (count i (-1+ j))
         (count i (|1+| j))
         (count (|1+| i) (-1+ j))
         (count (|1+| i) j)
         (count (|1+| i) (|1+| j))))


	(entry-point life-count-37)
	(scheme-object |CONSTANT-6| 6)
	(scheme-object |+-8-ARGS-1| 9)
	(scheme-object |CONSTANT-5| +)
	(scheme-object |CONSTANT-4| #f)
	(scheme-object |ref-3-ARGS-0| 4)
	(scheme-object |CONSTANT-3| ref)
	(scheme-object |CONSTANT-2| #f)
	(scheme-object |CONSTANT-7| debugging-info)
	(scheme-object |CONSTANT-8| environment)
	;; (procedure-header life-count-22 4 4)
	(equate life-count-37 life-count-22)
label-38:
	(call (@ro 6 #x98))
	(word u #x404)
	(block-offset life-count-22)
life-count-22:
	(cmp q (r 7) (@r 6))
	(jge (@pcr interrupt-39))
	(cmp q (r 4) (@ro 6 #x58))
	(jl (@pcr interrupt-39))
	;; (assign (register #x22) (cons-pointer (machine-constant #x28) (entry:continuation continuation-11)))
	(mov q (r 1) (&u #xa000000000000000))
	(lea q (r 0) (@pcr continuation-11))
	(or q (r 0) (r 1))
	;; (assign (pre-increment (register 4) -1) (register #x22))
	(push q (r 0))
	;; (assign (register #x25) (cons-pointer (machine-constant #x3b) (offset-address (register 4) (machine-constant 1))))
	(mov q (r 0) (&u #xec00000000000008))
	(lea q (r 2) (@ri 4 0 1))
	;; (assign (pre-increment (register 4) -1) (register #x25))
	(push q (r 2))
	;; (assign (register #x2b) (offset (register 4) (machine-constant 4)))
	(mov q (r 2) (@ro 4 #x20))
	;; (assign (register #x2c) (object->type (register #x2b)))
	(mov q (r 3) (r 2))
	(shr q (r 3) (&u #x3a))
	;; (type-test (register #x2c) #x1a)
	(cmp b (r 3) (&u #x1a))
	(jne (@pcr label-67))
	;; (assign (register #x2f) (object->fixnum (register #x2b)))
	(sal q (r 2) (&u 6))
	;; (assign (register #x2d) (fixnum-1-arg one-plus-fixnum (register #x2f) #t))
	(add q (r 2) (& #x40))
	;; (overflow-test)
	(jo (@pcr label-67))
	;; (assign (register #x30) (fixnum->object (register #x2d)))
	(or q (r 2) (&u #x1a))
	(ror q (r 2) (&u 6))
	;; (assign (pre-increment (register 4) -1) (register #x30))
	(push q (r 2))
label-66:
	;; (assign (register #x31) (offset (register 4) (machine-constant 4)))
	(mov q (r 0) (@ro 4 #x20))
	;; (assign (pre-increment (register 4) -1) (register #x31))
	(push q (r 0))
	;; (invocation:jump 3 continuation-11 count-21)
	(jmp (@pcr count-21))
	;; (continuation-header continuation-11)
	(word u #x8380)
	(block-offset continuation-11)
continuation-11:
	;; (assign (register #x32) (offset (register 6) (machine-constant 2)))
	(mov q (r 0) (@ro 6 #x10))
	;; (assign (pre-increment (register 4) -1) (register #x32))
	(push q (r 0))
	;; (assign (register #x22) (cons-pointer (machine-constant #x28) (entry:continuation continuation-9)))
	(mov q (r 1) (&u #xa000000000000000))
	(lea q (r 0) (@pcr continuation-9))
	(or q (r 0) (r 1))
	;; (assign (pre-increment (register 4) -1) (register #x22))
	(push q (r 0))
	;; (assign (register #x25) (cons-pointer (machine-constant #x3b) (offset-address (register 4) (machine-constant 2))))
	(mov q (r 0) (&u #xec00000000000010))
	(lea q (r 2) (@ri 4 0 1))
	;; (assign (pre-increment (register 4) -1) (register #x25))
	(push q (r 2))
	;; (assign (register #x2b) (offset (register 4) (machine-constant 5)))
	(mov q (r 2) (@ro 4 #x28))
	;; (assign (register #x2c) (object->type (register #x2b)))
	(mov q (r 3) (r 2))
	(shr q (r 3) (&u #x3a))
	;; (type-test (register #x2c) #x1a)
	(cmp b (r 3) (&u #x1a))
	(jne (@pcr label-65))
	;; (assign (register #x2f) (object->fixnum (register #x2b)))
	(sal q (r 2) (&u 6))
	;; (assign (register #x2d) (fixnum-1-arg minus-one-plus-fixnum (register #x2f) #t))
	(add q (r 2) (& #x-40))
	;; (overflow-test)
	(jo (@pcr label-65))
	;; (assign (register #x30) (fixnum->object (register #x2d)))
	(or q (r 2) (&u #x1a))
	(ror q (r 2) (&u 6))
	;; (assign (pre-increment (register 4) -1) (register #x30))
	(push q (r 2))
label-64:
	;; (assign (register #x31) (offset (register 4) (machine-constant 5)))
	(mov q (r 0) (@ro 4 #x28))
	;; (assign (pre-increment (register 4) -1) (register #x31))
	(push q (r 0))
	;; (invocation:jump 3 continuation-9 count-21)
	(jmp (@pcr count-21))
	;; (continuation-header continuation-9)
	(word u #x8480)
	(block-offset continuation-9)
continuation-9:
	;; (assign (register #x3c) (offset (register 6) (machine-constant 2)))
	(mov q (r 0) (@ro 6 #x10))
	;; (assign (pre-increment (register 4) -1) (register #x3c))
	(push q (r 0))
	;; (assign (register #x22) (cons-pointer (machine-constant #x28) (entry:continuation continuation-7)))
	(mov q (r 1) (&u #xa000000000000000))
	(lea q (r 0) (@pcr continuation-7))
	(or q (r 0) (r 1))
	;; (assign (pre-increment (register 4) -1) (register #x22))
	(push q (r 0))
	;; (assign (register #x25) (cons-pointer (machine-constant #x3b) (offset-address (register 4) (machine-constant 3))))
	(mov q (r 0) (&u #xec00000000000018))
	(lea q (r 2) (@ri 4 0 1))
	;; (assign (pre-increment (register 4) -1) (register #x25))
	(push q (r 2))
	;; (assign (register #x2b) (offset (register 4) (machine-constant 6)))
	(mov q (r 2) (@ro 4 #x30))
	;; (assign (register #x2c) (object->type (register #x2b)))
	(mov q (r 3) (r 2))
	(shr q (r 3) (&u #x3a))
	;; (type-test (register #x2c) #x1a)
	(cmp b (r 3) (&u #x1a))
	(jne (@pcr label-63))
	;; (assign (register #x2f) (object->fixnum (register #x2b)))
	(sal q (r 2) (&u 6))
	;; (assign (register #x2d) (fixnum-1-arg one-plus-fixnum (register #x2f) #t))
	(add q (r 2) (& #x40))
	;; (overflow-test)
	(jo (@pcr label-63))
	;; (assign (register #x30) (fixnum->object (register #x2d)))
	(or q (r 2) (&u #x1a))
	(ror q (r 2) (&u 6))
	;; (assign (pre-increment (register 4) -1) (register #x30))
	(push q (r 2))
label-62:
	;; (assign (register #x36) (offset (register 4) (machine-constant 6)))
	(mov q (r 0) (@ro 4 #x30))
	;; (assign (register #x37) (object->type (register #x36)))
	(mov q (r 1) (r 0))
	(shr q (r 1) (&u #x3a))
	;; (type-test (register #x37) #x1a)
	(cmp b (r 1) (&u #x1a))
	(jne (@pcr label-61))
	;; (assign (register #x3a) (object->fixnum (register #x36)))
	(sal q (r 0) (&u 6))
	;; (assign (register #x38) (fixnum-1-arg minus-one-plus-fixnum (register #x3a) #t))
	(add q (r 0) (& #x-40))
	;; (overflow-test)
	(jo (@pcr label-61))
	;; (assign (register #x3b) (fixnum->object (register #x38)))
	(or q (r 0) (&u #x1a))
	(ror q (r 0) (&u 6))
	;; (assign (pre-increment (register 4) -1) (register #x3b))
	(push q (r 0))
label-60:
	;; (invocation:jump 3 continuation-7 count-21)
	(jmp (@pcr count-21))
	;; (continuation-header continuation-7)
	(word u #x8580)
	(block-offset continuation-7)
continuation-7:
	;; (assign (register #x32) (offset (register 6) (machine-constant 2)))
	(mov q (r 0) (@ro 6 #x10))
	;; (assign (pre-increment (register 4) -1) (register #x32))
	(push q (r 0))
	;; (assign (register #x22) (cons-pointer (machine-constant #x28) (entry:continuation continuation-4)))
	(mov q (r 1) (&u #xa000000000000000))
	(lea q (r 0) (@pcr continuation-4))
	(or q (r 0) (r 1))
	;; (assign (pre-increment (register 4) -1) (register #x22))
	(push q (r 0))
	;; (assign (register #x25) (cons-pointer (machine-constant #x3b) (offset-address (register 4) (machine-constant 4))))
	(mov q (r 0) (&u #xec00000000000020))
	(lea q (r 2) (@ri 4 0 1))
	;; (assign (pre-increment (register 4) -1) (register #x25))
	(push q (r 2))
	;; (assign (register #x26) (offset (register 4) (machine-constant 7)))
	(mov q (r 2) (@ro 4 #x38))
	;; (assign (pre-increment (register 4) -1) (register #x26))
	(push q (r 2))
	;; (assign (register #x2c) (offset (register 4) (machine-constant 7)))
	(mov q (r 2) (@ro 4 #x38))
	;; (assign (register #x2d) (object->type (register #x2c)))
	(mov q (r 3) (r 2))
	(shr q (r 3) (&u #x3a))
	;; (type-test (register #x2d) #x1a)
	(cmp b (r 3) (&u #x1a))
	(jne (@pcr label-59))
	;; (assign (register #x30) (object->fixnum (register #x2c)))
	(sal q (r 2) (&u 6))
	;; (assign (register #x2e) (fixnum-1-arg minus-one-plus-fixnum (register #x30) #t))
	(add q (r 2) (& #x-40))
	;; (overflow-test)
	(jo (@pcr label-59))
	;; (assign (register #x31) (fixnum->object (register #x2e)))
	(or q (r 2) (&u #x1a))
	(ror q (r 2) (&u 6))
	;; (assign (pre-increment (register 4) -1) (register #x31))
	(push q (r 2))
label-58:
	;; (invocation:jump 3 continuation-4 count-21)
	(jmp (@pcr count-21))
	;; (continuation-header continuation-4)
	(word u #x8680)
	(block-offset continuation-4)
continuation-4:
	;; (assign (register #x3c) (offset (register 6) (machine-constant 2)))
	(mov q (r 0) (@ro 6 #x10))
	;; (assign (pre-increment (register 4) -1) (register #x3c))
	(push q (r 0))
	;; (assign (register #x22) (cons-pointer (machine-constant #x28) (entry:continuation continuation-2)))
	(mov q (r 1) (&u #xa000000000000000))
	(lea q (r 0) (@pcr continuation-2))
	(or q (r 0) (r 1))
	;; (assign (pre-increment (register 4) -1) (register #x22))
	(push q (r 0))
	;; (assign (register #x25) (cons-pointer (machine-constant #x3b) (offset-address (register 4) (machine-constant 5))))
	(mov q (r 0) (&u #xec00000000000028))
	(lea q (r 2) (@ri 4 0 1))
	;; (assign (pre-increment (register 4) -1) (register #x25))
	(push q (r 2))
	;; (assign (register #x2b) (offset (register 4) (machine-constant 8)))
	(mov q (r 2) (@ro 4 #x40))
	;; (assign (register #x2c) (object->type (register #x2b)))
	(mov q (r 3) (r 2))
	(shr q (r 3) (&u #x3a))
	;; (type-test (register #x2c) #x1a)
	(cmp b (r 3) (&u #x1a))
	(jne (@pcr label-57))
	;; (assign (register #x2f) (object->fixnum (register #x2b)))
	(sal q (r 2) (&u 6))
	;; (assign (register #x2d) (fixnum-1-arg minus-one-plus-fixnum (register #x2f) #t))
	(add q (r 2) (& #x-40))
	;; (overflow-test)
	(jo (@pcr label-57))
	;; (assign (register #x30) (fixnum->object (register #x2d)))
	(or q (r 2) (&u #x1a))
	(ror q (r 2) (&u 6))
	;; (assign (pre-increment (register 4) -1) (register #x30))
	(push q (r 2))
label-56:
	;; (assign (register #x36) (offset (register 4) (machine-constant 8)))
	(mov q (r 0) (@ro 4 #x40))
	;; (assign (register #x37) (object->type (register #x36)))
	(mov q (r 1) (r 0))
	(shr q (r 1) (&u #x3a))
	;; (type-test (register #x37) #x1a)
	(cmp b (r 1) (&u #x1a))
	(jne (@pcr label-55))
	;; (assign (register #x3a) (object->fixnum (register #x36)))
	(sal q (r 0) (&u 6))
	;; (assign (register #x38) (fixnum-1-arg minus-one-plus-fixnum (register #x3a) #t))
	(add q (r 0) (& #x-40))
	;; (overflow-test)
	(jo (@pcr label-55))
	;; (assign (register #x3b) (fixnum->object (register #x38)))
	(or q (r 0) (&u #x1a))
	(ror q (r 0) (&u 6))
	;; (assign (pre-increment (register 4) -1) (register #x3b))
	(push q (r 0))
label-54:
	;; (invocation:jump 3 continuation-2 count-21)
	(jmp (@pcr count-21))
	;; (continuation-header continuation-2)
	(word u #x8780)
	(block-offset continuation-2)
continuation-2:
	;; (assign (register #x3c) (offset (register 6) (machine-constant 2)))
	(mov q (r 0) (@ro 6 #x10))
	;; (assign (pre-increment (register 4) -1) (register #x3c))
	(push q (r 0))
	;; (assign (register #x22) (cons-pointer (machine-constant #x28) (entry:continuation continuation-14)))
	(mov q (r 1) (&u #xa000000000000000))
	(lea q (r 0) (@pcr continuation-14))
	(or q (r 0) (r 1))
	;; (assign (pre-increment (register 4) -1) (register #x22))
	(push q (r 0))
	;; (assign (register #x25) (cons-pointer (machine-constant #x3b) (offset-address (register 4) (machine-constant 6))))
	(mov q (r 0) (&u #xec00000000000030))
	(lea q (r 2) (@ri 4 0 1))
	;; (assign (pre-increment (register 4) -1) (register #x25))
	(push q (r 2))
	;; (assign (register #x2b) (offset (register 4) (machine-constant 9)))
	(mov q (r 2) (@ro 4 #x48))
	;; (assign (register #x2c) (object->type (register #x2b)))
	(mov q (r 3) (r 2))
	(shr q (r 3) (&u #x3a))
	;; (type-test (register #x2c) #x1a)
	(cmp b (r 3) (&u #x1a))
	(jne (@pcr label-53))
	;; (assign (register #x2f) (object->fixnum (register #x2b)))
	(sal q (r 2) (&u 6))
	;; (assign (register #x2d) (fixnum-1-arg minus-one-plus-fixnum (register #x2f) #t))
	(add q (r 2) (& #x-40))
	;; (overflow-test)
	(jo (@pcr label-53))
	;; (assign (register #x30) (fixnum->object (register #x2d)))
	(or q (r 2) (&u #x1a))
	(ror q (r 2) (&u 6))
	;; (assign (pre-increment (register 4) -1) (register #x30))
	(push q (r 2))
label-52:
	;; (assign (register #x36) (offset (register 4) (machine-constant 9)))
	(mov q (r 0) (@ro 4 #x48))
	;; (assign (register #x37) (object->type (register #x36)))
	(mov q (r 1) (r 0))
	(shr q (r 1) (&u #x3a))
	;; (type-test (register #x37) #x1a)
	(cmp b (r 1) (&u #x1a))
	(jne (@pcr label-51))
	;; (assign (register #x3a) (object->fixnum (register #x36)))
	(sal q (r 0) (&u 6))
	;; (assign (register #x38) (fixnum-1-arg one-plus-fixnum (register #x3a) #t))
	(add q (r 0) (& #x40))
	;; (overflow-test)
	(jo (@pcr label-51))
	;; (assign (register #x3b) (fixnum->object (register #x38)))
	(or q (r 0) (&u #x1a))
	(ror q (r 0) (&u 6))
	;; (assign (pre-increment (register 4) -1) (register #x3b))
	(push q (r 0))
label-50:
	;; (invocation:jump 3 continuation-14 count-21)
	(jmp (@pcr count-21))
	;; (continuation-header continuation-14)
	(word u #x8880)
	(block-offset continuation-14)
continuation-14:
	;; (assign (register #x32) (offset (register 6) (machine-constant 2)))
	(mov q (r 0) (@ro 6 #x10))
	;; (assign (pre-increment (register 4) -1) (register #x32))
	(push q (r 0))
	;; (assign (register #x22) (cons-pointer (machine-constant #x28) (entry:continuation continuation-16)))
	(mov q (r 1) (&u #xa000000000000000))
	(lea q (r 0) (@pcr continuation-16))
	(or q (r 0) (r 1))
	;; (assign (pre-increment (register 4) -1) (register #x22))
	(push q (r 0))
	;; (assign (register #x25) (cons-pointer (machine-constant #x3b) (offset-address (register 4) (machine-constant 7))))
	(mov q (r 0) (&u #xec00000000000038))
	(lea q (r 2) (@ri 4 0 1))
	;; (assign (pre-increment (register 4) -1) (register #x25))
	(push q (r 2))
	;; (assign (register #x26) (offset (register 4) (machine-constant #xa)))
	(mov q (r 2) (@ro 4 #x50))
	;; (assign (pre-increment (register 4) -1) (register #x26))
	(push q (r 2))
	;; (assign (register #x2c) (offset (register 4) (machine-constant #xa)))
	(mov q (r 2) (@ro 4 #x50))
	;; (assign (register #x2d) (object->type (register #x2c)))
	(mov q (r 3) (r 2))
	(shr q (r 3) (&u #x3a))
	;; (type-test (register #x2d) #x1a)
	(cmp b (r 3) (&u #x1a))
	(jne (@pcr label-49))
	;; (assign (register #x30) (object->fixnum (register #x2c)))
	(sal q (r 2) (&u 6))
	;; (assign (register #x2e) (fixnum-1-arg one-plus-fixnum (register #x30) #t))
	(add q (r 2) (& #x40))
	;; (overflow-test)
	(jo (@pcr label-49))
	;; (assign (register #x31) (fixnum->object (register #x2e)))
	(or q (r 2) (&u #x1a))
	(ror q (r 2) (&u 6))
	;; (assign (pre-increment (register 4) -1) (register #x31))
	(push q (r 2))
label-48:
	;; (invocation:jump 3 continuation-16 count-21)
	(jmp (@pcr count-21))
	;; (continuation-header continuation-16)
	(word u #x8980)
	(block-offset continuation-16)
continuation-16:
	;; (assign (register #x3c) (offset (register 6) (machine-constant 2)))
	(mov q (r 0) (@ro 6 #x10))
	;; (assign (pre-increment (register 4) -1) (register #x3c))
	(push q (r 0))
	;; (assign (register #x22) (cons-pointer (machine-constant #x28) (entry:continuation continuation-19)))
	(mov q (r 1) (&u #xa000000000000000))
	(lea q (r 0) (@pcr continuation-19))
	(or q (r 0) (r 1))
	;; (assign (pre-increment (register 4) -1) (register #x22))
	(push q (r 0))
	;; (assign (register #x25) (cons-pointer (machine-constant #x3b) (offset-address (register 4) (machine-constant 8))))
	(mov q (r 0) (&u #xec00000000000040))
	(lea q (r 2) (@ri 4 0 1))
	;; (assign (pre-increment (register 4) -1) (register #x25))
	(push q (r 2))
	;; (assign (register #x2b) (offset (register 4) (machine-constant #xb)))
	(mov q (r 2) (@ro 4 #x58))
	;; (assign (register #x2c) (object->type (register #x2b)))
	(mov q (r 3) (r 2))
	(shr q (r 3) (&u #x3a))
	;; (type-test (register #x2c) #x1a)
	(cmp b (r 3) (&u #x1a))
	(jne (@pcr label-47))
	;; (assign (register #x2f) (object->fixnum (register #x2b)))
	(sal q (r 2) (&u 6))
	;; (assign (register #x2d) (fixnum-1-arg one-plus-fixnum (register #x2f) #t))
	(add q (r 2) (& #x40))
	;; (overflow-test)
	(jo (@pcr label-47))
	;; (assign (register #x30) (fixnum->object (register #x2d)))
	(or q (r 2) (&u #x1a))
	(ror q (r 2) (&u 6))
	;; (assign (pre-increment (register 4) -1) (register #x30))
	(push q (r 2))
label-46:
	;; (assign (register #x36) (offset (register 4) (machine-constant #xb)))
	(mov q (r 0) (@ro 4 #x58))
	;; (assign (register #x37) (object->type (register #x36)))
	(mov q (r 1) (r 0))
	(shr q (r 1) (&u #x3a))
	;; (type-test (register #x37) #x1a)
	(cmp b (r 1) (&u #x1a))
	(jne (@pcr label-45))
	;; (assign (register #x3a) (object->fixnum (register #x36)))
	(sal q (r 0) (&u 6))
	;; (assign (register #x38) (fixnum-1-arg one-plus-fixnum (register #x3a) #t))
	(add q (r 0) (& #x40))
	;; (overflow-test)
	(jo (@pcr label-45))
	;; (assign (register #x3b) (fixnum->object (register #x38)))
	(or q (r 0) (&u #x1a))
	(ror q (r 0) (&u 6))
	;; (assign (pre-increment (register 4) -1) (register #x3b))
	(push q (r 0))
label-44:
	;; (invocation:jump 3 continuation-19 count-21)
	(jmp (@pcr count-21))
	;; (continuation-header continuation-19)
	(word u #x8a80)
	(block-offset continuation-19)
continuation-19:
	;; (assign (register #x20) (offset (register 6) (machine-constant 2)))
	(mov q (r 0) (@ro 6 #x10))
	;; (assign (offset (register 4) (machine-constant 9)) (register #x20))
	(mov q (@ro 4 #x48) (r 0))
	;; (assign (register #x21) (post-increment (register 4) 1))
	(pop q (r 0))
	;; (assign (offset (register 4) (machine-constant 7)) (register #x21))
	(mov q (@ro 4 #x38) (r 0))
	;; (assign (register #x22) (post-increment (register 4) 1))
	(pop q (r 0))
	;; (assign (offset (register 4) (machine-constant 5)) (register #x22))
	(mov q (@ro 4 #x28) (r 0))
	;; (invocation:uuo-link 9 #f +)
	(jmp (@pcro |+-8-ARGS-1| 8))
label-45:
	;; (assign (register #x31) (offset (register 4) (machine-constant #xb)))
	(mov q (r 0) (@ro 4 #x58))
	;; (assign (register #x34) (cons-pointer (machine-constant #x28) (entry:continuation label-35)))
	(mov q (r 2) (&u #xa000000000000000))
	(lea q (r 1) (@pcr label-35))
	(or q (r 1) (r 2))
	;; (assign (pre-increment (register 4) -1) (register #x34))
	(push q (r 1))
	;; (assign (pre-increment (register 4) -1) (register #x31))
	(push q (r 0))
	;; (invocation:special-primitive 2 label-35 #[primitive-procedure 0 |1+|])
	(jmp (@ro 6 #x130))
	;; (continuation-entry label-35)
	(word u #x8d80)
	(block-offset label-35)
label-35:
	;; (assign (register #x35) (offset (register 6) (machine-constant 2)))
	(mov q (r 0) (@ro 6 #x10))
	;; (assign (pre-increment (register 4) -1) (register #x35))
	(push q (r 0))
	(jmp (@pcr label-44))
label-47:
	;; (assign (register #x26) (offset (register 4) (machine-constant #xb)))
	(mov q (r 0) (@ro 4 #x58))
	;; (assign (register #x29) (cons-pointer (machine-constant #x28) (entry:continuation label-34)))
	(mov q (r 2) (&u #xa000000000000000))
	(lea q (r 1) (@pcr label-34))
	(or q (r 1) (r 2))
	;; (assign (pre-increment (register 4) -1) (register #x29))
	(push q (r 1))
	;; (assign (pre-increment (register 4) -1) (register #x26))
	(push q (r 0))
	;; (invocation:special-primitive 2 label-34 #[primitive-procedure 0 |1+|])
	(jmp (@ro 6 #x130))
	;; (continuation-entry label-34)
	(word u #x8c80)
	(block-offset label-34)
label-34:
	;; (assign (register #x2a) (offset (register 6) (machine-constant 2)))
	(mov q (r 0) (@ro 6 #x10))
	;; (assign (pre-increment (register 4) -1) (register #x2a))
	(push q (r 0))
	(jmp (@pcr label-46))
label-49:
	;; (assign (register #x27) (offset (register 4) (machine-constant #xa)))
	(mov q (r 0) (@ro 4 #x50))
	;; (assign (register #x2a) (cons-pointer (machine-constant #x28) (entry:continuation label-33)))
	(mov q (r 2) (&u #xa000000000000000))
	(lea q (r 1) (@pcr label-33))
	(or q (r 1) (r 2))
	;; (assign (pre-increment (register 4) -1) (register #x2a))
	(push q (r 1))
	;; (assign (pre-increment (register 4) -1) (register #x27))
	(push q (r 0))
	;; (invocation:special-primitive 2 label-33 #[primitive-procedure 0 |1+|])
	(jmp (@ro 6 #x130))
	;; (continuation-entry label-33)
	(word u #x8c80)
	(block-offset label-33)
label-33:
	;; (assign (register #x2b) (offset (register 6) (machine-constant 2)))
	(mov q (r 0) (@ro 6 #x10))
	;; (assign (pre-increment (register 4) -1) (register #x2b))
	(push q (r 0))
	(jmp (@pcr label-48))
label-51:
	;; (assign (register #x31) (offset (register 4) (machine-constant 9)))
	(mov q (r 0) (@ro 4 #x48))
	;; (assign (register #x34) (cons-pointer (machine-constant #x28) (entry:continuation label-32)))
	(mov q (r 2) (&u #xa000000000000000))
	(lea q (r 1) (@pcr label-32))
	(or q (r 1) (r 2))
	;; (assign (pre-increment (register 4) -1) (register #x34))
	(push q (r 1))
	;; (assign (pre-increment (register 4) -1) (register #x31))
	(push q (r 0))
	;; (invocation:special-primitive 2 label-32 #[primitive-procedure 0 |1+|])
	(jmp (@ro 6 #x130))
	;; (continuation-entry label-32)
	(word u #x8b80)
	(block-offset label-32)
label-32:
	;; (assign (register #x35) (offset (register 6) (machine-constant 2)))
	(mov q (r 0) (@ro 6 #x10))
	;; (assign (pre-increment (register 4) -1) (register #x35))
	(push q (r 0))
	(jmp (@pcr label-50))
label-53:
	;; (assign (register #x26) (offset (register 4) (machine-constant 9)))
	(mov q (r 0) (@ro 4 #x48))
	;; (assign (register #x29) (cons-pointer (machine-constant #x28) (entry:continuation label-31)))
	(mov q (r 2) (&u #xa000000000000000))
	(lea q (r 1) (@pcr label-31))
	(or q (r 1) (r 2))
	;; (assign (pre-increment (register 4) -1) (register #x29))
	(push q (r 1))
	;; (assign (pre-increment (register 4) -1) (register #x26))
	(push q (r 0))
	;; (invocation:special-primitive 2 label-31 #[primitive-procedure 0 -1+])
	(jmp (@ro 6 #x138))
	;; (continuation-entry label-31)
	(word u #x8a80)
	(block-offset label-31)
label-31:
	;; (assign (register #x2a) (offset (register 6) (machine-constant 2)))
	(mov q (r 0) (@ro 6 #x10))
	;; (assign (pre-increment (register 4) -1) (register #x2a))
	(push q (r 0))
	(jmp (@pcr label-52))
label-55:
	;; (assign (register #x31) (offset (register 4) (machine-constant 8)))
	(mov q (r 0) (@ro 4 #x40))
	;; (assign (register #x34) (cons-pointer (machine-constant #x28) (entry:continuation label-30)))
	(mov q (r 2) (&u #xa000000000000000))
	(lea q (r 1) (@pcr label-30))
	(or q (r 1) (r 2))
	;; (assign (pre-increment (register 4) -1) (register #x34))
	(push q (r 1))
	;; (assign (pre-increment (register 4) -1) (register #x31))
	(push q (r 0))
	;; (invocation:special-primitive 2 label-30 #[primitive-procedure 0 -1+])
	(jmp (@ro 6 #x138))
	;; (continuation-entry label-30)
	(word u #x8a80)
	(block-offset label-30)
label-30:
	;; (assign (register #x35) (offset (register 6) (machine-constant 2)))
	(mov q (r 0) (@ro 6 #x10))
	;; (assign (pre-increment (register 4) -1) (register #x35))
	(push q (r 0))
	(jmp (@pcr label-54))
label-57:
	;; (assign (register #x26) (offset (register 4) (machine-constant 8)))
	(mov q (r 0) (@ro 4 #x40))
	;; (assign (register #x29) (cons-pointer (machine-constant #x28) (entry:continuation label-29)))
	(mov q (r 2) (&u #xa000000000000000))
	(lea q (r 1) (@pcr label-29))
	(or q (r 1) (r 2))
	;; (assign (pre-increment (register 4) -1) (register #x29))
	(push q (r 1))
	;; (assign (pre-increment (register 4) -1) (register #x26))
	(push q (r 0))
	;; (invocation:special-primitive 2 label-29 #[primitive-procedure 0 -1+])
	(jmp (@ro 6 #x138))
	;; (continuation-entry label-29)
	(word u #x8980)
	(block-offset label-29)
label-29:
	;; (assign (register #x2a) (offset (register 6) (machine-constant 2)))
	(mov q (r 0) (@ro 6 #x10))
	;; (assign (pre-increment (register 4) -1) (register #x2a))
	(push q (r 0))
	(jmp (@pcr label-56))
label-59:
	;; (assign (register #x27) (offset (register 4) (machine-constant 7)))
	(mov q (r 0) (@ro 4 #x38))
	;; (assign (register #x2a) (cons-pointer (machine-constant #x28) (entry:continuation label-28)))
	(mov q (r 2) (&u #xa000000000000000))
	(lea q (r 1) (@pcr label-28))
	(or q (r 1) (r 2))
	;; (assign (pre-increment (register 4) -1) (register #x2a))
	(push q (r 1))
	;; (assign (pre-increment (register 4) -1) (register #x27))
	(push q (r 0))
	;; (invocation:special-primitive 2 label-28 #[primitive-procedure 0 -1+])
	(jmp (@ro 6 #x138))
	;; (continuation-entry label-28)
	(word u #x8980)
	(block-offset label-28)
label-28:
	;; (assign (register #x2b) (offset (register 6) (machine-constant 2)))
	(mov q (r 0) (@ro 6 #x10))
	;; (assign (pre-increment (register 4) -1) (register #x2b))
	(push q (r 0))
	(jmp (@pcr label-58))
label-61:
	;; (assign (register #x31) (offset (register 4) (machine-constant 6)))
	(mov q (r 0) (@ro 4 #x30))
	;; (assign (register #x34) (cons-pointer (machine-constant #x28) (entry:continuation label-27)))
	(mov q (r 2) (&u #xa000000000000000))
	(lea q (r 1) (@pcr label-27))
	(or q (r 1) (r 2))
	;; (assign (pre-increment (register 4) -1) (register #x34))
	(push q (r 1))
	;; (assign (pre-increment (register 4) -1) (register #x31))
	(push q (r 0))
	;; (invocation:special-primitive 2 label-27 #[primitive-procedure 0 -1+])
	(jmp (@ro 6 #x138))
	;; (continuation-entry label-27)
	(word u #x8880)
	(block-offset label-27)
label-27:
	;; (assign (register #x35) (offset (register 6) (machine-constant 2)))
	(mov q (r 0) (@ro 6 #x10))
	;; (assign (pre-increment (register 4) -1) (register #x35))
	(push q (r 0))
	(jmp (@pcr label-60))
label-63:
	;; (assign (register #x26) (offset (register 4) (machine-constant 6)))
	(mov q (r 0) (@ro 4 #x30))
	;; (assign (register #x29) (cons-pointer (machine-constant #x28) (entry:continuation label-26)))
	(mov q (r 2) (&u #xa000000000000000))
	(lea q (r 1) (@pcr label-26))
	(or q (r 1) (r 2))
	;; (assign (pre-increment (register 4) -1) (register #x29))
	(push q (r 1))
	;; (assign (pre-increment (register 4) -1) (register #x26))
	(push q (r 0))
	;; (invocation:special-primitive 2 label-26 #[primitive-procedure 0 |1+|])
	(jmp (@ro 6 #x130))
	;; (continuation-entry label-26)
	(word u #x8780)
	(block-offset label-26)
label-26:
	;; (assign (register #x2a) (offset (register 6) (machine-constant 2)))
	(mov q (r 0) (@ro 6 #x10))
	;; (assign (pre-increment (register 4) -1) (register #x2a))
	(push q (r 0))
	(jmp (@pcr label-62))
label-65:
	;; (assign (register #x26) (offset (register 4) (machine-constant 5)))
	(mov q (r 0) (@ro 4 #x28))
	;; (assign (register #x29) (cons-pointer (machine-constant #x28) (entry:continuation label-25)))
	(mov q (r 2) (&u #xa000000000000000))
	(lea q (r 1) (@pcr label-25))
	(or q (r 1) (r 2))
	;; (assign (pre-increment (register 4) -1) (register #x29))
	(push q (r 1))
	;; (assign (pre-increment (register 4) -1) (register #x26))
	(push q (r 0))
	;; (invocation:special-primitive 2 label-25 #[primitive-procedure 0 -1+])
	(jmp (@ro 6 #x138))
	;; (continuation-entry label-25)
	(word u #x8680)
	(block-offset label-25)
label-25:
	;; (assign (register #x2a) (offset (register 6) (machine-constant 2)))
	(mov q (r 0) (@ro 6 #x10))
	;; (assign (pre-increment (register 4) -1) (register #x2a))
	(push q (r 0))
	(jmp (@pcr label-64))
label-67:
	;; (assign (register #x26) (offset (register 4) (machine-constant 4)))
	(mov q (r 0) (@ro 4 #x20))
	;; (assign (register #x29) (cons-pointer (machine-constant #x28) (entry:continuation label-24)))
	(mov q (r 2) (&u #xa000000000000000))
	(lea q (r 1) (@pcr label-24))
	(or q (r 1) (r 2))
	;; (assign (pre-increment (register 4) -1) (register #x29))
	(push q (r 1))
	;; (assign (pre-increment (register 4) -1) (register #x26))
	(push q (r 0))
	;; (invocation:special-primitive 2 label-24 #[primitive-procedure 0 |1+|])
	(jmp (@ro 6 #x130))
	;; (continuation-entry label-24)
	(word u #x8580)
	(block-offset label-24)
label-24:
	;; (assign (register #x2a) (offset (register 6) (machine-constant 2)))
	(mov q (r 0) (@ro 6 #x10))
	;; (assign (pre-increment (register 4) -1) (register #x2a))
	(push q (r 0))
	(jmp (@pcr label-66))
	;; (open-procedure-header count-21)
	(equate count-42 count-21)
label-40:
	(call (@ro 6 #x98))
	(word u #x8380)
	(block-offset count-21)
count-21:
	(cmp q (r 7) (@r 6))
	(jge (@pcr interrupt-41))
	(cmp q (r 4) (@ro 6 #x58))
	(jl (@pcr interrupt-41))
	;; (assign (register #x22) (cons-pointer (machine-constant #x28) (entry:continuation continuation-20)))
	(mov q (r 1) (&u #xa000000000000000))
	(lea q (r 0) (@pcr continuation-20))
	(or q (r 0) (r 1))
	;; (assign (pre-increment (register 4) -1) (register #x22))
	(push q (r 0))
	;; (assign (register #x23) (offset (register 4) (machine-constant 2)))
	(mov q (r 0) (@ro 4 #x10))
	;; (assign (pre-increment (register 4) -1) (register #x23))
	(push q (r 0))
	;; (assign (register #x24) (offset (register 4) (machine-constant 2)))
	(mov q (r 0) (@ro 4 #x10))
	;; (assign (pre-increment (register 4) -1) (register #x24))
	(push q (r 0))
	;; (assign (register #x25) (offset (register 4) (machine-constant 5)))
	(mov q (r 0) (@ro 4 #x28))
	;; (assign (register #x26) (object->address (register #x25)))
	(and q (r 0) (r 5))
	;; (assign (register #x27) (offset (register #x26) (machine-constant 0)))
	(mov q (r 2) (@r 0))
	;; (assign (pre-increment (register 4) -1) (register #x27))
	(push q (r 2))
	;; (invocation:uuo-link 4 continuation-20 ref)
	(jmp (@pcro |ref-3-ARGS-0| 8))
	;; (continuation-header continuation-20)
	(word u #x8380)
	(block-offset continuation-20)
continuation-20:
	;; (eq-test (offset (register 6) (machine-constant 2)) (constant #f))
	(cmp q (@ro 6 #x10) (&u 0))
	(je (@pcr label-69))
	;; (assign (offset (register 6) (machine-constant 2)) (constant 1))
	(mov q (r 0) (&u #x6800000000000001))
	(mov q (@ro 6 #x10) (r 0))
	(jmp (@pcr label-68))
label-69:
	;; (assign (offset (register 6) (machine-constant 2)) (constant 0))
	(mov q (r 0) (&u #x6800000000000000))
	(mov q (@ro 6 #x10) (r 0))
label-68:
label-70:
	;; (assign #0=(register 4) (offset-address #0# (machine-constant 3)))
	(add q (r 4) (& #x18))
	;; (pop-return)
	(cmp q (r 7) (@r 6))
	(jge (@pcr interrupt-43))
	(pop q (r 0))
	(and q (r 0) (r 5))
	(jmp (r 0))
interrupt-43:
	(jmp (@ro 6 #x1b8))
interrupt-39:
	(jmp (@pcr label-38))
interrupt-41:
	(jmp (@pcr label-40))

LAP for object 2 in R7RS library (example life)
    (named-lambda (life-alive? grid i j)
      (let ((key (life-count grid i j)))
        (cond ((eq? 3 key) #t)
              ((eq? 2 key) (ref grid i j))
              (else #f))))


	(entry-point life-alive?-7)
	(scheme-object |CONSTANT-6| 6)
	(scheme-object |ref-3-ARGS-1| 4)
	(scheme-object |CONSTANT-5| ref)
	(scheme-object |CONSTANT-4| #f)
	(scheme-object |life-count-3-ARGS-0| 4)
	(scheme-object |CONSTANT-3| life-count)
	(scheme-object |CONSTANT-2| #f)
	(scheme-object |CONSTANT-7| debugging-info)
	(scheme-object |CONSTANT-8| environment)
	;; (procedure-header life-alive?-4 4 4)
	(equate life-alive?-7 life-alive?-4)
label-8:
	(call (@ro 6 #x98))
	(word u #x404)
	(block-offset life-alive?-4)
life-alive?-4:
	(cmp q (r 7) (@r 6))
	(jge (@pcr interrupt-9))
	(cmp q (r 4) (@ro 6 #x58))
	(jl (@pcr interrupt-9))
	;; (assign (register #x22) (cons-pointer (machine-constant #x28) (entry:continuation continuation-0)))
	(mov q (r 1) (&u #xa000000000000000))
	(lea q (r 0) (@pcr continuation-0))
	(or q (r 0) (r 1))
	;; (assign (pre-increment (register 4) -1) (register #x22))
	(push q (r 0))
	;; (assign (register #x23) (offset (register 4) (machine-constant 3)))
	(mov q (r 0) (@ro 4 #x18))
	;; (assign (pre-increment (register 4) -1) (register #x23))
	(push q (r 0))
	;; (assign (register #x24) (offset (register 4) (machine-constant 3)))
	(mov q (r 0) (@ro 4 #x18))
	;; (assign (pre-increment (register 4) -1) (register #x24))
	(push q (r 0))
	;; (assign (register #x25) (offset (register 4) (machine-constant 3)))
	(mov q (r 0) (@ro 4 #x18))
	;; (assign (pre-increment (register 4) -1) (register #x25))
	(push q (r 0))
	;; (invocation:uuo-link 4 continuation-0 life-count)
	(jmp (@pcro |life-count-3-ARGS-0| 8))
	;; (continuation-header continuation-0)
	(word u #x8380)
	(block-offset continuation-0)
continuation-0:
	;; (assign (register #x29) (offset (register 6) (machine-constant 2)))
	(mov q (r 0) (@ro 6 #x10))
	;; (assign (pre-increment (register 4) -1) (register #x29))
	(push q (r 0))
	;; (eq-test (constant 3) (register #x29))
	(mov q (r 1) (&u #x6800000000000003))
	(cmp q (r 0) (r 1))
	(je (@pcr label-13))
	;; (eq-test (constant 2) (register #x29))
	(mov q (r 2) (&u #x6800000000000002))
	(cmp q (r 0) (r 2))
	(jne (@pcr label-11))
	;; (assign #0=(register 4) (offset-address #0# (machine-constant 1)))
	(add q (r 4) (& 8))
	;; (invocation:uuo-link 4 #f ref)
	(jmp (@pcro |ref-3-ARGS-1| 8))
label-11:
	;; (assign (offset (register 6) (machine-constant 2)) (constant #f))
	(mov q (@ro 6 #x10) (&u 0))
label-12:
	;; (assign #0=(register 4) (offset-address #0# (machine-constant 4)))
	(add q (r 4) (& #x20))
	;; (pop-return)
	(cmp q (r 7) (@r 6))
	(jge (@pcr interrupt-10))
	(pop q (r 0))
	(and q (r 0) (r 5))
	(jmp (r 0))
interrupt-10:
	(jmp (@ro 6 #x1b8))
label-13:
	;; (assign (offset (register 6) (machine-constant 2)) (constant #t))
	(mov q (r 0) (&u #x2000000000000000))
	(mov q (@ro 6 #x10) (r 0))
	(jmp (@pcr label-12))
interrupt-9:
	(jmp (@pcr label-8))

LAP for object 3 in R7RS library (example life)
    (named-lambda (life-print grid)
      (newline)
      (each
       grid
       (lambda (i j v)
         (display (if v "*" "-"))
         (if (&= j (-1+ (cols grid)))
             (newline)))))


	(entry-point life-print-12)
	(scheme-object |CONSTANT-14| #xc)
	(scheme-object |cols-1-ARGS-5| 2)
	(scheme-object |CONSTANT-13| cols)
	(scheme-object |CONSTANT-12| #f)
	(scheme-object |display-1-ARGS-4| 2)
	(scheme-object |CONSTANT-11| display)
	(scheme-object |CONSTANT-10| #f)
	(scheme-object |each-2-ARGS-1| 3)
	(scheme-object |CONSTANT-9| each)
	(scheme-object |CONSTANT-8| #f)
	(scheme-object |newline-0-ARGS-0| 1)
	(scheme-object |CONSTANT-7| newline)
	(scheme-object |CONSTANT-6| #f)
	(scheme-object |OBJECT-3| "*")
	(scheme-object |OBJECT-2| "-")
	(scheme-object |CONSTANT-15| debugging-info)
	(scheme-object |CONSTANT-16| environment)
	;; (procedure-header life-print-7 2 2)
	(equate life-print-12 life-print-7)
label-13:
	(call (@ro 6 #x98))
	(word u #x202)
	(block-offset life-print-7)
life-print-7:
	(cmp q (r 7) (@r 6))
	(jge (@pcr interrupt-14))
	(cmp q (r 4) (@ro 6 #x58))
	(jl (@pcr interrupt-14))
	;; (assign (register #x22) (cons-pointer (machine-constant #x28) (entry:continuation continuation-0)))
	(mov q (r 1) (&u #xa000000000000000))
	(lea q (r 0) (@pcr continuation-0))
	(or q (r 0) (r 1))
	;; (assign (pre-increment (register 4) -1) (register #x22))
	(push q (r 0))
	;; (invocation:uuo-link 1 continuation-0 newline)
	(jmp (@pcro |newline-0-ARGS-0| 8))
	;; (continuation-header continuation-0)
	(word u #x8180)
	(block-offset continuation-0)
continuation-0:
	;; (assign (register #x20) (offset (register 4) (machine-constant 0)))
	(mov q (r 0) (@r 4))
	;; (assign (pre-increment (register 4) -1) (register #x20))
	(push q (r 0))
	;; (assign (register #x23) (cons-closure (entry:procedure lambda-6) 4 4 1))
	(mov q (r 2) (&u #x3400000000000004))
	(mov q (@r 7) (r 2))
	(mov l (@ro 7 8) (&u 1))
	(mov l (@ro 7 #xc) (&u #x200404))
	(lea q (r 2) (@pcr lambda-15))
	(mov w (@ro 7 #x10) (&u #xb848))
	(mov q (@ro 7 #x12) (r 2))
	(mov w (@ro 7 #x1a) (&u #xd0ff))
	(lea q (r 1) (@ro 7 #x10))
	(add q (r 7) (& #x28))
	;; (assign (register #x22) (cons-pointer (machine-constant #x28) (register #x23)))
	(mov q (r 3) (&u #xa000000000000000))
	(or q (r 3) (r 1))
	;; (assign (offset (register #x23) (machine-constant 2)) (register #x20))
	(mov q (@ro 1 #x10) (r 0))
	;; (assign (offset (register 4) (machine-constant 1)) (register #x22))
	(mov q (@ro 4 8) (r 3))
	;; (invocation:uuo-link 3 #f each)
	(jmp (@pcro |each-2-ARGS-1| 8))
	;; (closure-header lambda-6 1 0)
gc-label-16:
	(jmp (@ro 6 #xa8))
	(word u #xfffe)
	(block-offset lambda-15)
lambda-15:
	(mov q (r 0) (&u #x9ffffffffffffff4))
	(add q (@r 4) (r 0))
lambda-6:
	(cmp q (r 7) (@r 6))
	(jge (@pcr interrupt-17))
	(cmp q (r 4) (@ro 6 #x58))
	(jl (@pcr interrupt-17))
	;; (assign (register #x22) (cons-pointer (machine-constant #x28) (entry:continuation continuation-2)))
	(mov q (r 1) (&u #xa000000000000000))
	(lea q (r 0) (@pcr continuation-2))
	(or q (r 0) (r 1))
	;; (assign (pre-increment (register 4) -1) (register #x22))
	(push q (r 0))
	;; (eq-test (offset (register 4) (machine-constant 4)) (constant #f))
	(cmp q (@ro 4 #x20) (&u 0))
	(je (@pcr label-20))
	;; (assign (register #x25) (constant "*"))
	(mov q (r 0) (@pcr |OBJECT-3|))
	;; (assign (pre-increment (register 4) -1) (register #x25))
	(push q (r 0))
	(jmp (@pcr label-19))
label-20:
	;; (assign (register #x26) (constant "-"))
	(mov q (r 0) (@pcr |OBJECT-2|))
	;; (assign (pre-increment (register 4) -1) (register #x26))
	(push q (r 0))
label-19:
label-26:
	;; (invocation:uuo-link 2 continuation-2 display)
	(jmp (@pcro |display-1-ARGS-4| 8))
	;; (continuation-header continuation-2)
	(word u #x8480)
	(block-offset continuation-2)
continuation-2:
	;; (assign (register #x22) (cons-pointer (machine-constant #x28) (entry:continuation continuation-3)))
	(mov q (r 1) (&u #xa000000000000000))
	(lea q (r 0) (@pcr continuation-3))
	(or q (r 0) (r 1))
	;; (assign (pre-increment (register 4) -1) (register #x22))
	(push q (r 0))
	;; (assign (register #x23) (offset (register 4) (machine-constant 1)))
	(mov q (r 0) (@ro 4 8))
	;; (assign (register #x24) (object->address (register #x23)))
	(and q (r 0) (r 5))
	;; (assign (register #x25) (offset (register #x24) (machine-constant 2)))
	(mov q (r 2) (@ro 0 #x10))
	;; (assign (pre-increment (register 4) -1) (register #x25))
	(push q (r 2))
	;; (invocation:uuo-link 2 continuation-3 cols)
	(jmp (@pcro |cols-1-ARGS-5| 8))
	;; (continuation-header continuation-3)
	(word u #x8480)
	(block-offset continuation-3)
continuation-3:
	;; (assign (register #x20) (offset (register 6) (machine-constant 2)))
	(mov q (r 0) (@ro 6 #x10))
	;; (assign (register #x27) (object->type (register #x20)))
	(mov q (r 1) (r 0))
	(shr q (r 1) (&u #x3a))
	;; (type-test (register #x27) #x1a)
	(cmp b (r 1) (&u #x1a))
	(jne (@pcr label-25))
	;; (assign (register #x29) (object->fixnum (register #x20)))
	(mov q (r 1) (r 0))
	(sal q (r 1) (&u 6))
	;; (assign (register #x28) (fixnum-1-arg minus-one-plus-fixnum (register #x29) #t))
	(add q (r 1) (& #x-40))
	;; (overflow-test)
	(jo (@pcr label-25))
	;; (assign (register #x26) (fixnum->object (register #x28)))
	(or q (r 1) (&u #x1a))
	(ror q (r 1) (&u 6))
label-24:
	;; (assign (register #x2a) (offset (register 4) (machine-constant 2)))
	(mov q (r 0) (@ro 4 #x10))
	;; (assign (register #x2b) (object->type (register #x2a)))
	(mov q (r 2) (r 0))
	(shr q (r 2) (&u #x3a))
	;; (type-test (register #x2b) #x1a)
	(cmp b (r 2) (&u #x1a))
	(jne (@pcr label-23))
	;; (assign (register #x2c) (object->type (register #x26)))
	(mov q (r 2) (r 1))
	(shr q (r 2) (&u #x3a))
	;; (type-test (register #x2c) #x1a)
	(cmp b (r 2) (&u #x1a))
	(jne (@pcr label-23))
	;; (eq-test (register #x2a) (register #x26))
	(cmp q (r 0) (r 1))
	(jne (@pcr label-22))
label-21:
	;; (assign #0=(register 4) (offset-address #0# (machine-constant 4)))
	(add q (r 4) (& #x20))
	;; (invocation:uuo-link 1 #f newline)
	(jmp (@pcro |newline-0-ARGS-0| 8))
label-22:
	;; (assign (offset (register 6) (machine-constant 2)) (constant #!unspecific))
	(mov q (r 0) (&u #x2000000000000001))
	(mov q (@ro 6 #x10) (r 0))
	;; (assign #0=(register 4) (offset-address #0# (machine-constant 4)))
	(add q (r 4) (& #x20))
	;; (pop-return)
	(cmp q (r 7) (@r 6))
	(jge (@pcr interrupt-18))
	(pop q (r 0))
	(and q (r 0) (r 5))
	(jmp (r 0))
interrupt-18:
	(jmp (@ro 6 #x1b8))
label-23:
	;; (assign (register #x2d) (offset (register 4) (machine-constant 2)))
	(mov q (r 0) (@ro 4 #x10))
	;; (assign (register #x31) (cons-pointer (machine-constant #x28) (entry:continuation label-10)))
	(mov q (r 3) (&u #xa000000000000000))
	(lea q (r 2) (@pcr label-10))
	(or q (r 2) (r 3))
	;; (assign (pre-increment (register 4) -1) (register #x31))
	(push q (r 2))
	;; (assign (pre-increment (register 4) -1) (register #x26))
	(push q (r 1))
	;; (assign (pre-increment (register 4) -1) (register #x2d))
	(push q (r 0))
	;; (invocation:special-primitive 3 label-10 #[primitive-procedure 0 &=])
	(jmp (@ro 6 #x118))
	;; (continuation-entry label-10)
	(word u #x8480)
	(block-offset label-10)
label-10:
	;; (eq-test (offset (register 6) (machine-constant 2)) (constant #f))
	(cmp q (@ro 6 #x10) (&u 0))
	(je (@pcr label-22))
	(jmp (@pcr label-21))
label-25:
	;; (assign (register #x24) (cons-pointer (machine-constant #x28) (entry:continuation label-9)))
	(mov q (r 2) (&u #xa000000000000000))
	(lea q (r 1) (@pcr label-9))
	(or q (r 1) (r 2))
	;; (assign (pre-increment (register 4) -1) (register #x24))
	(push q (r 1))
	;; (assign (pre-increment (register 4) -1) (register #x20))
	(push q (r 0))
	;; (invocation:special-primitive 2 label-9 #[primitive-procedure 0 -1+])
	(jmp (@ro 6 #x138))
	;; (continuation-entry label-9)
	(word u #x8480)
	(block-offset label-9)
label-9:
	;; (assign (register #x26) (offset (register 6) (machine-constant 2)))
	(mov q (r 0) (@ro 6 #x10))
	(mov q (r 1) (r 0))
	(jmp (@pcr label-24))
interrupt-14:
	(jmp (@pcr label-13))
interrupt-17:
	(jmp (@pcr gc-label-16))

LAP for object 4 in R7RS library (example life)
    (named-lambda (life grid iterations)
      ((let ()
         (define do-loop
           (named-lambda (do-loop i grid0 grid1)
             (let ((temp (&= i iterations)))
               (if temp
                   temp
                   (begin
                    (each
                     grid0
                     (lambda (j k v)
                       (let ((a (life-alive? grid0 j k)))
                         (set! grid1 j k a))))
                    (life-print grid1)
                    (do-loop (|1+| i) grid1 grid0))))))
         do-loop)
       0
       grid
       (make (rows grid) (cols grid))))


	(entry-point life-19)
	(scheme-object |CONSTANT-21| #x15)
	(scheme-object |set!-4-ARGS-6| 5)
	(scheme-object |CONSTANT-20| set!)
	(scheme-object |CONSTANT-19| #f)
	(scheme-object |life-alive?-3-ARGS-5| 4)
	(scheme-object |CONSTANT-18| life-alive?)
	(scheme-object |CONSTANT-17| #f)
	(scheme-object |life-print-1-ARGS-4| 2)
	(scheme-object |CONSTANT-16| life-print)
	(scheme-object |CONSTANT-15| #f)
	(scheme-object |make-2-ARGS-3| 3)
	(scheme-object |CONSTANT-14| make)
	(scheme-object |CONSTANT-13| #f)
	(scheme-object |each-2-ARGS-2| 3)
	(scheme-object |CONSTANT-12| each)
	(scheme-object |CONSTANT-11| #f)
	(scheme-object |rows-1-ARGS-1| 2)
	(scheme-object |CONSTANT-10| rows)
	(scheme-object |CONSTANT-9| #f)
	(scheme-object |cols-1-ARGS-0| 2)
	(scheme-object |CONSTANT-8| cols)
	(scheme-object |CONSTANT-7| #f)
	(scheme-object |CONSTANT-22| debugging-info)
	(scheme-object |CONSTANT-23| environment)
	;; (procedure-header life-14 3 3)
	(equate life-19 life-14)
label-20:
	(call (@ro 6 #x98))
	(word u #x303)
	(block-offset life-14)
life-14:
	(cmp q (r 7) (@r 6))
	(jge (@pcr interrupt-21))
	(cmp q (r 4) (@ro 6 #x58))
	(jl (@pcr interrupt-21))
	;; (assign (register #x22) (cons-pointer (machine-constant #x28) (entry:continuation continuation-2)))
	(mov q (r 1) (&u #xa000000000000000))
	(lea q (r 0) (@pcr continuation-2))
	(or q (r 0) (r 1))
	;; (assign (pre-increment (register 4) -1) (register #x22))
	(push q (r 0))
	;; (assign (register #x25) (cons-pointer (machine-constant #x28) (entry:continuation continuation-1)))
	(mov q (r 2) (&u #xa000000000000000))
	(lea q (r 0) (@pcr continuation-1))
	(or q (r 0) (r 2))
	;; (assign (pre-increment (register 4) -1) (register #x25))
	(push q (r 0))
	;; (assign (register #x26) (offset (register 4) (machine-constant 2)))
	(mov q (r 0) (@ro 4 #x10))
	;; (assign (pre-increment (register 4) -1) (register #x26))
	(push q (r 0))
	;; (invocation:uuo-link 2 continuation-1 cols)
	(jmp (@pcro |cols-1-ARGS-0| 8))
	;; (continuation-header continuation-1)
	(word u #x8380)
	(block-offset continuation-1)
continuation-1:
	;; (assign (register #x24) (offset (register 6) (machine-constant 2)))
	(mov q (r 0) (@ro 6 #x10))
	;; (assign (pre-increment (register 4) -1) (register #x24))
	(push q (r 0))
	;; (assign (register #x22) (cons-pointer (machine-constant #x28) (entry:continuation continuation-0)))
	(mov q (r 1) (&u #xa000000000000000))
	(lea q (r 0) (@pcr continuation-0))
	(or q (r 0) (r 1))
	;; (assign (pre-increment (register 4) -1) (register #x22))
	(push q (r 0))
	;; (assign (register #x23) (offset (register 4) (machine-constant 3)))
	(mov q (r 0) (@ro 4 #x18))
	;; (assign (pre-increment (register 4) -1) (register #x23))
	(push q (r 0))
	;; (invocation:uuo-link 2 continuation-0 rows)
	(jmp (@pcro |rows-1-ARGS-1| 8))
	;; (continuation-header continuation-0)
	(word u #x8480)
	(block-offset continuation-0)
continuation-0:
	;; (assign (register #x20) (offset (register 6) (machine-constant 2)))
	(mov q (r 0) (@ro 6 #x10))
	;; (assign (pre-increment (register 4) -1) (register #x20))
	(push q (r 0))
	;; (invocation:uuo-link 3 continuation-2 make)
	(jmp (@pcro |make-2-ARGS-3| 8))
	;; (continuation-header continuation-2)
	(word u #x8280)
	(block-offset continuation-2)
continuation-2:
	;; (assign (register #x22) (offset (register 6) (machine-constant 2)))
	(mov q (r 0) (@ro 6 #x10))
	;; (assign (pre-increment (register 4) -1) (register #x22))
	(push q (r 0))
	;; (assign (register #x20) (offset (register 4) (machine-constant 1)))
	(mov q (r 0) (@ro 4 8))
	;; (assign (pre-increment (register 4) -1) (register #x20))
	(push q (r 0))
	;; (assign (pre-increment (register 4) -1) (constant 0))
	(mov q (r 0) (&u #x6800000000000000))
	(push q (r 0))
	;; (invocation:jump 3 #f do-loop-12)
	(jmp (@pcr do-loop-12))
	;; (open-procedure-header do-loop-12)
	(equate do-loop-24 do-loop-12)
label-22:
	(call (@ro 6 #x98))
	(word u #x8580)
	(block-offset do-loop-12)
do-loop-12:
	(cmp q (r 7) (@r 6))
	(jge (@pcr interrupt-23))
	(cmp q (r 4) (@ro 6 #x58))
	(jl (@pcr interrupt-23))
	;; (assign (register #x20) (offset (register 4) (machine-constant 0)))
	(mov q (r 0) (@r 4))
	;; (assign (register #x21) (object->type (register #x20)))
	(mov q (r 1) (r 0))
	(shr q (r 1) (&u #x3a))
	;; (type-test (register #x21) #x1a)
	(cmp b (r 1) (&u #x1a))
	(jne (@pcr label-34))
	;; (assign (register #x22) (offset (register 4) (machine-constant 4)))
	(mov q (r 1) (@ro 4 #x20))
	;; (assign (register #x23) (object->type (register #x22)))
	(mov q (r 2) (r 1))
	(shr q (r 2) (&u #x3a))
	;; (type-test (register #x23) #x1a)
	(cmp b (r 2) (&u #x1a))
	(jne (@pcr label-34))
	;; (eq-test (register #x20) (register #x22))
	(cmp q (r 0) (r 1))
	(je (@pcr label-29))
	;; (assign (pre-increment (register 4) -1) (constant #f))
	(push q (&u 0))
	(jmp (@pcr label-28))
label-29:
	;; (assign (pre-increment (register 4) -1) (constant #t))
	(mov q (r 0) (&u #x2000000000000000))
	(push q (r 0))
label-28:
label-33:
	;; (assign (register #x2e) (offset (register 4) (machine-constant 0)))
	(mov q (r 0) (@r 4))
	;; (eq-test (register #x2e) (constant #f))
	(cmp q (r 0) (&u 0))
	(jne (@pcr label-32))
	;; (assign (register #x34) (cons-pointer (machine-constant #x28) (entry:continuation continuation-8)))
	(mov q (r 1) (&u #xa000000000000000))
	(lea q (r 0) (@pcr continuation-8))
	(or q (r 0) (r 1))
	;; (assign (pre-increment (register 4) -1) (register #x34))
	(push q (r 0))
	;; (assign (register #x36) (cons-closure (entry:procedure lambda-7) 4 4 2))
	(mov q (r 2) (&u #x3400000000000005))
	(mov q (@r 7) (r 2))
	(mov l (@ro 7 8) (&u 1))
	(mov l (@ro 7 #xc) (&u #x200404))
	(lea q (r 2) (@pcr lambda-25))
	(mov w (@ro 7 #x10) (&u #xb848))
	(mov q (@ro 7 #x12) (r 2))
	(mov w (@ro 7 #x1a) (&u #xd0ff))
	(lea q (r 0) (@ro 7 #x10))
	(add q (r 7) (& #x30))
	;; (assign (register #x35) (cons-pointer (machine-constant #x28) (register #x36)))
	(mov q (r 3) (&u #xa000000000000000))
	(or q (r 3) (r 0))
	;; (assign (register #x39) (register #x36))
	;; (assign (register #x3a) (offset (register 4) (machine-constant 4)))
	(mov q (r 8) (@ro 4 #x20))
	;; (assign (offset (register #x39) (machine-constant 2)) (register #x3a))
	(mov q (@ro 0 #x10) (r 8))
	;; (assign (register #x38) (offset (register 4) (machine-constant 3)))
	(mov q (r 8) (@ro 4 #x18))
	;; (assign (offset (register #x39) (machine-constant 3)) (register #x38))
	(mov q (@ro 0 #x18) (r 8))
	;; (assign (pre-increment (register 4) -1) (register #x35))
	(push q (r 3))
	;; (assign (pre-increment (register 4) -1) (register #x38))
	(push q (r 8))
	;; (invocation:uuo-link 3 continuation-8 each)
	(jmp (@pcro |each-2-ARGS-2| 8))
	;; (continuation-header continuation-8)
	(word u #x8680)
	(block-offset continuation-8)
continuation-8:
	;; (assign (register #x22) (cons-pointer (machine-constant #x28) (entry:continuation continuation-9)))
	(mov q (r 1) (&u #xa000000000000000))
	(lea q (r 0) (@pcr continuation-9))
	(or q (r 0) (r 1))
	;; (assign (pre-increment (register 4) -1) (register #x22))
	(push q (r 0))
	;; (assign (register #x23) (offset (register 4) (machine-constant 4)))
	(mov q (r 0) (@ro 4 #x20))
	;; (assign (pre-increment (register 4) -1) (register #x23))
	(push q (r 0))
	;; (invocation:uuo-link 2 continuation-9 life-print)
	(jmp (@pcro |life-print-1-ARGS-4| 8))
	;; (continuation-header continuation-9)
	(word u #x8680)
	(block-offset continuation-9)
continuation-9:
	;; (assign (register #x26) (offset (register 4) (machine-constant 1)))
	(mov q (r 0) (@ro 4 8))
	;; (assign (register #x27) (object->type (register #x26)))
	(mov q (r 1) (r 0))
	(shr q (r 1) (&u #x3a))
	;; (type-test (register #x27) #x1a)
	(cmp b (r 1) (&u #x1a))
	(jne (@pcr label-31))
	;; (assign (register #x2a) (object->fixnum (register #x26)))
	(sal q (r 0) (&u 6))
	;; (assign (register #x28) (fixnum-1-arg one-plus-fixnum (register #x2a) #t))
	(add q (r 0) (& #x40))
	;; (overflow-test)
	(jo (@pcr label-31))
	;; (assign (register #x25) (fixnum->object (register #x28)))
	(or q (r 0) (&u #x1a))
	(ror q (r 0) (&u 6))
label-30:
	;; (assign (offset (register 4) (machine-constant 1)) (register #x25))
	(mov q (@ro 4 8) (r 0))
	;; (assign (register #x2b) (offset (register 4) (machine-constant 2)))
	(mov q (r 0) (@ro 4 #x10))
	;; (assign (register #x2c) (offset (register 4) (machine-constant 3)))
	(mov q (r 1) (@ro 4 #x18))
	;; (assign (offset (register 4) (machine-constant 2)) (register #x2c))
	(mov q (@ro 4 #x10) (r 1))
	;; (assign (offset (register 4) (machine-constant 3)) (register #x2b))
	(mov q (@ro 4 #x18) (r 0))
	;; (assign #0=(register 4) (offset-address #0# (machine-constant 1)))
	(add q (r 4) (& 8))
	;; (invocation:jump 3 #f do-loop-12)
	(jmp (@pcr do-loop-12))
label-31:
	;; (assign (register #x20) (offset (register 4) (machine-constant 1)))
	(mov q (r 0) (@ro 4 8))
	;; (assign (register #x23) (cons-pointer (machine-constant #x28) (entry:continuation label-17)))
	(mov q (r 2) (&u #xa000000000000000))
	(lea q (r 1) (@pcr label-17))
	(or q (r 1) (r 2))
	;; (assign (pre-increment (register 4) -1) (register #x23))
	(push q (r 1))
	;; (assign (pre-increment (register 4) -1) (register #x20))
	(push q (r 0))
	;; (invocation:special-primitive 2 label-17 #[primitive-procedure 0 |1+|])
	(jmp (@ro 6 #x130))
	;; (continuation-entry label-17)
	(word u #x8680)
	(block-offset label-17)
label-17:
	;; (assign (register #x25) (offset (register 6) (machine-constant 2)))
	(mov q (r 0) (@ro 6 #x10))
	(jmp (@pcr label-30))
label-32:
	;; (assign (offset (register 6) (machine-constant 2)) (register #x2e))
	(mov q (@ro 6 #x10) (r 0))
	;; (assign #0=(register 4) (offset-address #0# (machine-constant 6)))
	(add q (r 4) (& #x30))
	;; (pop-return)
	(pop q (r 0))
	(and q (r 0) (r 5))
	(jmp (r 0))
label-34:
	;; (assign (register #x24) (offset (register 4) (machine-constant 0)))
	(mov q (r 0) (@r 4))
	;; (assign (register #x25) (offset (register 4) (machine-constant 4)))
	(mov q (r 1) (@ro 4 #x20))
	;; (assign (register #x28) (cons-pointer (machine-constant #x28) (entry:continuation label-16)))
	(mov q (r 3) (&u #xa000000000000000))
	(lea q (r 2) (@pcr label-16))
	(or q (r 2) (r 3))
	;; (assign (pre-increment (register 4) -1) (register #x28))
	(push q (r 2))
	;; (assign (pre-increment (register 4) -1) (register #x25))
	(push q (r 1))
	;; (assign (pre-increment (register 4) -1) (register #x24))
	(push q (r 0))
	;; (invocation:special-primitive 3 label-16 #[primitive-procedure 0 &=])
	(jmp (@ro 6 #x118))
	;; (continuation-entry label-16)
	(word u #x8580)
	(block-offset label-16)
label-16:
	;; (assign (register #x29) (offset (register 6) (machine-constant 2)))
	(mov q (r 0) (@ro 6 #x10))
	;; (assign (pre-increment (register 4) -1) (register #x29))
	(push q (r 0))
	(jmp (@pcr label-33))
	;; (closure-header lambda-7 1 0)
gc-label-26:
	(jmp (@ro 6 #xa8))
	(word u #xfffe)
	(block-offset lambda-25)
lambda-25:
	(mov q (r 0) (&u #x9ffffffffffffff4))
	(add q (@r 4) (r 0))
lambda-7:
	(cmp q (r 7) (@r 6))
	(jge (@pcr interrupt-27))
	(cmp q (r 4) (@ro 6 #x58))
	(jl (@pcr interrupt-27))
	;; (assign (register #x22) (cons-pointer (machine-constant #x28) (entry:continuation continuation-5)))
	(mov q (r 1) (&u #xa000000000000000))
	(lea q (r 0) (@pcr continuation-5))
	(or q (r 0) (r 1))
	;; (assign (pre-increment (register 4) -1) (register #x22))
	(push q (r 0))
	;; (assign (register #x23) (offset (register 4) (machine-constant 3)))
	(mov q (r 0) (@ro 4 #x18))
	;; (assign (pre-increment (register 4) -1) (register #x23))
	(push q (r 0))
	;; (assign (register #x24) (offset (register 4) (machine-constant 3)))
	(mov q (r 0) (@ro 4 #x18))
	;; (assign (pre-increment (register 4) -1) (register #x24))
	(push q (r 0))
	;; (assign (register #x25) (offset (register 4) (machine-constant 3)))
	(mov q (r 0) (@ro 4 #x18))
	;; (assign (register #x26) (object->address (register #x25)))
	(and q (r 0) (r 5))
	;; (assign (register #x27) (offset (register #x26) (machine-constant 3)))
	(mov q (r 2) (@ro 0 #x18))
	;; (assign (pre-increment (register 4) -1) (register #x27))
	(push q (r 2))
	;; (invocation:uuo-link 4 continuation-5 life-alive?)
	(jmp (@pcro |life-alive?-3-ARGS-5| 8))
	;; (continuation-header continuation-5)
	(word u #x8480)
	(block-offset continuation-5)
continuation-5:
	;; (assign (register #x25) (offset (register 6) (machine-constant 2)))
	(mov q (r 0) (@ro 6 #x10))
	;; (assign (pre-increment (register 4) -1) (register #x25))
	(push q (r 0))
	;; (assign (register #x21) (offset (register 4) (machine-constant 1)))
	(mov q (r 1) (@ro 4 8))
	;; (assign (register #x22) (object->address (register #x21)))
	(and q (r 1) (r 5))
	;; (assign (register #x20) (offset (register #x22) (machine-constant 2)))
	(mov q (r 2) (@ro 1 #x10))
	;; (assign (offset (register 4) (machine-constant 1)) (register #x20))
	(mov q (@ro 4 8) (r 2))
	;; (assign (offset (register 4) (machine-constant 4)) (register #x25))
	(mov q (@ro 4 #x20) (r 0))
	;; (assign #0=(register 4) (offset-address #0# (machine-constant 1)))
	(add q (r 4) (& 8))
	;; (invocation:uuo-link 5 #f set!)
	(jmp (@pcro |set!-4-ARGS-6| 8))
interrupt-21:
	(jmp (@pcr label-20))
interrupt-23:
	(jmp (@pcr label-22))
interrupt-27:
	(jmp (@pcr gc-label-26))

LAP for object 0 in R7RS library (example life)
    (begin
     (define (life-count grid i j)
       (define count
         (named-lambda (count i j)
           (if (ref grid i j)
               1
               0)))
       (+ (count (-1+ i) (-1+ j))
          (count (-1+ i) j)
          (count (-1+ i) (|1+| j))
          (count i (-1+ j))
          (count i (|1+| j))
          (count (|1+| i) (-1+ j))
          (count (|1+| i) j)
          (count (|1+| i) (|1+| j))))
     (define (life-alive? grid i j)
       (let ((key (life-count grid i j)))
         (cond ((eq? 3 key) #t)
               ((eq? 2 key) (ref grid i j))
               (else #f))))
     (define (life-print grid)
       (newline)
       (each
        grid
        (lambda (i j v)
          (display (if v "*" "-"))
          (if (&= j (-1+ (cols grid)))
              (newline)))))
     (define (life grid iterations)
       ((let ()
          (define do-loop
            (named-lambda (do-loop i grid0 grid1)
              (let ((temp (&= i iterations)))
                (if temp
                    temp
                    (begin
                     (each
                      grid0
                      (lambda (j k v)
                        (let ((a (life-alive? grid0 j k)))
                          (set! grid1 j k a))))
                     (life-print grid1)
                     (do-loop (|1+| i) grid1 grid0))))))
          do-loop)
        0
        grid
        (make (rows grid) (cols grid)))))


	(entry-point expression-1)
	(word u #xffff)
	(block-offset expression-1)
expression-1:
	(scheme-object |CONSTANT-6| #x30003)
	(scheme-object |GLOBAL-define-multiple-3-ARGS-2| 4)
	(scheme-object |CONSTANT-5| define-multiple)
	(scheme-object |CONSTANT-4| #f)
	(scheme-object |OBJECT-3| #(#[compiled-code-block 30] #[compiled-code-block 31] #[compiled-code-block 32] #[compiled-code-block 33]))
	(scheme-object |OBJECT-1| #(#[compiled-procedure 34 ("r7rs-example" #x1) #x1a #x115cf16e2] #[compiled-procedure 35 ("r7rs-example" #x2) #x1a #x115e8183a] #[compiled-procedure 36 ("r7rs-example" #x3) #x1a #x116209022] #[compiled-procedure 37 ("r7rs-example" #x4) #x1a #x1167ff21a]))
	(scheme-object |OBJECT-0| #(life-count life-alive? life-print life))
	(scheme-object |CONSTANT-7| debugging-info)
	(scheme-object |CONSTANT-8| environment)
	(mov q (r 0) (@ro 6 #x18))
	(mov q (@pcr |CONSTANT-8|) (r 0))
	(lea q (r 2) (@pcr label-2))
	(lea q (r 1) (@pcr |CONSTANT-6|))
	(mov q (r 8) (&u 1))
	(call (@ro 6 #xe0))
	(word u #x8080)
	(block-offset label-7)
label-7:
	(push q (& 0))
label-5:
	(mov q (r 0) (@r 4))
	(mov q (r 2) (@pcr |OBJECT-3|))
	(xor q (r 8) (r 8))
	(lea q (r 1) (@pcr label-4))
	(mov b (r 8) (@ri 1 0 1))
	(and q (r 2) (r 5))
	(mov q (r 2) (@roi 2 8 0 8))
	(and q (r 2) (r 5))
	(mov q (r 1) (@r 2))
	(mov q (r 0) (@ro 6 #x18))
	(and q (r 1) (r 5))
	(mov q (@ri 2 1 8) (r 0))
	(mov q (r 0) (@ro 2 8))
	(and q (r 0) (r 5))
	(lea q (r 1) (@roi 2 #x10 0 8))
	(call (@ro 6 #xe0))
	(word u #x8080)
	(block-offset label-6)
label-6:
	(add q (@r 4) (&u 1))
	(cmp q (@r 4) (&u 4))
	(jl (@pcr label-5))
	(jmp (@pcr label-3))
label-4:
	(byte u 1)
	(byte u 1)
	(byte u 1)
	(byte u 1)
label-3:
	(pop q (r 0))
	;; (assign (register #x20) (offset (register 6) (machine-constant 3)))
	(mov q (r 0) (@ro 6 #x18))
	;; (assign (pre-increment (register 4) -1) (register #x20))
	(push q (r 0))
	;; (assign (register #x21) (constant #(life-count life-alive? life-print life)))
	(mov q (r 1) (@pcr |OBJECT-0|))
	;; (assign (pre-increment (register 4) -1) (register #x21))
	(push q (r 1))
	;; (assign (pre-increment (register 4) -1) (register #x20))
	(push q (r 0))
	;; (assign (register #x23) (constant #(#[compiled-procedure 34 ("r7rs-example" #x1) #x1a #x115cf16e2] #[compiled-procedure 35 ("r7rs-example" #x2) #x1a #x115e8183a] #[compiled-procedure 36 ("r7rs-example" #x3) #x1a #x116209022] #[compiled-procedure 37 ("r7rs-example" #x4) #x1a #x1167ff21a])))
	(mov q (r 0) (@pcr |OBJECT-1|))
	;; (assign (offset (register 4) (machine-constant 2)) (register #x23))
	(mov q (@ro 4 #x10) (r 0))
	;; (invocation:global-link 4 #f define-multiple)
	(jmp (@pcro |GLOBAL-define-multiple-3-ARGS-2| 8))

LAP for object 0 in R7RS top level
    (begin (define grid (make-grid #x18 #x18))
           (grid-set! grid 1 1 #t)
           (grid-set! grid 2 2 #t)
           (grid-set! grid 3 0 #t)
           (grid-set! grid 3 1 #t)
           (grid-set! grid 3 2 #t)
           (life grid #x50))


	(entry-point expression-8)
	(word u #xffff)
	(block-offset expression-8)
expression-8:
	(scheme-object |CONSTANT-13| 9)
	(scheme-object |life-2-ARGS-5| 3)
	(scheme-object |CONSTANT-12| life)
	(scheme-object |CONSTANT-11| #f)
	(scheme-object |grid-set!-4-ARGS-2| 5)
	(scheme-object |CONSTANT-10| grid-set!)
	(scheme-object |CONSTANT-9| #f)
	(scheme-object |make-grid-2-ARGS-0| 3)
	(scheme-object |CONSTANT-8| make-grid)
	(scheme-object |CONSTANT-7| #f)
	(scheme-object |CONSTANT-6| #x10001)
	(scheme-object |grid-READ-CELL-1| grid)
	(scheme-object |OBJECT-4| #[primitive-procedure 0 local-assignment])
	(scheme-object |OBJECT-3| grid)
	(scheme-object |CONSTANT-14| debugging-info)
	(scheme-object |CONSTANT-15| environment)
	(mov q (r 0) (@ro 6 #x18))
	(mov q (@pcr |CONSTANT-15|) (r 0))
	(lea q (r 2) (@pcr label-15))
	(lea q (r 1) (@pcr |CONSTANT-13|))
	(mov q (r 8) (&u 2))
	(call (@ro 6 #xe0))
	(word u #x8080)
	(block-offset label-16)
label-16:
	;; (assign (register #x20) (offset (register 6) (machine-constant 3)))
	(mov q (r 0) (@ro 6 #x18))
	;; (assign (pre-increment (register 4) -1) (register #x20))
	(push q (r 0))
	;; (assign (register #x23) (cons-pointer (machine-constant #x28) (entry:continuation continuation-1)))
	(mov q (r 1) (&u #xa000000000000000))
	(lea q (r 0) (@pcr continuation-1))
	(or q (r 0) (r 1))
	;; (assign (pre-increment (register 4) -1) (register #x23))
	(push q (r 0))
	;; (assign (register #x26) (cons-pointer (machine-constant #x28) (entry:continuation continuation-0)))
	(mov q (r 2) (&u #xa000000000000000))
	(lea q (r 0) (@pcr continuation-0))
	(or q (r 0) (r 2))
	;; (assign (pre-increment (register 4) -1) (register #x26))
	(push q (r 0))
	;; (assign (register #x27) (constant #x18))
	(mov q (r 0) (&u #x6800000000000018))
	;; (assign (pre-increment (register 4) -1) (register #x27))
	(push q (r 0))
	;; (assign (pre-increment (register 4) -1) (register #x27))
	(push q (r 0))
	;; (invocation:uuo-link 3 continuation-0 make-grid)
	(jmp (@pcro |make-grid-2-ARGS-0| 8))
	;; (continuation-header continuation-0)
	(word u #x8280)
	(block-offset continuation-0)
continuation-0:
	;; (assign (register #x22) (offset (register 6) (machine-constant 2)))
	(mov q (r 0) (@ro 6 #x10))
	;; (assign (pre-increment (register 4) -1) (register #x22))
	(push q (r 0))
	;; (assign (register #x20) (constant grid))
	(mov q (r 0) (@pcr |OBJECT-3|))
	;; (assign (pre-increment (register 4) -1) (register #x20))
	(push q (r 0))
	;; (assign (register #x21) (offset (register 4) (machine-constant 3)))
	(mov q (r 0) (@ro 4 #x18))
	;; (assign (pre-increment (register 4) -1) (register #x21))
	(push q (r 0))
	;; (invocation:primitive 4 continuation-1 #[primitive-procedure 0 local-assignment])
	(mov q (r 3) (@pcr |OBJECT-4|))
	(jmp (@ro 6 #xb8))
	;; (continuation-header continuation-1)
	(word u #x8180)
	(block-offset continuation-1)
continuation-1:
	;; (assign (register #x22) (cons-pointer (machine-constant #x28) (entry:continuation continuation-2)))
	(mov q (r 1) (&u #xa000000000000000))
	(lea q (r 0) (@pcr continuation-2))
	(or q (r 0) (r 1))
	;; (assign (pre-increment (register 4) -1) (register #x22))
	(push q (r 0))
	;; (assign (pre-increment (register 4) -1) (constant #t))
	(mov q (r 0) (&u #x2000000000000000))
	(push q (r 0))
	;; (assign (register #x24) (constant 1))
	(mov q (r 2) (&u #x6800000000000001))
	;; (assign (pre-increment (register 4) -1) (register #x24))
	(push q (r 2))
	;; (assign (pre-increment (register 4) -1) (register #x24))
	(push q (r 2))
	;; (assign (register #x27) (variable-cache grid))
	(mov q (r 2) (@pcr |grid-READ-CELL-1|))
	;; (assign (register #x2a) (offset (register #x27) (machine-constant 0)))
	(mov q (r 3) (@r 2))
	;; (assign (register #x2b) (object->type (register #x2a)))
	(mov q (r 8) (r 3))
	(shr q (r 8) (&u #x3a))
	;; (type-test (register #x2b) #x32)
	(cmp b (r 8) (&u #x32))
	(je (@pcr label-28))
	;; (assign (register #x26) (register #x2a))
	(mov q (r 0) (r 3))
label-27:
	;; (assign (pre-increment (register 4) -1) (register #x26))
	(push q (r 0))
	;; (invocation:uuo-link 5 continuation-2 grid-set!)
	(jmp (@pcro |grid-set!-4-ARGS-2| 8))
	;; (continuation-header continuation-2)
	(word u #x8180)
	(block-offset continuation-2)
continuation-2:
	;; (assign (register #x22) (cons-pointer (machine-constant #x28) (entry:continuation continuation-3)))
	(mov q (r 1) (&u #xa000000000000000))
	(lea q (r 0) (@pcr continuation-3))
	(or q (r 0) (r 1))
	;; (assign (pre-increment (register 4) -1) (register #x22))
	(push q (r 0))
	;; (assign (pre-increment (register 4) -1) (constant #t))
	(mov q (r 0) (&u #x2000000000000000))
	(push q (r 0))
	;; (assign (register #x24) (constant 2))
	(mov q (r 2) (&u #x6800000000000002))
	;; (assign (pre-increment (register 4) -1) (register #x24))
	(push q (r 2))
	;; (assign (pre-increment (register 4) -1) (register #x24))
	(push q (r 2))
	;; (assign (register #x27) (variable-cache grid))
	(mov q (r 2) (@pcr |grid-READ-CELL-1|))
	;; (assign (register #x2a) (offset (register #x27) (machine-constant 0)))
	(mov q (r 3) (@r 2))
	;; (assign (register #x2b) (object->type (register #x2a)))
	(mov q (r 8) (r 3))
	(shr q (r 8) (&u #x3a))
	;; (type-test (register #x2b) #x32)
	(cmp b (r 8) (&u #x32))
	(je (@pcr label-26))
	;; (assign (register #x26) (register #x2a))
	(mov q (r 0) (r 3))
label-25:
	;; (assign (pre-increment (register 4) -1) (register #x26))
	(push q (r 0))
	;; (invocation:uuo-link 5 continuation-3 grid-set!)
	(jmp (@pcro |grid-set!-4-ARGS-2| 8))
	;; (continuation-header continuation-3)
	(word u #x8180)
	(block-offset continuation-3)
continuation-3:
	;; (assign (register #x22) (cons-pointer (machine-constant #x28) (entry:continuation continuation-4)))
	(mov q (r 1) (&u #xa000000000000000))
	(lea q (r 0) (@pcr continuation-4))
	(or q (r 0) (r 1))
	;; (assign (pre-increment (register 4) -1) (register #x22))
	(push q (r 0))
	;; (assign (pre-increment (register 4) -1) (constant #t))
	(mov q (r 0) (&u #x2000000000000000))
	(push q (r 0))
	;; (assign (pre-increment (register 4) -1) (constant 0))
	(mov q (r 2) (&u #x6800000000000000))
	(push q (r 2))
	;; (assign (pre-increment (register 4) -1) (constant 3))
	(mov q (r 3) (&u #x6800000000000003))
	(push q (r 3))
	;; (assign (register #x27) (variable-cache grid))
	(mov q (r 8) (@pcr |grid-READ-CELL-1|))
	;; (assign (register #x2a) (offset (register #x27) (machine-constant 0)))
	(mov q (r 9) (@r 8))
	;; (assign (register #x2b) (object->type (register #x2a)))
	(mov q (r #xa) (r 9))
	(shr q (r #xa) (&u #x3a))
	;; (type-test (register #x2b) #x32)
	(cmp b (r #xa) (&u #x32))
	(je (@pcr label-24))
	;; (assign (register #x26) (register #x2a))
	(mov q (r 0) (r 9))
label-23:
	;; (assign (pre-increment (register 4) -1) (register #x26))
	(push q (r 0))
	;; (invocation:uuo-link 5 continuation-4 grid-set!)
	(jmp (@pcro |grid-set!-4-ARGS-2| 8))
	;; (continuation-header continuation-4)
	(word u #x8180)
	(block-offset continuation-4)
continuation-4:
	;; (assign (register #x22) (cons-pointer (machine-constant #x28) (entry:continuation continuation-5)))
	(mov q (r 1) (&u #xa000000000000000))
	(lea q (r 0) (@pcr continuation-5))
	(or q (r 0) (r 1))
	;; (assign (pre-increment (register 4) -1) (register #x22))
	(push q (r 0))
	;; (assign (pre-increment (register 4) -1) (constant #t))
	(mov q (r 0) (&u #x2000000000000000))
	(push q (r 0))
	;; (assign (pre-increment (register 4) -1) (constant 1))
	(mov q (r 2) (&u #x6800000000000001))
	(push q (r 2))
	;; (assign (pre-increment (register 4) -1) (constant 3))
	(mov q (r 3) (&u #x6800000000000003))
	(push q (r 3))
	;; (assign (register #x27) (variable-cache grid))
	(mov q (r 8) (@pcr |grid-READ-CELL-1|))
	;; (assign (register #x2a) (offset (register #x27) (machine-constant 0)))
	(mov q (r 9) (@r 8))
	;; (assign (register #x2b) (object->type (register #x2a)))
	(mov q (r #xa) (r 9))
	(shr q (r #xa) (&u #x3a))
	;; (type-test (register #x2b) #x32)
	(cmp b (r #xa) (&u #x32))
	(je (@pcr label-22))
	;; (assign (register #x26) (register #x2a))
	(mov q (r 0) (r 9))
label-21:
	;; (assign (pre-increment (register 4) -1) (register #x26))
	(push q (r 0))
	;; (invocation:uuo-link 5 continuation-5 grid-set!)
	(jmp (@pcro |grid-set!-4-ARGS-2| 8))
	;; (continuation-header continuation-5)
	(word u #x8180)
	(block-offset continuation-5)
continuation-5:
	;; (assign (register #x22) (cons-pointer (machine-constant #x28) (entry:continuation continuation-6)))
	(mov q (r 1) (&u #xa000000000000000))
	(lea q (r 0) (@pcr continuation-6))
	(or q (r 0) (r 1))
	;; (assign (pre-increment (register 4) -1) (register #x22))
	(push q (r 0))
	;; (assign (pre-increment (register 4) -1) (constant #t))
	(mov q (r 0) (&u #x2000000000000000))
	(push q (r 0))
	;; (assign (pre-increment (register 4) -1) (constant 2))
	(mov q (r 2) (&u #x6800000000000002))
	(push q (r 2))
	;; (assign (pre-increment (register 4) -1) (constant 3))
	(mov q (r 3) (&u #x6800000000000003))
	(push q (r 3))
	;; (assign (register #x27) (variable-cache grid))
	(mov q (r 8) (@pcr |grid-READ-CELL-1|))
	;; (assign (register #x2a) (offset (register #x27) (machine-constant 0)))
	(mov q (r 9) (@r 8))
	;; (assign (register #x2b) (object->type (register #x2a)))
	(mov q (r #xa) (r 9))
	(shr q (r #xa) (&u #x3a))
	;; (type-test (register #x2b) #x32)
	(cmp b (r #xa) (&u #x32))
	(je (@pcr label-20))
	;; (assign (register #x26) (register #x2a))
	(mov q (r 0) (r 9))
label-19:
	;; (assign (pre-increment (register 4) -1) (register #x26))
	(push q (r 0))
	;; (invocation:uuo-link 5 continuation-6 grid-set!)
	(jmp (@pcro |grid-set!-4-ARGS-2| 8))
	;; (continuation-header continuation-6)
	(word u #x8180)
	(block-offset continuation-6)
continuation-6:
	;; (assign (register #x21) (variable-cache grid))
	(mov q (r 0) (@pcr |grid-READ-CELL-1|))
	;; (assign (register #x24) (offset (register #x21) (machine-constant 0)))
	(mov q (r 1) (@r 0))
	;; (assign (register #x25) (object->type (register #x24)))
	(mov q (r 2) (r 1))
	(shr q (r 2) (&u #x3a))
	;; (type-test (register #x25) #x32)
	(cmp b (r 2) (&u #x32))
	(je (@pcr label-18))
	;; (assign (register #x20) (register #x24))
	(mov q (r 0) (r 1))
label-17:
	;; (assign (pre-increment (register 4) -1) (register #x20))
	(push q (r 0))
	;; (assign (offset (register 4) (machine-constant 1)) (constant #x50))
	(mov q (r 0) (&u #x6800000000000050))
	(mov q (@ro 4 8) (r 0))
	;; (invocation:uuo-link 3 #f life)
	(jmp (@pcro |life-2-ARGS-5| 8))
label-18:
	;; (interpreter-call:cache-reference label-14 (register #x21) #f)
	(mov q (r 2) (r 0))
	(call (@ro 6 #xd0))
	;; (continuation-entry label-14)
	(word u #x8180)
	(block-offset label-14)
label-14:
	;; (assign (register #x20) (register 0))
	(jmp (@pcr label-17))
label-20:
	;; (interpreter-call:cache-reference label-13 (register #x27) #f)
	(mov q (r 2) (r 8))
	(call (@ro 6 #xd0))
	;; (continuation-entry label-13)
	(word u #x8580)
	(block-offset label-13)
label-13:
	;; (assign (register #x26) (register 0))
	(jmp (@pcr label-19))
label-22:
	;; (interpreter-call:cache-reference label-12 (register #x27) #f)
	(mov q (r 2) (r 8))
	(call (@ro 6 #xd0))
	;; (continuation-entry label-12)
	(word u #x8580)
	(block-offset label-12)
label-12:
	;; (assign (register #x26) (register 0))
	(jmp (@pcr label-21))
label-24:
	;; (interpreter-call:cache-reference label-11 (register #x27) #f)
	(mov q (r 2) (r 8))
	(call (@ro 6 #xd0))
	;; (continuation-entry label-11)
	(word u #x8580)
	(block-offset label-11)
label-11:
	;; (assign (register #x26) (register 0))
	(jmp (@pcr label-23))
label-26:
	;; (interpreter-call:cache-reference label-10 (register #x27) #f)
	(mov q (@ro 6 #x300) (r 2))
	(call (@ro 6 #xd0))
	;; (continuation-entry label-10)
	(word u #x8580)
	(block-offset label-10)
label-10:
	;; (assign (register #x26) (register 0))
	(jmp (@pcr label-25))
label-28:
	;; (interpreter-call:cache-reference label-9 (register #x27) #f)
	(mov q (@ro 6 #x300) (r 2))
	(call (@ro 6 #xd0))
	;; (continuation-entry label-9)
	(word u #x8580)
	(block-offset label-9)
label-9:
	;; (assign (register #x26) (register 0))
	(jmp (@pcr label-27))
