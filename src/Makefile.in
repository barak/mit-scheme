# Copyright (C) 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994,
#     1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004,
#     2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014,
#     2015, 2016, 2017, 2018, 2019 Massachusetts Institute of
#     Technology
#
# This file is part of MIT/GNU Scheme.
#
# MIT/GNU Scheme is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation; either version 2 of the
# License, or (at your option) any later version.
#
# MIT/GNU Scheme is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with MIT/GNU Scheme; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
# 02110-1301, USA.

# **** BEGIN BOILERPLATE ****

SHELL = @SHELL@

@SET_MAKE@

srcdir = @srcdir@
top_srcdir = @top_srcdir@
VPATH = @srcdir@
prefix = @prefix@
exec_prefix = @exec_prefix@

bindir = @bindir@
sbindir = @sbindir@
libexecdir = @libexecdir@
datarootdir = @datarootdir@
datadir = @datadir@
sysconfdir = @sysconfdir@
sharedstatedir = @sharedstatedir@
localstatedir = @localstatedir@
libdir = @libdir@
infodir = @infodir@
mandir = @mandir@
includedir = @includedir@
oldincludedir = /usr/include

DESTDIR =
top_builddir = @top_builddir@

INSTALL = @INSTALL@
INSTALL_PROGRAM = @INSTALL_PROGRAM@
INSTALL_DATA = @INSTALL_DATA@
INSTALL_SCRIPT = @INSTALL_SCRIPT@

LN_S = @LN_S@
ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
mkinstalldirs = $(SHELL) $(top_srcdir)/microcode/mkinstalldirs

# **** END BOILERPLATE ****

.PHONY: default-target
default-target: @DEFAULT_TARGET@

LIARC_BOOT_BUNDLES = compiler cref sf star-parser
LIARC_BUNDLES = $(LIARC_BOOT_BUNDLES) ffi sos ssp xml

SUBDIRS = $(INSTALLED_SUBDIRS) win32 xdoc
INSTALLED_SUBDIRS = microcode runtime $(OPTION_SUBDIRS) $(LIARC_BUNDLES)
BASICS_SUBDIRS = microcode runtime $(LIARC_BUNDLES)
OPTION_SUBDIRS = @OPTION_SUBDIRS@

MIT_SCHEME_EXE = @MIT_SCHEME_EXE@
AUXDIR_NAME = @AUXDIR_NAME@
AUXDIR = @AUXDIR@

MAKE_IN_SUBDIRS = \
	f () { t=$$1; shift; for d; do (cd "$$d" && $(MAKE) "$$t"); done; }; f

@IF_CROSS@COMPILER_SETTINGS_CROSS = (set! compiler:cross-compiling? true)
@IF_CROSS@SF_SETTINGS_CROSS = \
@IF_CROSS@	(set! sf/cross-compiling? true) \
@IF_CROSS@	(set! package/cross-compiling? true) \
@IF_CROSS@	(set! target-bytes-per-object \
@IF_CROSS@	      (lambda () @mit_scheme_target_bytes_per_object@)) \
@IF_LIARC@COMPILER_SETTINGS_LIARC = (set! compiler:invoke-c-compiler? false)

TOOL_COMPILER_HEAP = @HOST_COMPILER_HEAP@   # XXX rename

@IF_CROSS@TOOL_COMPILER_BAND = --band tools/compiler.com
@IF_NATIVE@TOOL_COMPILER_BAND = # default band

@IF_CROSS@TOOL_SYNTAXER_BAND = --band tools/syntaxer.com
@IF_NATIVE@TOOL_SYNTAXER_BAND = --band runtime.com

@IF_CROSS@TOOL_RUNTIME_ONLY_BAND = --band tools/runtime.com
@IF_NATIVE@TOOL_RUNTIME_ONLY_BAND = --band runtime.com

TOOL_COMPILER_LOAD = # nothing, always from the band
@IF_CROSS@TOOL_SYNTAXER_LOAD = # nothing, included in the band
@IF_NATIVE@TOOL_SYNTAXER_LOAD = --eval '(load-option (quote SF))'

TOOL_COMPILER_SETTINGS = \
	$(SF_SETTINGS_CROSS) \
	$(COMPILER_SETTINGS_CROSS) \
	$(COMPILER_SETTINGS_LIARC)

TOOL_SYNTAXER_SETTINGS = \
	$(SF_SETTINGS_CROSS)

TOOL_MIT_SCHEME = '$(MIT_SCHEME_EXE)' --batch-mode $(TOOL_COMPILER_HEAP)
@IF_CROSS@TOOL_OPTIONS = --no-init-file # host adapter loaded in toolchain
@IF_NATIVE@TOOL_OPTIONS = --no-init-file --load runtime/host-adapter.scm

TOOL_COMPILER = $(TOOL_MIT_SCHEME) $(TOOL_COMPILER_BAND) $(TOOL_OPTIONS) \
  $(TOOL_COMPILER_LOAD) --eval '(begin $(TOOL_COMPILER_SETTINGS))'
TOOL_SYNTAXER = $(TOOL_MIT_SCHEME) $(TOOL_SYNTAXER_BAND) $(TOOL_OPTIONS) \
  $(TOOL_SYNTAXER_LOAD) --eval '(begin $(TOOL_SYNTAXER_SETTINGS))'
TOOL_RUNTIME_ONLY = $(TOOL_MIT_SCHEME) $(TOOL_RUNTIME_ONLY_BAND) \
  $(TOOL_OPTIONS)

# The basics and everything that can be cross-compiled -- anything that
# uses $(TOOL_...) -- depends on this target.
.PHONY: toolchain
@IF_SVM_COMPILER@toolchain: compiler/machines/svm/svm1-defns.h
toolchain:
@IF_CROSS@	$(MAKE) -f Makefile.tools

# This rule is for LIARC.
.SUFFIXES: .bld .pkd .c
.pkd.c .bld.c: toolchain
	echo '(cbf "$<")' | $(TOOL_COMPILER)

.PHONY: all
all: all-basics
all: all-plugins
all: lib/all.com
all: lib/runtime.com
all: microcode/scheme

.PHONY: all-basics
@IF_CROSS@all-basics: stamp_cross-finished
@IF_NATIVE@all-basics: all-compiler
@IF_NATIVE@all-basics: all-cref
@IF_NATIVE@all-basics: all-ffi
@IF_NATIVE@all-basics: all-runtime
@IF_NATIVE@all-basics: all-sf
@IF_NATIVE@all-basics: all-sos
@IF_NATIVE@all-basics: all-ssp
@IF_NATIVE@all-basics: all-star-parser
@IF_NATIVE@all-basics: all-xml
@IF_NATIVE@all-basics: all-win32	# XXX ?

.PHONY: all-plugins
all-plugins: # in case none
@IF_BLOWFISH@all-plugins: all-blowfish
@IF_EDWIN@all-plugins: all-edwin
@IF_GDBM@all-plugins: all-gdbm
@IF_IMAIL@all-plugins: all-imail
@IF_MCRYPT@all-plugins: all-mcrypt
@IF_PGSQL@all-plugins: all-pgsql
@IF_X11@all-plugins: all-x11
@IF_X11_SCREEN@all-plugins: all-x11-screen

# Plugins all depend on this target to make sure that they can use the
# newly built system to compile themselves.
#
# XXX We should be able to cross-compile plugins too.
.PHONY: plugins-toolchain
plugins-toolchain: lib/all.com
plugins-toolchain: lib/runtime.com
plugins-toolchain: microcode/scheme
@IF_CROSS@plugins-toolchain: stamp_cross-finished
@IF_NATIVE@plugins-toolchain: all-basics

# XXX This should really depend on microcode/gen-nonce and
# microcode/extract-liarc-decls instead of microcode/scheme, but
# splitting up dependencies within the microcode subdirectory is more
# trouble than it's worth right now.  Later, we should reorganize the
# directory structure to better reflect the build rather than just
# shoving all the C code into microcode/.
.PHONY: liarc-bundle-tools
liarc-bundle-tools: microcode/scheme

################
# Microcode
################

@IF_LIARC@microcode/scheme: all-runtime
@IF_SVM@microcode/scheme: microcode/svm1-defns.h
microcode/scheme:
	+(cd microcode && $(MAKE) all)

.PHONY: compile-microcode
compile-microcode: microcode/scheme
@IF_BLOWFISH@compile-microcode: compile-blowfish-c
@IF_GDBM@compile-microcode: compile-gdbm-c
@IF_MCRYPT@compile-microcode: compile-mcrypt-c
@IF_PGSQL@compile-microcode: compile-pgsql-c
@IF_X11@compile-microcode: compile-x11-c

stamp_install-microcode: compile-microcode
	(cd microcode; $(MAKE) install)
	echo "done" > $@

microcode/svm1-defns.h: compiler/machines/svm/svm1-defns.h
	@$(top_srcdir)/etc/maybe-update-file.sh \
	  compiler/machines/svm/svm1-defns.h \
	  microcode/svm1-defns.h

################
# Bands
################

lib/runtime.com: microcode/scheme
@IF_NATIVE@lib/runtime.com: all-runtime
@IF_CROSS@lib/runtime.com: stamp_cross-finished
	(. etc/functions.sh && get_fasl_file && cd runtime \
	  && (echo '(disk-save "../$@")' \
	       | ../run-build --batch-mode --fasl "$${FASL}"))

lib/all.com: microcode/scheme
lib/all.com: lib/runtime.com
@IF_NATIVE@lib/all.com: all-compiler
@IF_NATIVE@lib/all.com: all-sf
@IF_NATIVE@lib/all.com: all-cref
@IF_CROSS@lib/all.com: stamp_cross-finished
	(echo '(begin' && \
	 echo '  (load-option (quote compiler))' && \
	 echo '  (load-option (quote sf))' && \
	 echo '  (disk-save "$@"))') \
	| ./run-build --batch-mode --band runtime.com

### For the subsystems, we have several rules:
###
###	all-SUBSYS: everything that needs to be done
###	compile-SUBSYS: compile to .coms; needed for this to be loadable
###	syntax-SUBSYS: syntax; needed, in principle, to use macros from this
###	depends-on-SUBSYS: used by native-only targets that load this
###	bundle-SUBSYS: generate LIARC bundle
###
### The use of depends-on-SUBSYS is a crock arising because we have
### subsystems that can't yet be cross-compiled, which is the case
### because we don't have a reasonable system for macros across
### subsystems that works with cross-compilation.
###
### Really it should be enough to do syntax-SUBSYS, but the downstream
### syntaxer scripts might try to load upstream coms, and when
### cross-compiling we want to depend on stamp_cross-finished, so we
### conditionally set depends-on-SUBSYS either to compile-SUBSYS or to
### stamp_cross-finished.

################
# Runtime
################

.PHONY: all-runtime
all-runtime: compile-runtime
@IF_LIARC@all-runtime: bundle-runtime

.PHONY: compile-runtime
compile-runtime: syntax-runtime
compile-runtime: toolchain
	(echo '(with-working-directory-pathname "runtime"' && \
	 echo '  (lambda () (load "runtime.cbf")))') \
	| $(TOOL_COMPILER)

.PHONY: syntax-runtime
syntax-runtime: toolchain
	(echo '(with-working-directory-pathname "runtime"' && \
	 echo '  (lambda () (load "runtime.sf")))') \
	| $(TOOL_COMPILER)

.PHONY: depends-on-runtime
@IF_NATIVE@depends-on-runtime: compile-runtime
@IF_CROSS@depends-on-runtime: stamp_cross-finished

.PHONY: bundle-runtime
bundle-runtime: runtime/runtime-unx.c

################
# SF
################

.PHONY: all-sf
all-sf: compile-sf
@IF_LIARC@all-sf: bundle-sf

.PHONY: compile-sf
compile-sf: syntax-sf
compile-sf: toolchain
	(echo '(with-working-directory-pathname "sf"' && \
	 echo '  (lambda () (load "sf.cbf")))') \
	| $(TOOL_COMPILER)

.PHONY: syntax-sf
syntax-sf: syntax-runtime
syntax-sf: toolchain
	(echo '(with-working-directory-pathname "sf"' && \
	 echo '  (lambda () (load "sf.sf")))') \
	| $(TOOL_COMPILER)

.PHONY: depends-on-sf
@IF_NATIVE@depends-on-sf: compile-sf
@IF_CROSS@depends-on-sf: stamp_cross-finished

.PHONY: bundle-sf
bundle-sf: liarc-bundle-tools
bundle-sf: compile-sf
bundle-sf: sf/sf-unx.c
	+(cd sf && $(MAKE) compile-liarc-bundle)

#################
# Compiler (LIAR)
#################

.PHONY: all-compiler
all-compiler: compile-compiler
@IF_LIARC@all-compiler: bundle-compiler

.PHONY: syntax-compiler
syntax-compiler: syntax-runtime
syntax-compiler: syntax-sf
syntax-compiler: toolchain
@IF_SVM_COMPILER@syntax-compiler: compiler/machines/svm/svm1-defns.h
	(echo '(with-working-directory-pathname "compiler"' && \
	 echo '  (lambda ()' && \
	 echo '    $(SF_SETTINGS_CROSS)' && \
	 echo '    (load "compiler.sf")))') \
	| $(TOOL_SYNTAXER)

.PHONY: depends-on-compiler
@IF_NATIVE@depends-on-compiler: compiler-compiler
@IF_CROSS@depends-on-compiler: stamp_cross-finished

.PHONY: compile-compiler
compile-compiler: compile-compiler-back
compile-compiler: compile-compiler-base
compile-compiler: compile-compiler-fggen
compile-compiler: compile-compiler-fgopt
compile-compiler: compile-compiler-machine
compile-compiler: compile-compiler-rtlbase
compile-compiler: compile-compiler-rtlgen
compile-compiler: compile-compiler-rtlopt

.PHONY: compile-compiler-back
compile-compiler-back: syntax-compiler
compile-compiler-back: toolchain
	echo '(compile-directory "compiler/back")' | $(TOOL_COMPILER)

.PHONY: compile-compiler-base
compile-compiler-base: syntax-compiler
compile-compiler-base: toolchain
	echo '(compile-directory "compiler/base")' | $(TOOL_COMPILER)

.PHONY: compile-compiler-fggen
compile-compiler-fggen: syntax-compiler
compile-compiler-fggen: toolchain
	echo '(compile-directory "compiler/fggen")' | $(TOOL_COMPILER)

.PHONY: compile-compiler-fgopt
compile-compiler-fgopt: syntax-compiler
compile-compiler-fgopt: toolchain
	echo '(compile-directory "compiler/fgopt")' | $(TOOL_COMPILER)

.PHONY: compile-compiler-machine
compile-compiler-machine: syntax-compiler
compile-compiler-machine: toolchain
	echo '(compile-directory "compiler/machine")' | $(TOOL_COMPILER)

.PHONY: compile-compiler-rtlbase
compile-compiler-rtlbase: syntax-compiler
compile-compiler-rtlbase: toolchain
	echo '(compile-directory "compiler/rtlbase")' | $(TOOL_COMPILER)

.PHONY: compile-compiler-rtlgen
compile-compiler-rtlgen: syntax-compiler
compile-compiler-rtlgen: toolchain
	echo '(compile-directory "compiler/rtlgen")' | $(TOOL_COMPILER)

.PHONY: compile-compiler-rtlopt
compile-compiler-rtlopt: syntax-compiler
compile-compiler-rtlopt: toolchain
	echo '(compile-directory "compiler/rtlopt")' | $(TOOL_COMPILER)

.PHONY: bundle-compiler
bundle-compiler: liarc-bundle-tools
bundle-compiler: compile-compiler
bundle-compiler: compiler/compiler-unx.c
	+(cd compiler && $(MAKE) compile-liarc-bundle)

compiler/machines/svm/svm1-defns.h: \
	  compiler/machines/svm/assembler-rules.scm \
	  compiler/machines/svm/machine.scm \
	  compiler/machines/svm/assembler-compiler.scm \
	  compiler/machines/svm/assembler-runtime.scm \
	  compiler/machines/svm/compile-assembler.scm
	(echo '(with-working-directory-pathname "compiler/machines/svm"' && \
	 echo '  (lambda () (load "compile-assembler")))') \
	| '$(MIT_SCHEME_EXE)' --band runtime.com --batch-mode --no-init-file

################
# CREF
################

.PHONY: all-cref
all-cref: compile-cref
@IF_LIARC@all-cref: bundle-cref

.PHONY: compile-cref
compile-cref: syntax-cref
compile-cref: toolchain
	(echo '(with-working-directory-pathname "cref"' && \
	 echo '  (lambda () (load "cref.cbf")))') \
	| $(TOOL_COMPILER)

.PHONY: syntax-cref
syntax-cref: syntax-runtime
syntax-cref: toolchain
	(echo '(with-working-directory-pathname "cref"' && \
	 echo '  (lambda () (load "cref.sf")))') \
	| $(TOOL_COMPILER)

.PHONY: depends-on-cref
@IF_NATIVE@depends-on-cref: compile-cref
@IF_CROSS@depends-on-cref: stamp_cross-finished

.PHONY: bundle-cref
bundle-cref: liarc-bundle-tools
bundle-cref: compile-cref
bundle-cref: cref/cref-unx.c
	+(cd cref && $(MAKE) compile-liarc-bundle)

################
# *PARSER
################

.PHONY: all-star-parser
all-star-parser: compile-star-parser
@IF_LIARC@all-star-parser: bundle-star-parser

.PHONY: compile-star-parser
compile-star-parser: syntax-runtime
compile-star-parser: toolchain
	(echo '(with-working-directory-pathname "star-parser"' && \
	 echo '  (lambda () (load "compile")))') \
	| $(TOOL_COMPILER)

# No separate syntax step; compile step generates .pkd file.
.PHONY: syntax-star-parser
syntax-star-parser: compile-star-parser

.PHONY: depends-on-star-parser
@IF_NATIVE@depends-on-star-parser: compile-star-parser
@IF_CROSS@depends-on-star-parser: stamp_cross-finished

.PHONY: bundle-star-parser
bundle-star-parser: liarc-bundle-tools
bundle-star-parser: compile-star-parser
bundle-star-parser: star-parser/parser-unx.c
	+(cd star-parser && $(MAKE) compile-liarc-bundle)

### More stuff we build with tools.  We could build it with the newly
### built compiler in the native case, but we want to avoid having to
### do that to encourage cross-compilation.

################
# FFI
################

.PHONY: all-ffi
all-ffi: compile-ffi
@IF_LIARC@all-ffi: bundle-ffi

.PHONY: compile-ffi
compile-ffi: syntax-runtime
compile-ffi: toolchain
	(echo '(with-working-directory-pathname "ffi"' && \
	 echo '  (lambda () (load "compile.scm")))') \
	| $(TOOL_COMPILER)

.PHONY: depends-on-ffi
@IF_NATIVE@depends-on-ffi: compile-ffi
@IF_CROSS@depends-on-ffi: stamp_cross-finished

.PHONY: bundle-ffi
bundle-ffi: liarc-bundle-tools
bundle-ffi: compile-ffi
bundle-ffi: ffi/ffi-unx.c
	+(cd ffi && $(MAKE) compile-liarc-bundle)

################
# SOS
################

.PHONY: all-sos
all-sos: compile-sos
@IF_LIARC@all-sos: bundle-sos

.PHONY: compile-sos
compile-sos: syntax-runtime
compile-sos: toolchain
	(echo '(with-working-directory-pathname "sos"' && \
	 echo '  (lambda () (load "compile")))') \
	| $(TOOL_COMPILER)

# No separate syntax step; compile step generates .pkd file.
.PHONY: syntax-sos
syntax-sos: compile-sos

.PHONY: depends-on-sos
@IF_NATIVE@depends-on-sos: compile-sos
@IF_CROSS@depends-on-sos: stamp_cross-finished

.PHONY: bundle-sos
bundle-sos: liarc-bundle-tools
bundle-sos: compile-sos
bundle-sos: sos/sos-unx.c
	+(cd sos && $(MAKE) compile-liarc-bundle)

################
# SSP
################

.PHONY: all-ssp
all-ssp: compile-ssp
@IF_LIARC@all-ssp: bundle-ssp

.PHONY: compile-ssp
compile-ssp: syntax-runtime
compile-ssp: syntax-xml
compile-ssp: toolchain
	(echo '(with-working-directory-pathname "ssp"' && \
	 echo '  (lambda () (load "compile")))') \
	| $(TOOL_COMPILER)

.PHONY: depends-on-ssp
@IF_NATIVE@depends-on-ssp: compile-ssp
@IF_CROSS@depends-on-ssp: stamp_cross-finished

.PHONY: bundle-ssp
bundle-ssp: liarc-bundle-tools
bundle-ssp: compile-ssp
bundle-ssp: ssp/ssp-unx.c
	+(cd ssp && $(MAKE) compile-liarc-bundle)

################
# Windows FFI
################

.PHONY: all-win32
all-win32: compile-win32

.PHONY: compile-win32
compile-win32: syntax-win32
compile-win32: toolchain
	(echo '(with-working-directory-pathname "win32"' && \
	 echo '  (lambda () (load "win32.cbf")))') \
	| $(TOOL_COMPILER)

.PHONY: syntax-win32
syntax-win32: syntax-runtime
syntax-win32: toolchain
	(echo '(with-working-directory-pathname "win32"' && \
	 echo '  (lambda () (load "win32.sf")))') \
	| $(TOOL_COMPILER)

.PHONY: depends-on-win32
@IF_NATIVE@depends-on-win32: compile-win32
@IF_CROSS@depends-on-win32: stamp_cross-finished

################
# XML
################

.PHONY: all-xml
all-xml: compile-xml
@IF_LIARC@all-xml: bundle-xml

.PHONY: compile-xml
compile-xml: syntax-runtime
compile-xml: syntax-sos
compile-xml: syntax-star-parser
compile-xml: toolchain
	(echo '(with-working-directory-pathname "xml"' && \
	 echo '  (lambda () (load "compile")))') \
	| $(TOOL_COMPILER)

# No separate syntax step; compile step generates .pkd file.
.PHONY: syntax-xml
syntax-xml: compile-xml

.PHONY: depends-on-xml
@IF_NATIVE@depends-on-xml: compile-xml
@IF_CROSS@depends-on-xml: stamp_cross-finished

.PHONY: bundle-xml
bundle-xml: liarc-bundle-tools
bundle-xml: compile-xml
bundle-xml: xml/xml-unx.c
	+(cd xml && $(MAKE) compile-liarc-bundle)

### Targets built on the target by the native compiler because we don't
### have a way to load macro definitions of an object-program into a
### cross-compiler.  We should have a way to do that, and eliminate
### these, and the depends-on-* cross/native conditional targets.

################
# blowfish
################

.PHONY: all-blowfish
all-blowfish: compile-blowfish

.PHONY: compile-blowfish
compile-blowfish: plugins-toolchain
	+(cd blowfish && $(MAKE))

.PHONY: depends-on-blowfish
depends-on-blowfish: compile-blowfish

.PHONY: compile-blowfish-c
compile-blowfish-c:
	+(cd blowfish && $(MAKE))

################
# edwin
################

.PHONY: all-edwin
all-edwin: compile-edwin

.PHONY: compile-edwin
compile-edwin: plugins-toolchain
compile-edwin: depends-on-xml
@IF_BLOWFISH@compile-edwin: depends-on-blowfish
@IF_GDBM@compile-edwin: depends-on-gdbm
@IF_X11@compile-edwin: depends-on-x11
	+(cd edwin && $(MAKE))

.PHONY: depends-on-edwin
depends-on-edwin: compile-edwin

################
# gdbm
################

.PHONY: all-gdbm
all-gdbm: compile-gdbm

.PHONY: compile-gdbm
compile-gdbm: plugins-toolchain
	+(cd gdbm && $(MAKE))

.PHONY: depends-on-gdbm
depends-on-gdbm: compile-gdbm

.PHONY: compile-gdbm-c
compile-gdbm-c:
	+(cd gdbm && $(MAKE))

################
# imail
################

.PHONY: all-imail
all-imail: compile-imail

.PHONY: compile-imail
compile-imail: plugins-toolchain
compile-imail: depends-on-edwin
compile-imail: depends-on-sos
	+(cd imail && $(MAKE))

.PHONY: depends-on-imail
depends-on-imail: compile-imail

################
# mcrypt
################

.PHONY: all-mcrypt
all-mcrypt: compile-mcrypt

.PHONY: compile-mcrypt
compile-mcrypt: plugins-toolchain
	+(cd mcrypt && $(MAKE))

.PHONY: depends-on-mcrypt
depends-on-mcrypt: compile-mcrypt

.PHONY: compile-mcrypt-c
compile-mcrypt-c:
	+(cd mcrypt && $(MAKE))

################
# pgsql
################

.PHONY: all-pgsql
all-pgsql: compile-pgsql

.PHONY: compile-pgsql
compile-pgsql: plugins-toolchain
	+(cd pgsql && $(MAKE))

.PHONY: depends-on-pgsql
depends-on-pgsql: compile-pgsql

.PHONY: compile-pgsql-c
compile-pgsql-c:
	+(cd pgsql && $(MAKE))

################
# X11
################

.PHONY: all-x11
all-x11: compile-x11

.PHONY: compile-x11
compile-x11: plugins-toolchain
	+(cd x11 && $(MAKE))

.PHONY: depends-on-x11
depends-on-x11: compile-x11

.PHONY: compile-x11-c
compile-x11-c:
	+(cd x11 && $(MAKE))

################
# X11-screen
################

.PHONY: all-x11-screen
all-x11-screen: compile-x11-screen

.PHONY: compile-x11-screen
compile-x11-screen: plugins-toolchain
compile-x11-screen: depends-on-edwin
compile-x11-screen: depends-on-x11
	+(cd x11-screen && $(MAKE))

.PHONY: depends-on-x11-screen
depends-on-x11-screen: compile-x11-screen

#####################
### Cross compilation
#####################

# Run `make cross-host' on the cross-compiling host to prepare a tree;
# then transmit it over to the target system and run `make all' to
# finish the job.

.PHONY: cross-host
cross-host: compile-compiler
cross-host: compile-cref
cross-host: compile-ffi
cross-host: compile-runtime
cross-host: compile-sf
cross-host: compile-sos
cross-host: compile-ssp
cross-host: compile-star-parser
cross-host: compile-win32
cross-host: compile-xml
cross-host: toolchain
	@(echo '(begin' && \
	  echo '  (load "etc/crossbin")' && \
	  echo '  (convert fasl-format:@mit_scheme_native_code@' && \
	  echo '    "compiler" "compiler/base" "compiler/back"' && \
	  echo '    "compiler/fgopt" "compiler/fggen" "compiler/fgopt"' && \
	  echo '    "compiler/machine" "compiler/rtlbase"' && \
	  echo '    "compiler/rtlgen" "compiler/rtlopt"' && \
	  echo '    "cref" "ffi" "runtime" "sf" "sos" "ssp"' && \
	  echo '    "ssp" "star-parser" "win32" "xml"))') \
	| $(TOOL_COMPILER)
	echo "done" > stamp_$@

stamp_cross-finished: stamp_cross-host microcode/scheme
	(echo '(let ((env (->environment (quote (runtime)))))' && \
	 echo '  (load "../compiler/base/crsend" env)' && \
	 echo '  ((access finish-cross-compilation:files env) "."))') \
	| (cd runtime && ../run-build --batch-mode --fasl make.bin)
	(echo '(let ((env (->environment (quote (runtime)))))' && \
	 echo '  (load "../compiler/base/crsend" env)' && \
	 echo '  ((access finish-cross-compilation:files env) ".."))') \
	| (cd runtime && ../run-build --batch-mode --fasl make.com)
	(echo '(let ((env (->environment (quote (runtime)))))' && \
	 echo '  (load "../compiler/base/crsend" env)' && \
	 echo '  ((access finish-cross-compilation:info-files env) ".."))') \
	 | (cd runtime && ../run-build --batch-mode --fasl make.com)
	echo "done" > $@

################
# Miscellany
################

.PHONY: check
check:
	./run-build --batch-mode --load ../tests/check.scm --eval '(%exit)'

.PHONY: macosx-app
macosx-app:
	etc/macosx/make-app.sh

.PHONY: mostlyclean clean distclean maintainer-clean c-clean
mostlyclean clean distclean maintainer-clean c-clean:
	$(top_srcdir)/Clean.sh $@ $(SUBDIRS) $(OPTION_SUBDIRS)

.PHONY: clean-boot-root
clean-boot-root:
	rm -rf boot-root
	rm -f stamp_*

.PHONY: tags TAGS
tags TAGS:
	$(top_srcdir)/Tags.sh $(SUBDIRS)

.PHONY: subdir-list
subdir-list:
	@for D in $(SUBDIRS); do echo $$D; done

.PHONY: install
install: install-standard @INSTALL_LIARC_BUNDLES@

.PHONY: install-standard
install-standard: install-auxdir-top
	@+$(MAKE_IN_SUBDIRS) install $(INSTALLED_SUBDIRS)

.PHONY: install-basics
install-basics: install-auxdir-top
	@+$(MAKE_IN_SUBDIRS) install $(BASICS_SUBDIRS)

.PHONY: install-auxdir-top
install-auxdir-top:
	$(mkinstalldirs) $(DESTDIR)$(AUXDIR)
	$(INSTALL_DATA) $(top_srcdir)/etc/optiondb.scm $(DESTDIR)$(AUXDIR)/.
	$(INSTALL_DATA) $(top_srcdir)/etc/plugins.scm $(DESTDIR)$(AUXDIR)/.
	$(INSTALL_DATA) lib/*.com $(DESTDIR)$(AUXDIR)/.

################
# Legacy
################

.PHONY: all-liarc
all-liarc:
	@$(top_srcdir)/etc/c-compile.sh "$(MIT_SCHEME_EXE)" --batch-mode --no-init-file
	$(MAKE) compile-liarc-bundles build-bands

.PHONY: build-bands
build-bands:
	@$(top_srcdir)/etc/build-bands.sh

# **** Make liarc distribution from native ****

.PHONY: liarc-dist
liarc-dist:
	@$(top_srcdir)/etc/compile-boot-compiler.sh "$(MIT_SCHEME_EXE)"
	@$(top_srcdir)/etc/c-prepare.sh "$(MIT_SCHEME_EXE)"
	$(MAKE) distclean

# **** Build liarc from distribution ****

stamp_compile-liarc-boot-bundles: stamp_install-microcode
	@+$(MAKE_IN_SUBDIRS) compile-liarc-bundle $(LIARC_BOOT_BUNDLES)
	echo "done" > $@

stamp_install-liarc-boot-bundles: stamp_compile-liarc-boot-bundles
	@+$(MAKE_IN_SUBDIRS) install-liarc-bundle $(LIARC_BOOT_BUNDLES)
	echo "done" > $@

stamp_build-liarc-boot-compiler: stamp_install-liarc-boot-bundles
	@$(top_srcdir)/etc/build-boot-compiler.sh
	echo "done" > $@

stamp_install-liarc-boot-compiler: stamp_build-liarc-boot-compiler
	$(MAKE) install-auxdir-top
	echo "done" > $@

stamp_liarc-compile-scheme:
	@$(top_srcdir)/etc/c-compile.sh boot-root/bin/mit-scheme-c \
	    --library boot-root/lib/mit-scheme-c --band boot-compiler.com
	echo "done" > $@

stamp_compile-liarc-bundles: stamp_liarc-compile-scheme compile-liarc-bundles
	echo "done" > $@

.PHONY: compile-liarc-bundles
compile-liarc-bundles: compile-microcode
	@+$(MAKE_IN_SUBDIRS) compile-liarc-bundle $(LIARC_BUNDLES)

.PHONY: install-liarc-bundles
install-liarc-bundles:
	@+$(MAKE_IN_SUBDIRS) install-liarc-bundle $(LIARC_BUNDLES)

# **** Build native from liarc ****

stamp_build-native-boot-compiler: stamp_install-microcode
	@$(top_srcdir)/etc/build-boot-compiler.sh
	echo "done" > $@

stamp_install-native-boot-compiler: stamp_build-native-boot-compiler
	$(MAKE) install-auxdir-top
	echo "done" > $@

stamp_native-compile-scheme: compile-microcode
	@$(top_srcdir)/etc/compile.sh boot-root/bin/mit-scheme \
	    --library boot-root/lib/$(AUXDIR_NAME) --band boot-compiler.com
	echo "done" > $@

##########################
### Save/restore utilities
##########################

.PHONY: save
save:
	@echo 'Saving objects...'
	@rm -rf saved-objects && \
	mkdir saved-objects && \
	( \
	  find $(SUBDIRS) -type f \
	    \( \
	      -name '*.bci' -o \
	      -name '*.bin' -o \
	      -name '*.c' -o \
	      -name '*.com' -o \
	      -name '*.crf' -o \
	      -name '*.ext' -o \
	      -name '*.fre' -o \
	      -name '*.moc' -o \
	      -name '*.o' -o \
	      -name '*.pkd' -o \
	      -name '*.so' -o \
	      -false \
	    \) \
	    -print0 \
	  | pax -rw -pe -l -v -d -0 saved-objects/. \
	) || { rm -rf saved-objects; exit 1; }

.PHONY: restore
restore:
	@echo 'Restoring objects...'
	@if ! test -d saved-objects; then exit 1; fi && \
	(cd saved-objects && pax -rw -pe -v . ../../.)
