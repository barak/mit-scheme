#| -*- Mode: Scheme; keyword-style: none -*-

Copyright (C) 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994,
    1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005,
    2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016,
    2017, 2018, 2019, 2020 Massachusetts Institute of Technology

This file is part of MIT/GNU Scheme.

MIT/GNU Scheme is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or (at
your option) any later version.

MIT/GNU Scheme is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with MIT/GNU Scheme; if not, write to the Free Software
Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301,
USA.

|#

;;;; Runtime System Packaging

(define-package ()
  (files "make"))

(define-package (package)
  ;; The information appearing here must be exactly duplicated in the
  ;; cold load sequence in "make.scm".
  (files "packag")
  (parent ())
  ;; All these exports must match those in "make.scm".
  (export ()
	  *allow-package-redefinition?*
	  all-packages
	  construct-packages-from-file
	  environment->package
	  find-package
	  load-package-set
	  load-packages-from-file
	  name->package
	  package-name=?
	  package-name?
	  package-set-pathname
	  package/add-child!
	  package/children
	  package/cross-compiling?
	  package/environment
	  package/name
	  package/parent
	  package/reference
	  package?)
  (export (runtime library standard)
	  link-description/outer-name
	  link-description/package
	  link-description/status
	  package-description/exports
	  package-description/name
	  package-file/descriptions)
  (export (runtime environment)
	  package-name-tag))

(define-package (runtime)
  (files "boot-seq")
  (parent ()))

(define-package (runtime version)
  (files "version")
  (parent (runtime))
  (export ()
	  write-mit-scheme-copyright
	  write-mit-scheme-license))

(define-package (runtime bit-string)
  (files "bitstr")
  (parent (runtime))
  (export ()
	  bit-string->signed-integer
	  bit-string->unsigned-integer
	  bit-string-allocate
	  bit-string-and
	  bit-string-and!
	  bit-string-andc
	  bit-string-andc!
	  bit-string-append
	  bit-string-append-reversed
	  bit-string-clear!
	  bit-string-copy
	  bit-string-fill!
	  bit-string-length
	  bit-string-move!
	  bit-string-movec!
	  bit-string-not
	  bit-string-or
	  bit-string-or!
	  bit-string-ref
	  bit-string-set!
	  bit-string-xor
	  bit-string-xor!
	  bit-string-zero?
	  bit-string=?
	  bit-string?
	  bit-substring
	  bit-substring-extend
	  bit-substring-find-next-set-bit
	  bit-substring-move-right!
	  make-bit-string
	  read-bits!
	  signed-integer->bit-string
	  unsigned-integer->bit-string
	  write-bits!))

(define-package (runtime blowfish)
  (files "blowfish")
  (parent (runtime))
  (export deprecated ()
	  blowfish-available?
	  blowfish-cbc
	  blowfish-cfb64
	  blowfish-ecb
	  blowfish-encrypt-port
	  blowfish-file?
	  blowfish-ofb64
	  blowfish-set-key
	  compute-blowfish-init-vector
	  read-blowfish-file-header
	  write-blowfish-file-header))

(define-package (runtime boolean)
  (files "boole")
  (parent (runtime))
  (export ()
	  (false? not)
	  boolean/and
	  boolean/or
	  boolean<?
	  boolean=?			;(scheme base)
	  boolean?			;(scheme base)
	  false
	  not
	  true))

(define-package (runtime boot-definitions)
  (files "boot")
  (parent (runtime))
  (export deprecated ()
	  (define-unparser-method define-print-method)
	  (simple-unparser-method standard-print-method)
	  (standard-unparser-method bracketed-print-method)
	  (with-values call-with-values)
	  without-interrupts)
  (export ()
	  %make-record
	  %make-tagged-object
	  %record
	  %record-length
	  %record-ref
	  %record-set!
	  %record?
	  %tagged-object-datum
	  %tagged-object-tag
	  %tagged-object?
	  bracketed-print-method
	  bytes-per-object
	  call-with-values		;(scheme base)
	  cell-contents
	  cell?
	  default-object
	  default-object?
	  define-pp-describer
	  define-print-method
	  error:not-a
	  error:not-a-list-of
	  force				;(scheme lazy)
	  gc-reclaimed-object
	  gc-reclaimed-object?
	  gc-space-status
	  guarantee
	  guarantee-list-of
	  interrupt-bit/after-gc
	  interrupt-bit/gc
	  interrupt-bit/global-1
	  interrupt-bit/global-3
	  interrupt-bit/global-gc
	  interrupt-bit/kbd
	  interrupt-bit/stack
	  interrupt-bit/suspend
	  interrupt-bit/timer
	  interrupt-mask/all
	  interrupt-mask/gc-ok
	  interrupt-mask/none
	  interrupt-mask/timer-ok
	  make-cell
	  make-promise			;(scheme lazy)
	  make-unforced-promise
	  object-constant?
	  object-pure?
	  predicate->dispatch-tag
	  predicate?
	  promise-forced?
	  promise-value
	  promise?			;(scheme lazy)
	  register-predicate!
	  set-cell-contents!
	  set-dispatch-tag<=!
	  set-predicate<=!
	  simple-parser-method
	  standard-print-method
	  target-bytes-per-object
	  values			;(scheme base)
	  with-absolutely-no-interrupts
	  with-limited-interrupts)
  (export (runtime predicate)
	  set-predicate-tag!)
  (export (runtime printer)
	  standard-print-method-name
	  standard-print-method-parts
	  standard-print-method?)
  (export (runtime rep)
	  multi-values-list
	  multi-values?)
  (export (runtime tagged-dispatch)
	  set-predicate-tag!))

(define-package (runtime generator)
  (files "generator")
  (parent (runtime))
  (export ()
	  bytevector->generator		;(srfi 158)
	  circular-generator		;(srfi 158)
	  gappend			;(srfi 158)
	  gcons*			;(srfi 158)
	  gdelete			;(srfi 158)
	  gdrop				;(srfi 158)
	  gdrop-while			;(srfi 158)
	  generator			;(srfi 158)
	  generator->list		;(srfi 158)
	  generator->reverse-list	;(srfi 158)
	  generator->string		;(srfi 158)
	  generator->vector		;(srfi 158)
	  generator-any			;(srfi 158)
	  generator-count		;(srfi 158)
	  generator-every		;(srfi 158)
	  generator-find		;(srfi 158)
	  generator-fold		;(srfi 158)
	  generator-fold-map
	  generator-fold-right		;(srfi 158)
	  generator-fold-right-map
	  generator-for-each		;(srfi 158)
	  generator-map->list		;(srfi 158)
	  generator-unfold		;(srfi 158)
	  gfilter			;(srfi 158)
	  gflatten			;(srfi 158)
	  gmap				;(srfi 158)
	  gremove			;(srfi 158)
	  gtake				;(srfi 158)
	  gtake-while			;(srfi 158)
	  list->generator		;(srfi 158)
	  make-iota-generator		;(srfi 158)
	  make-range-generator		;(srfi 158)
	  reverse-vector->generator	;(srfi 158)
	  string->generator		;(srfi 158)
	  vector->generator		;(srfi 158)
	  ))

(define-package (runtime weak-pair)
  (files "weak-pair")
  (parent (runtime))
  (export ()
	  clean-weak-alist!
	  clean-weak-list!
	  generator->weak-list
	  list->weak-list
	  make-weak-list
	  null-weak-list?
	  weak-alist-copy
	  weak-alist-filter
	  weak-alist-filter!
	  weak-alist-find
	  weak-alist-fold
	  weak-alist-fold-right
	  weak-alist-for-each
	  weak-alist-remove
	  weak-alist-remove!
	  weak-alist-table
	  weak-alist-table->alist
	  weak-alist-table-clean!
	  weak-alist-table-clear!
	  weak-alist-table-contains?
	  weak-alist-table-delete!
	  weak-alist-table-empty?
	  weak-alist-table-fold
	  weak-alist-table-fold-right
	  weak-alist-table-intern!
	  weak-alist-table-key=
	  weak-alist-table-keys
	  weak-alist-table-map!
	  weak-alist-table-prune!
	  weak-alist-table-ref
	  weak-alist-table-search
	  weak-alist-table-set!
	  weak-alist-table-size
	  weak-alist-table-update!
	  weak-alist-table-values
	  weak-alist-table?
	  weak-alist?
	  weak-any
	  weak-append-reverse!
	  weak-assoc
	  weak-assq
	  weak-assv
	  weak-car
	  weak-cdr
	  weak-cons
	  weak-del-assoc
	  weak-del-assoc!
	  weak-del-assq
	  weak-del-assq!
	  weak-del-assv
	  weak-del-assv!
	  weak-delete!
	  weak-delq!
	  weak-delv!
	  weak-drop-while
	  weak-every
	  weak-filter
	  weak-filter!
	  weak-find
	  weak-find-tail
	  weak-fold
	  weak-fold-map
	  weak-fold-right
	  weak-fold-right-map
	  weak-for-each
	  weak-last-pair
	  weak-length
	  weak-length+
	  weak-list
	  weak-list->generator
	  weak-list->list
	  weak-list-copy
	  weak-list-empty?
	  weak-list-of-type?
	  weak-list-reclaimed?
	  weak-list-set
	  weak-list-set->generator
	  weak-list-set->list
	  weak-list-set-add!
	  weak-list-set-add-new!
	  weak-list-set-any
	  weak-list-set-clean!
	  weak-list-set-clear!
	  weak-list-set-contains?
	  weak-list-set-delete!
	  weak-list-set-empty?
	  weak-list-set-every
	  weak-list-set-find
	  weak-list-set-fold
	  weak-list-set-fold-right
	  weak-list-set-for-each
	  weak-list-set-predicate
	  weak-list-set-size
	  weak-list-set?
	  weak-list?
	  weak-member
	  weak-memq
	  weak-memv
	  weak-pair/car?
	  weak-pair?
	  weak-remove
	  weak-remove!
	  weak-reverse!
	  weak-set-car!
	  weak-set-cdr!
	  weak-take-while
	  weak-take-while!)
  (export (runtime gc-finalizer)
	  %weak-alist-table-add-pair!)
  (export (runtime gc-notification)
	  %weak-alist-table-get-pair))

(define-package (runtime equality)
  (files "equals")
  (parent (runtime))
  (export ()
	  eq?				;(scheme base)
	  equal-hash
	  equal?			;(scheme base)
	  eqv?				;(scheme base)
	  ))

(define-package (runtime primitive-arithmetic)
  (files "primitive-arithmetic")
  (parent (runtime))
  (export deprecated ()
	  (largest-fixnum fix:largest-value)
	  (smallest-fixnum fix:smallest-value))
  (export ()
	  (exact-integer? int:integer?)	;(scheme base)
	  (fix:* fx*)
	  (fix:+ fx+)
	  (fix:- fx-)
	  (fix:-1+ fxdecr)
	  (fix:1+ fxincr)
	  (fix:< fx<?)
	  (fix:<= fx<=?)
	  (fix:= fx=?)
	  (fix:> fx>?)
	  (fix:>= fx>=?)
	  (fix:and fxand)
	  (fix:fixnum? fixnum?)
	  (fix:lsh fxarithmetic-shift)
	  (fix:max fxmax)
	  (fix:min fxmin)
	  (fix:negative? fxnegative?)
	  (fix:not fxnot)
	  (fix:or fxior)
	  (fix:positive? fxpositive?)
	  (fix:quotient fxquotient)
	  (fix:remainder fxremainder)
	  (fix:xor fxxor)
	  (fix:zero? fxzero?)
	  (flo:ldexp flo:denormalize)
	  (flo:scalbn flo:denormalize)
	  (fxarithmetic-shift-left fxarithmetic-shift) ;(srfi 143)
	  (index-fixnum? non-negative-fixnum?)
	  ->flonum
	  exact-integer-sqrt		;(scheme base)
	  fix:andc
	  fix:divide
	  fix:end-index
	  fix:gcd
	  fix:iota
	  fix:largest-value
	  fix:smallest-value
	  fix:start-index
	  fixnum?			;(srfi 143)
	  fx*				;(srfi 143)
	  fx*/carry			;(srfi 143)
	  fx+				;(srfi 143)
	  fx+/carry			;(srfi 143)
	  fx-				;(srfi 143)
	  fx-/carry			;(srfi 143)
	  fx-greatest			;(srfi 143)
	  fx-least			;(srfi 143)
	  fx-width			;(srfi 143)
	  fx<=?				;(srfi 143)
	  fx<?				;(srfi 143)
	  fx=?				;(srfi 143)
	  fx>=?				;(srfi 143)
	  fx>?				;(srfi 143)
	  fxabs				;(srfi 143)
	  fxand				;(srfi 143)
	  fxarithmetic-shift		;(srfi 143)
	  fxarithmetic-shift-right	;(srfi 143)
	  fxbit-count			;(srfi 143)
	  fxbit-field			;(srfi 143)
	  fxbit-field-reverse		;(srfi 143)
	  fxbit-field-rotate		;(srfi 143)
	  fxbit-set?			;(srfi 143)
	  fxcopy-bit			;(srfi 143)
	  fxdecr
	  fxeven?			;(srfi 143)
	  fxfirst-set-bit		;(srfi 143)
	  fxif				;(srfi 143)
	  fxincr
	  fxior				;(srfi 143)
	  fxlength			;(srfi 143)
	  fxmax				;(srfi 143)
	  fxmin				;(srfi 143)
	  fxneg				;(srfi 143)
	  fxnegative?			;(srfi 143)
	  fxnot				;(srfi 143)
	  fxodd?			;(srfi 143)
	  fxpositive?			;(srfi 143)
	  fxquotient			;(srfi 143)
	  fxremainder			;(srfi 143)
	  fxsqrt			;(srfi 143)
	  fxsquare			;(srfi 143)
	  fxxor				;(srfi 143)
	  fxzero?			;(srfi 143)
	  flo:*
	  flo:*+
	  flo:+
	  flo:-
	  flo:/
	  flo:<
	  flo:<=
	  flo:<>
	  flo:=
	  flo:>
	  flo:>=
	  flo:abs
	  flo:acos
	  flo:acosh
	  flo:asin
	  flo:asinh
	  flo:atan
	  flo:atan2
	  flo:atanh
	  flo:cbrt
	  flo:ceiling
	  flo:ceiling->exact
	  flo:classify
	  flo:copysign
	  flo:cos
	  flo:cosh
	  flo:eqv?
	  flo:erf
	  flo:erfc
	  flo:exp
	  flo:exp2
	  flo:expt
	  flo:fast-fma?
	  flo:finite?
	  flo:flonum?
	  flo:floor
	  flo:floor->exact
	  flo:fma
	  flo:gamma
	  flo:hypot
	  flo:infinite?
	  flo:j0
	  flo:j1
	  flo:jn
	  flo:lgamma
	  flo:log
	  flo:log2
	  flo:logb
	  flo:make-nan
	  flo:max
	  flo:max-mag
	  flo:max-mag-num
	  flo:max-num
	  flo:min
	  flo:min-mag
	  flo:min-mag-num
	  flo:min-num
	  flo:modulo
	  flo:nan-payload
	  flo:nan-quiet?
	  flo:nan?
	  flo:negate
	  flo:negative?
	  flo:nextafter
	  flo:normal?
	  flo:positive?
	  flo:primitive-expm1
	  flo:primitive-log1p
	  flo:qnan
	  flo:qnan?
	  flo:round
	  flo:round->exact
	  flo:safe-zero?
	  flo:safe<
	  flo:safe<=
	  flo:safe<>
	  flo:safe=
	  flo:safe>
	  flo:safe>=
	  flo:sign-negative?
	  flo:signed-lgamma
	  flo:sin
	  flo:sinh
	  flo:snan
	  flo:snan?
	  flo:sqrt
	  flo:subnormal?
	  flo:tan
	  flo:tanh
	  flo:total-mag<
	  flo:total-order
	  flo:total-order-mag
	  flo:total<
	  flo:truncate
	  flo:truncate->exact
	  flo:ulp
	  flo:unordered?
	  flo:vector-cons
	  flo:vector-length
	  flo:vector-ref
	  flo:vector-set!
	  flo:y0
	  flo:y1
	  flo:yn
	  flo:zero?
	  guarantee-limited-index-fixnum
	  int:*
	  int:+
	  int:-
	  int:-1+
	  int:->flonum
	  int:1+
	  int:<
	  int:<=
	  int:=
	  int:>
	  int:>=
	  int:abs
	  int:divide
	  int:integer?
	  int:modulo
	  int:negate
	  int:negative?
	  int:positive?
	  int:quotient
	  int:remainder
	  int:zero?
	  modexp
	  negative-fixnum?
	  non-negative-fixnum?
	  non-positive-fixnum?
	  positive-fixnum?))

(define-package (runtime floating-point-environment)
  (files "floenv")
  (parent (runtime))
  (export ()
	  flo:+inf.0
	  flo:-inf.0
	  flo:clear-exceptions!
	  flo:default-environment
	  flo:default-rounding-mode
	  flo:default-trapped-exceptions
	  flo:defer-exception-traps!
	  flo:deferring-exception-traps
	  flo:environment
	  flo:exception:divide-by-zero
	  flo:exception:inexact-result
	  flo:exception:invalid-operation
	  flo:exception:overflow
	  flo:exception:subnormal-operand
	  flo:exception:underflow
	  flo:exceptions->names
	  flo:have-environment?
	  flo:have-trap-enable/disable?
	  flo:ignoring-exception-traps
	  flo:names->exceptions
	  flo:nan.0
	  flo:preserving-environment
	  flo:raise-exceptions!
	  flo:restore-exception-flags!
	  flo:rounding-mode
	  flo:rounding-modes
	  flo:save-exception-flags
	  flo:set-environment!
	  flo:set-rounding-mode!
	  flo:set-trapped-exceptions!
	  flo:supported-exceptions
	  flo:test-exception-flags
	  flo:test-exceptions
	  flo:trap-exceptions!
	  flo:trappable-exceptions
	  flo:trapped-exceptions
	  flo:untrap-exceptions!
	  flo:update-environment!
	  flo:with-default-environment
	  flo:with-exceptions-trapped
	  flo:with-exceptions-untrapped
	  flo:with-rounding-mode
	  flo:with-trapped-exceptions)
  (export (runtime thread)
	  discard-float-environment
	  save-float-environment
	  restore-float-environment))

(define-package (runtime integer-bits)
  (files "integer-bits")
  (parent (runtime))
  (export ()
	  all-bits-set?
	  any-bits-set?
	  arithmetic-shift
	  bit
	  bit-antimask
	  bit-clear?
	  bit-count
	  bit-mask
	  bit-set?
	  bits
	  bitwise-merge
	  bitwise-not
	  clear-bit
	  clz
	  ctz
	  edit-bit-field
	  extract-bit
	  extract-bit-field
	  ffs
	  first-set-bit
	  fls
	  hamming-distance
	  integer-length
	  replace-bit-field
	  set-bit
	  shift-left
	  shift-right
	  shiftin
	  shiftout
	  splice-bit-field
	  test-bit-field
	  test-bit-field?
	  toggle-bit

	  ;; Truth table order
	  bitwise-and
	  bitwise-andc1
	  bitwise-andc2
	  bitwise-xor
	  bitwise-ior
	  bitwise-nor
	  bitwise-eqv
	  bitwise-orc2
	  bitwise-orc1
	  bitwise-nand))

(define-package (runtime integer-division)
  (files "division")
  (parent (runtime))
  (export ()
          ceiling-quotient
          ceiling-remainder
          ceiling/
          euclidean-quotient
          euclidean-remainder
          euclidean/
          floor-quotient		;(scheme base)
          floor-remainder		;(scheme base)
          floor/			;(scheme base)
          round-quotient
          round-remainder
          round/
          truncate-quotient		;(scheme base)
          truncate-remainder		;(scheme base)
          truncate/			;(scheme base)
	  ))

(define-package (runtime keyword)
  (files "keyword")
  (parent (runtime))
  (export ()
	  keyword?
	  keyword->string
	  string->keyword))

(define-package (runtime miscellaneous-global)
  (files "global")
  (parent (runtime))
  (export deprecated ()
	  (%exit exit)
	  (quit suspend))
  (export ()
	  (*the-non-printing-object* unspecific)
	  <hook-list>
	  append-hook-to-list
	  bind-cell-contents!
	  cd
	  constant-procedure
	  edit
	  edwin
	  emergency-exit		;(scheme process-context)
	  environment-link-name
	  ephemeron-broken?		;(srfi 124)
	  ephemeron-datum		;(srfi 124)
	  ephemeron-key			;(srfi 124)
	  ephemeron?			;(srfi 124)
	  error-procedure
	  eval				;(scheme eval)
	  exit				;(scheme process-context)
	  false-procedure
	  fasdump
	  for-each-interned-symbol
	  get-interrupt-enables
	  hook-in-list?
	  hook-list?
	  hook/scode-eval
	  host-big-endian?
	  hunk3-cons
	  identity-procedure
	  impurify
	  lexical-assignment
	  lexical-reference
	  lexical-unassigned?
	  lexical-unbound?
	  lexical-unreferenceable?
	  limit-interrupts!
	  link-variables
	  local-assignment
	  make-alist-metadata-table
	  make-ephemeron		;(srfi 124)
	  make-hashed-metadata-table
	  make-hook-list
	  make-non-pointer-object
	  make-sequence-builder
	  non-pointer-type-code?
	  null-procedure
	  obarray->list
	  object-component-binder
	  object-datum
	  object-gc-type
	  object-new-type
	  object-non-pointer?
	  object-pointer?
	  object-type
	  object-type?
	  pa
	  param:exit-hook
	  param:suspend-hook
	  partition-generator
	  pointer-type-code?
	  primitive-memory-hash
	  primitive-object-hash
	  primitive-object-hash-2
	  primitive-procedure-arity
	  primitive-procedure-documentation
	  pwd
	  spawn-edwin
	  suspend
	  (reference-barrier identity-procedure) ;(srfi 124)
	  remove-hook-from-list
	  run-hooks-in-list
	  scode-eval
	  set-ephemeron-datum!
	  set-ephemeron-key!
	  set-interrupt-enables!
	  show-time
	  system-hunk3-cons
	  system-hunk3-cxr0
	  system-hunk3-cxr1
	  system-hunk3-cxr2
	  system-hunk3-set-cxr0!
	  system-hunk3-set-cxr1!
	  system-hunk3-set-cxr2!
	  system-list->vector
	  system-pair-car
	  system-pair-cdr
	  system-pair-cons
	  system-pair-set-car!
	  system-pair-set-cdr!
	  system-pair?
	  system-subvector->list
	  system-vector-length
	  system-vector-ref
	  system-vector-set!
	  system-vector?
	  true-procedure
	  type-code->gc-type
	  unbind-variable
	  undefined-value?
	  unspecific
	  user-initial-environment
	  user-initial-prompt
	  wait-interval
	  with-history-disabled
	  with-interrupt-mask)
  (export (runtime)
	  get-fixed-objects-vector
	  strip-angle-brackets)
  (import (runtime thread)
	  with-obarray-lock))

(define-package (runtime merge-sort)
  (files "msort")
  (parent (runtime))
  (export ()
	  (sort merge-sort)
	  (sort! merge-sort!)
	  merge-sort
	  merge-sort!))

(define-package (runtime quick-sort)
  (files "qsort")
  (parent (runtime))
  (export ()
	  quick-sort
	  quick-sort!))

(define-package (runtime sha3)
  (files "sha3")
  (parent (runtime))
  (export ()
	  sha3256
	  sha3256-final
	  sha3256-init
	  sha3256-update))

(define-package (runtime simple-queue)
  (files "queue")
  (parent (runtime))
  (export ()
	  make-queue
	  make-serial-queue
	  queue-empty?
	  queued?/unsafe
	  enqueue!/unsafe
	  dequeue!/unsafe
	  queue-map!/unsafe
	  queue->list/unsafe
	  queued?
	  enqueue!
	  dequeue!
	  queue-map!
	  queue->list))

(define-package (runtime thread-queue)
  (files "thread-queue")
  (parent (runtime))
  (export ()
	  make-thread-queue
	  thread-queue/empty?
	  thread-queue/empty!
	  thread-queue/queue!
	  thread-queue/queue-no-hang!
	  thread-queue/push!
	  thread-queue/dequeue!
	  thread-queue/dequeue-no-hang!
	  thread-queue/peek
	  thread-queue/peek-no-hang))

(define-package (runtime simple-file-ops)
  (files "sfile")
  (parent (runtime))
  (export deprecated ()
	  (file-writable? file-writeable?))
  (export ()
	  (file-exists? file-exists-indirect?) ;(scheme file)
	  (file-soft-link? file-symbolic-link?)
	  <mime-type>
	  allocate-temporary-file
	  associate-pathname-type-with-mime-type
	  call-with-temporary-file-pathname
	  call-with-temporary-filename
	  char-set:mime-token
	  current-file-time
	  deallocate-temporary-file
	  delete-directory
	  delete-file			;(scheme file)
	  delete-file-no-errors
	  directory-file-names
	  disassociate-pathname-type-from-mime-type
	  file-access
	  file-directory?
	  file-eq?
	  file-executable?
	  file-exists-direct?
	  file-exists-indirect?
	  file-modification-time<=?
	  file-modification-time<?
	  file-processed?
	  file-readable?
	  file-regular?
	  file-symbolic-link?
	  file-touch
	  file-type-direct
	  file-type-indirect
	  file-writeable?
	  guarantee-init-file-directory
	  hard-link-file
	  init-file-specifier?
	  make-directory
	  make-mime-type
	  matcher:mime-token
	  matcher:mime-type
	  mime-token-string?
	  mime-token?
	  mime-type->string
	  mime-type-string?
	  mime-type/subtype
	  mime-type/top-level
	  mime-type?
	  open-input-init-file
	  open-output-init-file
	  parser:mime-token
	  parser:mime-type
	  pathname-mime-type
	  pathname-type->mime-type
	  rename-file
	  soft-link-file
	  string->mime-type
	  string-is-mime-token?
	  string-is-mime-type?
	  with-temporary-file
	  write-mime-type))

(define-package (runtime symbol)
  (files "symbol")
  (parent (runtime))
  (export deprecated ()
	  (substring->symbol string->symbol)
	  (symbol-append symbol)
	  (symbol-name symbol->string))
  (export ()
	  intern
	  intern-soft
	  interned-symbol?
	  generate-uninterned-symbol
	  string->symbol		;(scheme base)
	  string->uninterned-symbol
	  symbol
	  symbol->string		;(scheme base)
	  symbol-hash			;(srfi 128)
	  symbol<?
	  symbol=?			;(scheme base)
	  symbol>?
	  symbol?			;(scheme base)
	  uninterned-symbol?))

(define-package (runtime microcode-data)
  (files "microcode-data")
  (parent (runtime))
  (export ()
	  compiled-code-address->block
	  compiled-code-address->offset
	  compiled-code-address?
	  compiled-code-block/bytes-per-object
	  compiled-code-block/code-end
	  compiled-code-block/code-length
	  compiled-code-block/code-start
	  compiled-code-block/constants-end
	  compiled-code-block/constants-start
	  compiled-code-block/debugging-info
	  compiled-code-block/debugging-info?
	  compiled-code-block/environment
	  compiled-code-block/index->offset
	  compiled-code-block/manifest-closure?
	  compiled-code-block/marked-start
	  compiled-code-block/offset->index
	  compiled-code-block/read-file
	  compiled-code-block?
	  compiled-continuation/next-continuation-offset
	  compiled-continuation/reflect-to-interface?
	  compiled-continuation/return-to-interpreter?
	  compiled-entry-type
	  compiled-expression?
	  compiled-return-address?
	  discriminate-compiled-entry
	  environment-extension-aux-list
	  environment-extension-parent
	  environment-extension-procedure
	  environment-extension?
	  interpreter-return-address?
	  make-return-address
	  microcode-error
	  microcode-return
	  microcode-termination
	  microcode-type
	  return-address/code
	  return-address/name
	  return-address?
	  set-compiled-code-block/debugging-info!
	  set-environment-extension-parent!
	  stack-address->index
	  stack-address-offset
	  stack-address?))

(define-package (runtime vector)
  (files "vector")
  (parent (runtime))
  (export ()
	  for-each-vector-element
	  guarantee-subvector
	  guarantee-vector-of-type
	  list->vector			;(scheme base)
	  make-initialized-vector
	  make-vector			;(scheme base)
	  subvector
	  subvector->list
	  subvector-fill!
	  subvector-filled?
	  subvector-find-next-element
	  subvector-find-next-element-not
	  subvector-find-previous-element
	  subvector-find-previous-element-not
	  subvector-move-left!
	  subvector-move-right!
	  subvector-uniform?
	  vector			;(scheme base)
	  vector->list			;(scheme base)
	  vector-any
	  vector-append			;(scheme base)
	  vector-binary-search
	  vector-builder
	  vector-copy			;(scheme base)
	  vector-copy!			;(scheme base)
	  vector-eighth
	  vector-every
	  vector-fifth
	  vector-fill!			;(scheme base)
	  vector-filled?
	  vector-find-next-element
	  vector-find-previous-element
	  vector-first
	  vector-for-each		;(scheme base)
	  vector-fourth
	  vector-grow
	  vector-head
	  vector-head!
	  vector-length			;(scheme base)
	  vector-map			;(scheme base)
	  vector-move!
	  vector-of-type?
	  vector-of-unique-symbols?
	  vector-ref			;(scheme base)
	  vector-second
	  vector-set!			;(scheme base)
	  vector-seventh
	  vector-sixth
	  vector-tail
	  vector-third
	  vector-uniform?
	  vector?))

(define-package (runtime os-primitives)
  (parent (runtime))
  (files "os-primitives")
  (export ()
	  (file-attributes file-attributes-direct)
	  copy-file
	  current-home-directory
	  current-user-name
	  decode-file-time
	  decoded-time->file-time
	  default-line-ending
	  encode-file-time
	  file-access-time
	  file-access-time-direct
	  file-access-time-indirect
	  file-attributes-direct
	  file-attributes-indirect
	  file-attributes/access-time
	  file-attributes/change-time
	  file-attributes/length
	  file-attributes/mode-string
	  file-attributes/modification-time
	  file-attributes/n-links
	  file-attributes/type
	  file-length
	  file-line-ending
	  file-modes
	  file-modification-time
	  file-modification-time-direct
	  file-modification-time-indirect
	  file-time->global-decoded-time
	  file-time->local-decoded-time
	  file-time->universal-time
	  get-environment-variables	;(scheme process-context)
	  get-environment-variable	;(scheme process-context)
	  init-file-specifier->pathname
	  os/exec-path
	  os/executable-pathname-types
	  os/find-program
	  os/form-shell-command
	  os/make-subprocess
	  os/parse-path-string
	  os/shell-file-name
	  os/suffix-mime-type
	  set-file-modes!
	  set-file-times!
	  temporary-directory-pathname
	  temporary-file-pathname
	  universal-time->file-time
	  user-home-directory))

(os-type-case
 ((unix)
  (extend-package (runtime os-primitives)
    (files "unxprm")
    (export ()
	    delete-environment-variable!
	    file-attributes/gid
	    file-attributes/inode-number
	    file-attributes/uid
	    set-environment-variable!
	    unix/current-gid
	    unix/current-pid
	    unix/current-uid
	    unix/gid->string
	    unix/system
	    unix/uid->string)))
 ((nt)
  (extend-package (runtime os-primitives)
    (files "ntprm")
    (import (runtime primitive-io)
	    channel-descriptor-for-select
	    tty-input-channel)
    (export ()
	    console-channel-descriptor
	    delete-environment-variable!
	    dos/fs-drive-type
	    dos/fs-long-filenames?
	    file-attributes/gid
	    file-attributes/inode-number
	    file-attributes/modes
	    file-attributes/uid
	    nt-file-mode/archive
	    nt-file-mode/compressed
	    nt-file-mode/directory
	    nt-file-mode/hidden
	    nt-file-mode/normal
	    nt-file-mode/read-only
	    nt-file-mode/system
	    nt-file-mode/temporary
	    nt-fs-flag/case-preserved-names
	    nt-fs-flag/case-sensitive-search
	    nt-fs-flag/file-compression
	    nt-fs-flag/persistent-acls
	    nt-fs-flag/unicode-on-disk
	    nt-fs-flag/volume-is-compressed
	    nt-volume-info
	    nt-volume-info/file-system-flags
	    nt-volume-info/file-system-name
	    nt-volume-info/max-component-length
	    nt-volume-info/name
	    nt-volume-info/serial-number
	    nt/hide-subprocess-windows?
	    nt/scheme-executable-pathname
	    nt/subprocess-argument-escape-char
	    nt/subprocess-argument-quote-char
	    nt/system-root-directory
	    nt/windows-type
	    set-environment-variable!
	    set-environment-variable-default!))))

(define-package (runtime legacy-string)
  (files "legacy-string")
  (parent (runtime))
  (export deprecated ()
	  (vector-8b? legacy-string?)
	  legacy-string?
	  make-legacy-string
	  make-vector-8b
	  vector-8b-length
	  vector-8b-ref
	  vector-8b-set!))

(define-package (runtime string)
  (files "string")
  (parent (runtime))
  (export deprecated ()
	  (string-hash-ci string-ci-hash)
	  (string-hash-mod string-hash)
	  (substring->list string->list)
	  (substring-move-left! substring-move!)
	  (substring-move-right! substring-move!)
	  (substring-search-all string-search-all)
	  (substring-search-backward string-search-backward)
	  (substring-search-forward string-search-forward)
	  string-move!
	  substring-ci<?
	  substring-ci=?
	  substring-fill!
	  substring-find-next-char
	  substring-find-next-char-ci
	  substring-find-next-char-in-set
	  substring-find-previous-char
	  substring-find-previous-char-ci
	  substring-find-previous-char-in-set
	  substring-lower-case?
	  substring-move!
	  substring-prefix-ci?
	  substring-prefix?
	  substring-suffix-ci?
	  substring-suffix?
	  substring-upper-case?
	  substring<?
	  substring=?)
  (export ()
	  (istring? immutable-string?)
	  (string-append* string-concatenate)
	  8-bit-string?
	  burst-string
	  char->string
	  decorated-string-append
	  immutable-string?
	  list->string			;(scheme base)
	  make-string			;(scheme base)
	  mutable-string?
	  nfc-string?
	  string			;(scheme base)
	  string*
	  string->immutable
	  string->list			;(scheme base)
	  string->nfc
	  string->nfd
	  string->vector		;(scheme base)
	  string-any
	  string-append			;(scheme base)
	  string-builder
	  string-ci-hash		;(srfi 128)
	  string-ci<=?			;(scheme char)
	  string-ci<?			;(scheme char)
	  string-ci=?			;(scheme char)
	  string-ci>=?			;(scheme char)
	  string-ci>?			;(scheme char)
	  string-compare
	  string-compare-ci
	  string-concatenate
	  string-copy			;(scheme base)
	  string-copy!			;(scheme base)
	  string-count
	  string-downcase		;(scheme char)
	  string-every
	  string-fill!			;(scheme base)
	  string-find-first-index
	  string-find-last-index
	  string-find-next-char
	  string-find-next-char-ci
	  string-find-next-char-in-set
	  string-find-previous-char
	  string-find-previous-char-ci
	  string-find-previous-char-in-set
	  string-fold			;(srfi 140)
	  string-fold-right		;(srfi 140)
	  string-foldcase		;(scheme char)
	  string-for-each		;(scheme base)
	  string-hash			;(srfi 128)
	  string-head
	  string-immutable?
	  string-in-nfc?
	  string-in-nfd?
	  string-joiner
	  string-joiner*
	  string-length			;(scheme base)
	  string-lower-case?
	  string-map			;(scheme base)
	  string-match-backward
	  string-match-forward
	  string-mutable?
	  string-null?
	  string-pad-left
	  string-pad-right
	  string-padder
	  string-prefix-ci?
	  string-prefix?
	  string-ref			;(scheme base)
	  string-replace
	  string-search-all
	  string-search-backward
	  string-search-forward
	  string-set!			;(scheme base)
	  string-slice
	  string-splitter
	  string-suffix-ci?
	  string-suffix?
	  string-tail
	  string-titlecase
	  string-trim
	  string-trim-left
	  string-trim-right
	  string-trimmer
	  string-upcase			;(scheme char)
	  string-upper-case?
	  string<=?			;(scheme base)
	  string<?			;(scheme base)
	  string=?			;(scheme base)
	  string>=?			;(scheme base)
	  string>?			;(scheme base)
	  string?			;(scheme base)
	  substring			;(scheme base)
	  substring?
	  vector->string		;(scheme base)
	  )
  (export (runtime)
	  string-for-primitive
	  string-from-primitive)
  (export (runtime symbol)
	  %ascii-ustring!
	  %ascii-ustring-allocate
	  %ustring1?
	  cp1-ref
	  cp1-set!
	  ustring-length)
  (export (runtime printer)
	  (string-slice? slice?)))

(define-package (runtime bytevector)
  (files "bytevector-low" "bytevector")
  (parent (runtime))
  (export deprecated ()
	  legacy-string->bytevector)
  (export ()
	  (byte? u8?)
	  bytevector			;(scheme base)
	  bytevector->exact-nonnegative-integer
	  bytevector->hexadecimal
	  bytevector->list
	  bytevector->vector
	  bytevector-any
	  bytevector-append		;(scheme base)
	  bytevector-builder
	  bytevector-copy		;(scheme base)
	  bytevector-copy!		;(scheme base)
	  bytevector-every
	  bytevector-fill!
	  bytevector-hash
	  bytevector-length		;(scheme base)
	  bytevector-u16be-ref
	  bytevector-u16be-set!
	  bytevector-u16le-ref
	  bytevector-u16le-set!
	  bytevector-u32be-ref
	  bytevector-u32be-set!
	  bytevector-u32le-ref
	  bytevector-u32le-set!
	  bytevector-u8-ref		;(scheme base)
	  bytevector-u8-set!		;(scheme base)
	  bytevector-zero-explicit!
	  bytevector<?
	  bytevector=?
	  bytevector?			;(scheme base)
	  exact-nonnegative-integer->bytevector
	  hexadecimal->bytevector
	  iso8859-1->string
	  list->bytevector
	  make-bytevector		;(scheme base)
	  string->iso8859-1
	  string->utf16
	  string->utf16be
	  string->utf16le
	  string->utf32
	  string->utf32be
	  string->utf32le
	  string->utf8			;(scheme base)
	  u16?
	  u32?
	  u8?
	  utf16->string
	  utf16be->string
	  utf16le->string
	  utf32->string
	  utf32be->string
	  utf32le->string
	  utf8->string			;(scheme base)
	  vector->bytevector))

(define-package (runtime 1d-property)
  (files "prop1d")
  (parent (runtime))
  (export ()
	  1d-table/for-each
	  1d-table/alist
	  1d-table/get
	  1d-table/lookup
	  1d-table/put!
	  1d-table/remove!
	  1d-table?
	  make-1d-table)
  (import (runtime population)
	  make-serial-population/unsafe
	  add-new-to-population!/unsafe)
  (import (runtime gc-daemons)
	  add-secondary-gc-daemon!/unsafe))

(define-package (runtime 2d-property)
  (files "prop2d")
  (parent (runtime))
  (export ()
	  2d-get
	  2d-get-alist-x
	  2d-get-alist-y
	  2d-put!
	  2d-remove!))

(define-package (runtime advice)
  (files "advice")
  (parent (runtime))
  (export ()
	  *args*
	  *proc*
	  *result*
	  advice
	  advise-entry
	  advise-exit
	  ;;break
	  break-both
	  break-entry
	  break-exit
	  entry-advice
	  exit-advice
	  trace
	  trace-both
	  trace-entry
	  trace-exit
	  unadvise
	  unadvise-entry
	  unadvise-exit
	  unbreak
	  unbreak-entry
	  unbreak-exit
	  untrace
	  untrace-entry
	  untrace-exit))

(define-package (runtime apply)
  (files "apply")
  (parent (runtime))
  (export ()
	  apply				;(scheme base)
	  ))

(define-package (runtime character)
  (files "char")
  (parent (runtime))
  (export deprecated ()
	  (code->char integer->char))
  (export ()
	  8-bit-char?
	  ascii-char?
	  bitless-char?
	  char-8-bit?
	  char->bitless-char
	  char->digit
	  char->integer			;(scheme base)
	  char->name
	  char-ascii?
	  char-bit:control
	  char-bit:hyper
	  char-bit:meta
	  char-bit:super
	  char-bits
	  char-bits-clear?
	  char-bits-limit
	  char-bits-set?
	  char-ci<=?			;(scheme char)
	  char-ci<?			;(scheme char)
	  char-ci=-predicate
	  char-ci=?			;(scheme char)
	  char-ci>=?			;(scheme char)
	  char-ci>?			;(scheme char)
	  char-code
	  char-code-limit
	  char-codec-decoder
	  char-codec-encoder
	  char-codec?
	  char-downcase			;(scheme char)
	  char-foldcase			;(scheme char)
	  char-general-category
	  char-upcase			;(scheme char)
	  char<=?			;(scheme base)
	  char<?			;(scheme base)
	  char=-predicate
	  char=?			;(scheme base)
	  char>=?			;(scheme base)
	  char>?			;(scheme base)
	  char?				;(scheme base)
	  clear-char-bits
	  code-point-general-category
	  decode-utf8-char
	  digit->char
	  digit-value			;(scheme char)
	  get-char-codec
	  integer->char			;(scheme base)
	  make-char
	  name->char
	  radix?
	  set-char-bits
	  unicode-code-point?
	  unicode-scalar-value?)
  (export (runtime)
	  char-utf16-byte-length
	  char-utf32-byte-length
	  char-utf8-byte-length
	  char:replacement
	  decode-utf16be-char
	  decode-utf16le-char
	  decode-utf32be-char
	  decode-utf32le-char
	  encode-utf16be-char!
	  encode-utf16le-char!
	  encode-utf32be-char!
	  encode-utf32le-char!
	  encode-utf8-char!
	  initial-byte->utf8-char-length
	  initial-u16->utf16-char-length
	  initial-u32->utf32-char-length))

(define-package (runtime ucd-tables)
  (files "ucd-table-alpha"
	 "ucd-table-canonical-cm"
	 "ucd-table-canonical-cm-second"
	 "ucd-table-canonical-dm"
	 "ucd-table-cased"
	 "ucd-table-ccc"
	 "ucd-table-cf"
	 "ucd-table-comp_ex"
	 "ucd-table-cwcf"
	 "ucd-table-cwl"
	 "ucd-table-cwu"
	 "ucd-table-gc"
	 "ucd-table-gc=cc"
	 "ucd-table-gc=cf"
	 "ucd-table-gc=cn"
	 "ucd-table-gc=co"
	 "ucd-table-gc=cs"
	 "ucd-table-gc=ll"
	 "ucd-table-gc=lm"
	 "ucd-table-gc=lo"
	 "ucd-table-gc=lt"
	 "ucd-table-gc=lu"
	 "ucd-table-gc=mc"
	 "ucd-table-gc=me"
	 "ucd-table-gc=mn"
	 "ucd-table-gc=nd"
	 "ucd-table-gc=nl"
	 "ucd-table-gc=no"
	 "ucd-table-gc=pc"
	 "ucd-table-gc=pd"
	 "ucd-table-gc=pe"
	 "ucd-table-gc=pf"
	 "ucd-table-gc=pi"
	 "ucd-table-gc=po"
	 "ucd-table-gc=ps"
	 "ucd-table-gc=sc"
	 "ucd-table-gc=sk"
	 "ucd-table-gc=sm"
	 "ucd-table-gc=so"
	 "ucd-table-gc=zl"
	 "ucd-table-gc=zp"
	 "ucd-table-gc=zs"
	 "ucd-table-gcb"
	 "ucd-table-lc"
	 "ucd-table-lower"
	 "ucd-table-nfc_qc"
	 "ucd-table-nfd_qc"
	 "ucd-table-nt"
	 "ucd-table-nt=de"
	 "ucd-table-nt=di"
	 "ucd-table-nt=nu"
	 "ucd-table-nv"
	 "ucd-table-scf"
	 "ucd-table-slc"
	 "ucd-table-suc"
	 "ucd-table-tc"
	 "ucd-table-uc"
	 "ucd-table-upper"
	 "ucd-table-wb"
	 "ucd-table-wspace")
  (parent (runtime))
  (export ()
	  (char-set:digit char-set:nt=decimal)	;(srfi 14)
	  (char-set:letter char-set:alphabetic) ;(srfi 14)
	  (char-set:numeric char-set:nt=decimal)
	  (char-set:title-case char-set:gc=letter:titlecase) ;(srfi 14)
	  (char-numeric? char-nt=decimal?) ;(scheme char)
	  char-alphabetic?		;(scheme char)
	  char-cased?
	  char-changes-when-case-folded?
	  char-changes-when-lower-cased?
	  char-changes-when-upper-cased?
	  char-lower-case?		;(scheme char)
	  char-set:alphabetic
	  char-set:cased
	  char-set:changes-when-case-folded
	  char-set:changes-when-lower-cased
	  char-set:changes-when-upper-cased
	  char-set:lower-case		;(srfi 14)
	  char-set:upper-case		;(srfi 14)
	  char-set:whitespace		;(srfi 14)
	  char-upper-case?		;(scheme char)
	  char-whitespace?		;(scheme char)
	  )
  (export (runtime character)
	  ucd-gc-value
	  ucd-nt-value
	  ucd-nv-value
	  ucd-scf-value
	  ucd-slc-value
	  ucd-suc-value)
  (export (runtime ucd-glue)
	  char-set:gc=letter:lowercase
	  char-set:gc=letter:modifier
	  char-set:gc=letter:other
	  char-set:gc=letter:titlecase
	  char-set:gc=letter:uppercase
	  char-set:gc=mark:enclosing
	  char-set:gc=mark:nonspacing
	  char-set:gc=mark:spacing-combining
	  char-set:gc=number:decimal-digit
	  char-set:gc=number:letter
	  char-set:gc=number:other
	  char-set:gc=other:control
	  char-set:gc=other:format
	  char-set:gc=other:not-assigned
	  char-set:gc=other:private-use
	  char-set:gc=other:surrogate
	  char-set:gc=punctuation:close
	  char-set:gc=punctuation:connector
	  char-set:gc=punctuation:dash
	  char-set:gc=punctuation:final-quote
	  char-set:gc=punctuation:initial-quote
	  char-set:gc=punctuation:open
	  char-set:gc=punctuation:other
	  char-set:gc=separator:space
	  char-set:gc=symbol:currency
	  char-set:gc=symbol:math
	  char-set:gc=symbol:modifier
	  char-set:gc=symbol:other
	  ucd-nt-value)
  (export (runtime ucd-segmentation grapheme)
	  ucd-gcb-value)
  (export (runtime ucd-segmentation word)
	  ucd-wb-value)
  (export (runtime string)
	  char-full-composition-exclusion?
	  char-nfd-quick-check?
	  ucd-canonical-cm-second-keys
	  ucd-canonical-cm-second-values
	  ucd-canonical-cm-value
	  ucd-canonical-dm-value
	  ucd-ccc-value
	  ucd-cf-value
	  ucd-lc-value
	  ucd-nfc_qc-value
	  ucd-tc-value
	  ucd-uc-value))

(define-package (runtime ucd-glue)
  (files "ucd-glue")
  (parent (runtime))
  (export ()
	  (char-set:full char-set:unicode) ;(srfi 14)
	  (char-set:letter+digit char-set:alphanumeric) ;(srfi 14)
	  char-alphanumeric?
	  char-graphic?
	  char-newline?
	  char-printing?
	  char-set:alphanumeric
	  char-set:control
	  char-set:graphic		;(srfi 14)
	  char-set:newline
	  char-set:no-newline
	  char-set:not-alphabetic
	  char-set:not-alphanumeric
	  char-set:not-graphic
	  char-set:not-lower-case
	  char-set:not-numeric
	  char-set:not-printing
	  char-set:not-standard
	  char-set:not-upper-case
	  char-set:not-whitespace
	  char-set:printing		;(srfi 14)
	  char-set:punctuation		;(srfi 14)
	  char-set:standard		;(srfi 14)
	  char-set:symbol		;(srfi 14)
	  char-set:unicode
	  char-standard?
	  unicode-char?)
  (export (runtime)
	  char-set:folded-symbol-constituent
	  char-set:folded-symbol-initial
	  char-set:normal-printing
	  char-set:symbol-constituent
	  char-set:symbol-initial))

(define-package (runtime ucd-segmentation)
  (files "ucd-segmentation")
  (parent (runtime)))

(define-package (runtime ucd-segmentation grapheme)
  (files "ucd-grapheme")
  (parent (runtime ucd-segmentation))
  (export ()
	  grapheme-cluster-breaks
	  grapheme-cluster-length
	  grapheme-cluster-slice
	  string->grapheme-clusters
	  string-gcb-fold
	  string-gcb-fold-right
	  string-gcb-stream))

(define-package (runtime ucd-segmentation word)
  (files "ucd-word")
  (parent (runtime ucd-segmentation))
  (export ()
	  string-wb-fold
	  string-wb-fold-right
	  string-wb-stream
	  string-word-breaks)
  (export (runtime string)
	  find-word-breaks))

(define-package (runtime character-set)
  (files "char-set")
  (parent (runtime))
  (export deprecated ()
	  (ascii-range->char-set ucs-range->char-set)
	  (char-set->scalar-values char-set->code-points)
	  (char-set-member? char-set-contains?)
	  (char-set=? char-set=)
	  (chars->char-set list->char-set)
	  (scalar-values->char-set char-set*)
	  (well-formed-scalar-value-list? code-point-list?)
	  char-set->ascii-string
	  char-set-members)
  (export ()
	  (char-set-adjoin! char-set-adjoin)
	  (char-set-complement! char-set-complement)
	  (char-set-delete! char-set-delete)
	  (char-set-diff+intersection! char-set-diff+intersection)
	  (char-set-difference! char-set-difference)
	  (char-set-filter! char-set-filter)
	  (char-set-intersection! char-set-intersection)
	  (char-set-unfold! char-set-unfold)
	  (char-set-union! char-set-union)
	  (char-set-xor! char-set-xor)
	  (char-set:ctls char-set:iso-control)
	  (char-set:wsp char-set:blank)
          (list->char-set! list->char-set)
          (string->char-set! string->char-set)
          (ucs-range->char-set! ucs-range->char-set)
	  ->char-set			;(srfi 14)
	  8-bit-char-set?
	  char-ctl?
	  char-in-set?
	  char-set			;(srfi 14) (extended)
	  char-set*
	  char-set->code-points
	  char-set->list		;(srfi 14)
	  char-set->name
	  char-set->string		;(srfi 14)
	  char-set-adjoin		;(srfi 14)
	  char-set-any			;(srfi 14)
	  char-set-ci-predicate
	  char-set-complement		;(srfi 14)
	  char-set-contains?		;(srfi 14)
	  char-set-copy                 ;(srfi 14)
	  char-set-count		;(srfi 14)
	  char-set-cursor		;(srfi 14)
	  char-set-cursor-next		;(srfi 14)
	  char-set-delete		;(srfi 14)
	  char-set-diff+intersection	;(srfi 14)
	  char-set-difference		;(srfi 14)
	  char-set-downcase
	  char-set-empty?
	  char-set-every		;(srfi 14)
	  char-set-filter		;(srfi 14)
	  char-set-fold			;(srfi 14)
	  char-set-fold-right
	  char-set-foldcase
	  char-set-for-each		;(srfi 14)
	  char-set-hash			;(srfi 14)
	  char-set-intersection		;(srfi 14)
	  char-set-intersection*
	  char-set-invert
	  char-set-map			;(srfi 14)
	  char-set-name?
	  char-set-names
	  char-set-predicate
	  char-set-range-fold
	  char-set-range-fold-right
	  char-set-ref			;(srfi 14)
	  char-set-size			;(srfi 14)
	  char-set-unfold		;(srfi 14)
	  char-set-union		;(srfi 14)
	  char-set-union*
	  char-set-upcase
	  char-set-xor			;(srfi 14)
	  char-set-xor*
	  char-set:ascii		;(srfi 14)
	  char-set:blank		;(srfi 14)
	  char-set:empty		;(srfi 14)
	  char-set:hex-digit		;(srfi 14)
	  char-set:iso-control		;(srfi 14)
	  char-set<
	  char-set<=			;(srfi 14)
	  char-set=			;(srfi 14)
	  char-set?			;(srfi 14)
	  char-sets-disjoint?
	  char-wsp?
	  code-point-list?
	  code-point-in-char-set?
	  compute-char-set
	  end-of-char-set?		;(srfi 14)
	  list->char-set		;(srfi 14)
	  name->char-set
	  re-char-pattern->code-points
	  re-compile-char-set
	  string->char-set		;(srfi 14)
	  ucs-range->char-set		;(srfi 14)
	  )
  (export (runtime regexp regsexp)
	  cpl-element?
	  normalize-ranges))

(define-package (runtime compiler-info)
  (files "infstr" "infutl")
  (parent (runtime))
  (export ()
	  compiled-code-block/filename-and-index
	  compiled-entry/filename-and-index
	  compiled-entry/block
	  compiled-entry/dbg-object
	  compiled-entry/offset
	  compiled-expression/scode
	  compiled-procedure/name
	  compiled-procedure/lambda
	  discard-debugging-info!
	  load-debugging-info-on-demand?
	  uncompress-ports)
  (export (runtime load)
	  dbg-info-vector/purification-root
	  dbg-info-vector?
	  fasload/update-debugging-info!
	  with-directory-rewriting-rule)
  (export (runtime program-copier)
	  dbg-info-vector?)
  (export (runtime debugger-command-loop)
	  special-form-procedure-name?)
  (export (runtime stack-sampler)
	  special-form-procedure-name?)
  (export (runtime environment)
	  dbg-block/find-name
	  dbg-block/ic-parent-index
	  dbg-block/layout
	  dbg-block/layout-first-offset
	  dbg-block/layout-vector
	  dbg-block/normal-closure-index
	  dbg-block/original-parent
	  dbg-block/parent
	  dbg-block/procedure
	  dbg-block/stack-link
	  dbg-block/static-link-index
	  dbg-block/type
	  dbg-continuation?
	  dbg-continuation/block
	  dbg-continuation/offset
	  dbg-expression?
	  dbg-procedure?
	  dbg-procedure/block
	  dbg-procedure/name
	  dbg-procedure/required
	  dbg-procedure/optional
	  dbg-procedure/rest
	  dbg-procedure/source-code
	  dbg-variable/name
	  dbg-variable/type
	  dbg-variable/value
	  dbg-variable?)
  (export (runtime debugging-info)
	  dbg-continuation?
	  dbg-continuation/source-code
	  dbg-procedure?
	  dbg-procedure/block
	  dbg-procedure/source-code
	  dbg-expression?)
  (export (runtime compress)
	  uncompress-internal
	  write-compressed-file-marker)
  (export (runtime options)
	  with-directory-rewriting-rule))

(define-package (runtime console-i/o-port)
  (files "console-io")
  (parent (runtime))
  (export ()
	  console-i/o-port
	  console-i/o-port?
	  console-error-port)
  (export (runtime emacs-interface)
	  the-console-port))

(define-package (runtime continuation)
  (files "contin")
  (parent (runtime))
  (export ()
	  (call/cc call-with-current-continuation) ;(scheme base)
	  call-with-current-continuation ;(scheme base)
	  continuation?
	  within-continuation)
  (export (runtime continuation-parser)
	  continuation/block-thread-events?
	  continuation/control-point
	  continuation/dynamic-state
	  make-continuation)
  (export (runtime thread)
	  %within-continuation))

(define-package (runtime continuation-parser)
  (files "conpar")
  (parent (runtime))
  (export ()
	  continuation->stack-frame
	  continuation/first-subproblem
	  stack-frame->continuation
	  stack-frame/block-thread-events?
	  stack-frame/compiled-code?
	  stack-frame/dynamic-state
	  stack-frame/elements
	  stack-frame/interrupt-mask
	  stack-frame/last-return-code
	  stack-frame/length
	  stack-frame/next
	  stack-frame/next-subproblem
	  stack-frame/offset
	  stack-frame/previous-type
	  stack-frame/properties
	  stack-frame/reductions
	  stack-frame/ref
	  stack-frame/repl-eval-boundary?
	  stack-frame/resolve-stack-address
	  stack-frame/return-address
	  stack-frame/return-code
	  stack-frame/skip-non-subproblems
	  stack-frame/subproblem?
	  stack-frame/type
	  stack-frame?)
  (export (runtime)
	  hardware-trap-frame?
	  hardware-trap-frame/describe
	  hardware-trap-frame/print-registers
	  hardware-trap-frame/print-stack
	  hardware-trap-frame/code
	  microcode-return/code->type
	  microcode-return/name->type
	  stack-frame-type/code
	  stack-frame-type/compiled-return-address
	  stack-frame-type/interrupt-compiled-expression
	  stack-frame-type/interrupt-compiled-procedure
	  stack-frame-type/properties
	  stack-frame-type/subproblem?
	  stack-frame-type?))

(define-package (runtime control-point)
  (files "cpoint")
  (parent (runtime))
  (export ()
	  control-point/element-stream
	  control-point/history
	  control-point/interrupt-mask
	  control-point/n-elements
	  control-point/next-control-point
	  control-point/previous-history-control-point
	  control-point/previous-history-offset
	  control-point?
	  make-control-point))

(define-package (runtime date/time)
  (files "datime")
  (parent (runtime))
  (export ()
	  (decode-universal-time universal-time->local-decoded-time)
	  (decoded-time->string decoded-time->rfc2822-string)
	  (encode-universal-time decoded-time->universal-time)
	  (file-time->global-time-string file-time->global-rfc2822-string)
	  (file-time->local-time-string file-time->local-rfc2822-string)
	  (file-time->string file-time->local-rfc2822-string)
	  (get-decoded-time local-decoded-time)
	  (string->decoded-time rfc2822-string->decoded-time)
	  (universal-time->global-time-string
	   universal-time->global-rfc2822-string)
	  (universal-time->local-time-string
	   universal-time->local-rfc2822-string)
	  (universal-time->string universal-time->local-rfc2822-string)
	  ctime-string->decoded-time
	  ctime-string->file-time
	  ctime-string->universal-time
	  current-second		;(scheme time)
	  day-of-week/long-string
	  day-of-week/short-string
	  decoded-time->ctime-string
	  decoded-time->utc
	  decoded-time->iso8601-string
	  decoded-time->rfc2822-string
	  decoded-time->universal-time
	  decoded-time->xml-rpc-iso8601-string
	  decoded-time/date-string
	  decoded-time/day
	  decoded-time/day-of-week
	  decoded-time/daylight-savings-time?
	  decoded-time/hour
	  decoded-time/minute
	  decoded-time/month
	  decoded-time/second
	  decoded-time/time-string
	  decoded-time/year
	  decoded-time/zone
	  decoded-time?
	  epoch
	  file-time->global-ctime-string
	  file-time->global-iso8601-string
	  file-time->global-rfc2822-string
	  file-time->local-ctime-string
	  file-time->local-iso8601-string
	  file-time->local-rfc2822-string
	  get-universal-time
	  global-decoded-time
	  iso8601-string->decoded-time
	  iso8601-string->file-time
	  iso8601-string->universal-time
	  local-decoded-time
	  make-decoded-time
	  month/long-string
	  month/max-days
	  month/short-string
	  parser:ctime
	  parser:iso8601-date/time
	  parser:military-time-zone
	  parser:named-time-zone
	  parser:numeric-time-zone
	  parser:rfc2822-time
	  parser:rfc850-time
	  parser:time-zone
	  rfc2822-string->decoded-time
	  string->day-of-week
	  string->file-time
	  string->month
	  string->time-zone
	  string->universal-time
	  time-zone->string
	  time-zone?
	  universal-time->global-ctime-string
	  universal-time->global-decoded-time
	  universal-time->global-iso8601-string
	  universal-time->global-rfc2822-string
	  universal-time->local-ctime-string
	  universal-time->local-decoded-time
	  universal-time->local-iso8601-string
	  universal-time->local-rfc2822-string
	  write-decoded-time-as-ctime
	  write-decoded-time-as-http
	  (write-decoded-time-as-iso8601
	   write-decoded-time-as-iso8601-extended)
	  write-decoded-time-as-rfc2822
	  write-decoded-time-as-xml-rpc-iso8601
	  write-time-zone
	  xml-rpc-iso8601-string->decoded-time))

(define-package (runtime debugger)
  (files "debug")
  (parent (runtime debugger-command-loop))
  (export ()
	  debug
	  debugger:auto-toggle?
	  debugger:count-subproblems-limit
	  debugger:list-breadth-limit
	  debugger:list-depth-limit
	  debugger:print-return-values?
	  debugger:string-length-limit
	  debugger:student-walk?
	  debugger:use-history?
	  stack-trace))

(define-package (runtime debugger-command-loop)
  (files "dbgcmd")
  (parent (runtime)))

(define-package (runtime debugger-utilities)
  (files "dbgutl")
  (parent (runtime debugger-command-loop))
  (export (runtime debugger-command-loop)
	  debug/read-eval-print-1
	  debugger-failure
	  debugger-message
	  debugger-presentation
	  output-to-string
	  print-user-friendly-name
	  show-environment-bindings
	  show-environment-name
	  show-environment-procedure
	  show-frame
	  show-frames
	  write-dbg-name))

(define-package (runtime debugging-info)
  (files "framex")
  (parent (runtime))
  (export ()
	  debugging-info/compiled-code?
	  debugging-info/evaluated-object-value
	  debugging-info/evaluated-object?
	  debugging-info/undefined-environment?
	  debugging-info/undefined-expression?
	  debugging-info/unknown-expression?
	  debugging-info/noise
	  debugging-info/noise?
	  stack-frame/debugging-info))

(define-package (runtime directory)
  (parent (runtime))
  (export (runtime pathname)
	  *expand-directory-prefixes?*)
  (export ()
	  directory-read))

(os-type-case
 ((unix)
  (extend-package (runtime directory)
    (files "unxdir")))
 ((nt)
  (extend-package (runtime directory)
    (files "ntdir"))))

(define-package (runtime emacs-interface)
  (files "emacs")
  (parent (runtime)))

(define-package (runtime procedure)
  (files "procedure")
  (parent (runtime))
  (export ()
	  %entity-extra
	  %entity-procedure
	  %set-entity-extra!
	  %set-entity-procedure!
	  apply-hook-extra
	  apply-hook-procedure
	  apply-hook?
	  arity-dispatched-procedure?
	  binary-procedure?
	  compiled-closure->entry
	  compiled-closure/ref
	  compiled-closure/set!
	  compiled-closure?
	  compiled-procedure?
	  compound-procedure?
	  entity-extra
	  entity-procedure
	  entity?
	  guarantee-procedure-of-arity
	  implemented-primitive-procedure?
	  make-apply-hook
	  make-arity-dispatched-procedure
	  make-entity
	  make-primitive-procedure
	  make-procedure-arity
	  primitive-procedure-name
	  primitive-procedure?
	  procedure-arity
	  procedure-arity-intersection
	  procedure-arity-max
	  procedure-arity-min
	  procedure-arity-valid?
	  procedure-arity<=
	  procedure-arity?
	  procedure-components
	  procedure-environment
	  procedure-lambda
	  procedure-of-arity?
	  procedure?			;(scheme base)
	  scode-lambda-arity
	  set-apply-hook-extra!
	  set-apply-hook-procedure!
	  set-entity-extra!
	  set-entity-procedure!
	  thunk?
	  unary-procedure?)
  (export (runtime continuation-parser)
	  compiled-procedure-frame-size)
  (export (runtime predicate-tagging)
	  %entity-is-apply-hook?))

(define-package (runtime predicate)
  (files "predicate")
  (parent (runtime))
  (export ()
	  any-object?
	  bottom-dispatch-tag
	  dispatch-tag-is-bottom?
	  dispatch-tag-is-top?
	  dispatch-tag<=
	  dispatch-tag=
	  dispatch-tag>=
	  no-object?
	  predicate-name
	  predicate<=
	  predicate>=
	  top-dispatch-tag)
  (export (runtime)
	  define-dispatch-tag<=)
  (export (runtime compound-predicate)
	  the-bottom-dispatch-tag
	  the-top-dispatch-tag))

(define-package (runtime compound-predicate)
  (files "compound-predicate")
  (parent (runtime))
  (export ()
	  complement
	  complement?
	  compound-predicate-constructor
	  compound-predicate-operands
	  compound-predicate?
	  conjoin
	  conjoin*
	  conjoin?
	  disjoin
	  disjoin*
	  disjoin?
	  ordered-predicates-memoizer
	  single-predicate-memoizer
	  unordered-predicates-memoizer)
  (export (runtime predicate)
	  %make-compound-tag))

(define-package (runtime parametric-predicate)
  (files "parametric-predicate")
  (parent (runtime))
  (export ()
	  is-list-of
	  is-non-empty-list-of
	  is-pair-of
	  make-predicate-template
          parameter-binding-name
          parameter-binding-polarity
          parameter-binding-value
          parameter-binding-values
          parameter-binding?
          parametric-predicate-bindings
          parametric-predicate-template
          parametric-predicate?
          predicate-template-accessor
          predicate-template-constructor
          predicate-template-name
          predicate-template-parameter-names
          predicate-template-pattern
          predicate-template-predicate
          predicate-template?))

(define-package (runtime predicate-tagging)
  (files "predicate-tagging")
  (parent (runtime))
  (export ()
	  dispatch-tag-tagger
	  object->datum
	  object->dispatch-tag
	  object->predicate
	  predicate-tagger))

(define-package (runtime predicate-dispatch)
  (files "predicate-dispatch")
  (parent (runtime))
  (export ()
	  cached-chaining-predicate-dispatcher
	  cached-standard-predicate-dispatcher
	  chaining-predicate-dispatcher
	  define-predicate-dispatch-handler
	  predicate-dispatcher-arity
	  predicate-dispatcher-name
	  predicate-dispatcher-rules
	  predicate-dispatcher?
	  standard-predicate-dispatcher)
  (export (runtime)
	  simple-predicate-dispatcher))

(define-package (runtime bundle)
  (files "bundle")
  (parent (runtime))
  (export ()
	  alist->bundle
	  bundle->alist
	  bundle-combine
	  bundle-combine*
	  bundle-combiner:first
	  bundle-map
	  bundle-map*
	  bundle-names
	  bundle-predicate
	  bundle-predicate?
	  bundle-ref
	  bundle?
	  make-bundle-predicate))

(define-package (runtime environment)
  (files "environment")
  (parent (runtime))
  (export ()
	  ->environment
	  compiled-procedure/environment
	  environment-arguments
	  environment-assign!
	  environment-assignable?
	  environment-assigned?
	  environment-bindings
	  environment-bound-names
	  environment-bound?
	  environment-definable?
	  environment-define
	  environment-define-macro
	  environment-has-parent?
	  environment-lambda
	  environment-lookup
	  environment-lookup-or
	  environment-lookup-macro
	  environment-macro-names
	  environment-parent
	  environment-procedure-name
	  environment-reference-type
	  environment-safe-lookup
	  environment?
	  (extend-ic-environment extend-top-level-environment)
	  extend-top-level-environment
	  ic-environment?
	  interpreter-environment?
	  (make-null-interpreter-environment make-root-top-level-environment)
	  make-root-top-level-environment
	  make-top-level-environment
	  system-global-environment?
	  (top-level-environment? interpreter-environment?))
  (export (runtime advice)
	  ic-environment/arguments
	  ic-environment/procedure)
  (export (runtime debugging-info)
	  stack-frame/environment))

(define-package (runtime environment-inspector)
  (files "where")
  (parent (runtime debugger-command-loop))
  (export ()
	  where))

(define-package (runtime error-handler)
  (files "error")
  (parent (runtime))
  (export ()
	  abort
	  access-condition
	  bind-condition-handler
	  bind-default-condition-handler
	  bind-restart
	  bound-restarts
	  break-on-signals
	  condition-accessor
	  condition-constructor
	  condition-of-type?
	  condition-predicate
	  condition-signaller
	  condition-type/error?
	  condition-type/field-names
	  condition-type/generalizations
	  condition-type/get
	  condition-type/name
	  condition-type/properties
	  condition-type/put!
	  condition-type:arithmetic-error
	  condition-type:bad-range-argument
	  condition-type:cell-error
	  condition-type:control-error
	  condition-type:datum-out-of-range
	  condition-type:derived-file-error
	  condition-type:derived-port-error
	  condition-type:derived-thread-error
	  condition-type:divide-by-zero
	  condition-type:error
	  condition-type:file-error
	  condition-type:file-operation-error
	  condition-type:floating-point-divide-by-zero
	  condition-type:floating-point-overflow
	  condition-type:floating-point-underflow
	  condition-type:illegal-datum
	  condition-type:illegal-pathname-component
	  condition-type:inexact-floating-point-result
	  condition-type:integer-divide-by-zero
	  condition-type:invalid-floating-point-operation
	  condition-type:macro-binding
	  condition-type:no-such-restart
	  condition-type:port-error
	  condition-type:serious-condition
	  condition-type:simple-condition
	  condition-type:simple-error
	  condition-type:simple-warning
	  condition-type:thread-error
	  condition-type:unassigned-variable
	  condition-type:unbound-variable
	  condition-type:variable-error
	  condition-type:warning
	  condition-type:wrong-number-of-arguments
	  condition-type:wrong-type-argument
	  condition-type:wrong-type-datum
	  condition-type?
	  condition/continuation
	  condition/derived-thread?
	  condition/error?
	  condition/get
	  condition/other-thread
	  condition/properties
	  condition/put!
	  condition/report-string
	  condition/restarts
	  condition/type
	  condition?
	  continue
	  default/invoke-condition-handler
	  error				;(scheme base)
	  error-irritant/noise
	  error-object-irritants	;(scheme base)
	  error-object-message		;(scheme base)
	  error-object?			;(scheme base)
	  error:bad-range-argument
	  error:datum-out-of-range
	  error:derived-file
	  error:derived-port
	  error:derived-thread
	  error:divide-by-zero
	  error:file-operation
	  error:illegal-pathname-component
	  error:no-such-restart
	  error:wrong-number-of-arguments
	  error:wrong-type-argument
	  error:wrong-type-datum
	  file-error?			;(scheme base)
	  find-restart
	  first-bound-restart
	  format-error-message
	  hook/invoke-condition-handler
	  ignore-errors
	  warn-errors?
	  invoke-restart
	  invoke-restart-interactively
	  make-condition
	  make-condition-type
	  muffle-warning
	  param:standard-error-hook
	  param:standard-warning-hook
	  raise				;(scheme base)
	  raise-continuable		;(scheme base)
	  restart/effector
	  restart/get
	  restart/interactor
	  restart/name
	  restart/properties
	  restart/put!
	  restart?
	  retry
	  signal-condition
	  standard-error-handler
	  standard-error-hook
	  standard-warning-handler
	  standard-warning-hook
	  store-value
	  use-value
	  warn
	  with-exception-handler	;(scheme base)
	  with-restart
	  with-simple-restart
	  write-condition-report
	  write-restart-report)
  (export (runtime microcode-errors)
	  signal-file-operation
	  write-operator)
  (export (runtime rep)
	  param:bound-restarts
	  dynamic-handler-frames)
  (export (runtime debugger)
	  continue-from-derived-thread-error)
  (export (runtime stream)
	  ordinal-number-string
	  write-operator)
  (export (runtime environment)
	  error:macro-binding
	  error:unassigned-variable
	  error:unbound-variable))

(define-package (runtime event-distributor)
  (files "events")
  (parent (runtime))
  (export ()
	  add-event-receiver!
	  event-distributor/invoke!
	  event-distributor/receivers
	  event-distributor?
	  event:after-restart
	  event:after-restore
	  event:before-exit
	  make-event-distributor
	  remove-event-receiver!)
  (export (runtime)
	  run-now-and-after-restart!
	  run-now-and-after-restore!))

(define-package (runtime extended-scode-eval)
  (files "xeval")
  (parent (runtime))
  (export ()
	  extended-scode-eval
	  hook/extended-scode-eval))

(define-package (runtime file-i/o-port)
  (files "file-io")
  (parent (runtime))
  (export deprecated ()
	  call-with-exclusive-legacy-binary-output-file
	  call-with-legacy-binary-append-file
	  call-with-legacy-binary-input-file
	  call-with-legacy-binary-output-file
	  open-exclusive-legacy-binary-output-file
	  open-legacy-binary-i/o-file
	  open-legacy-binary-input-file
	  open-legacy-binary-output-file
	  with-input-from-legacy-binary-file
	  with-output-to-legacy-binary-file
	  with-output-to-exclusive-file
	  with-output-to-exclusive-legacy-binary-file)
  (export ()
	  call-with-append-file
	  call-with-binary-append-file
	  call-with-binary-input-file
	  call-with-binary-output-file
	  call-with-exclusive-binary-output-file
	  call-with-exclusive-output-file
	  call-with-input-file		;(scheme file)
	  call-with-output-file		;(scheme file)
	  open-binary-i/o-file
	  open-binary-input-file	;(scheme file)
	  open-binary-output-file	;(scheme file)
	  open-exclusive-binary-output-file
	  open-exclusive-output-file
	  open-i/o-file
	  open-input-file		;(scheme file)
	  open-output-file		;(scheme file)
	  with-input-from-file		;(scheme file)
	  with-output-to-file		;(scheme file)
	  ))

(define-package (runtime transcript)
  (files "transcript")
  (parent (runtime))
  (export ()
	  transcript-off
	  transcript-on))

(define-package (runtime format)
  (file-case options
    ((load) "format")
    (else))
  (parent (runtime))
  (export ()
	  format))

(define-package (runtime garbage-collector)
  (files "gc")
  (parent (runtime))
  (export ()
	  constant-space/in-use
	  flush-purification-queue!
	  gc-flip
	  purify
	  set-gc-safety-margin!)
  (export (runtime gc-statistics)
	  hook/gc-finish
	  hook/gc-start)
  (export (runtime error-handler)
	  hook/hardware-trap)
  (export (runtime gc-notification)
	  abort-heap-low))

(define-package (runtime gc-daemons)
  (files "gcdemn")
  (parent (runtime))
  (export ()
	  add-gc-daemon!
	  add-gc-daemon!/no-restore
	  add-primitive-gc-daemon!
	  add-secondary-gc-daemon!
	  gc-clean
	  trigger-secondary-gc-daemons!)
  (export (runtime interrupt-handler)
	  trigger-gc-daemons!))

(define-package (runtime gc-finalizer)
  (files "gcfinal")
  (parent (runtime))
  (export ()
	  add-to-gc-finalizer!
	  gc-finalizer-elements
	  gc-finalizer?
	  make-gc-finalized-object
	  make-gc-finalizer
	  remove-all-from-gc-finalizer!
	  remove-from-gc-finalizer!
	  search-gc-finalizer)
  (export (runtime subprocess)
	  %gc-finalizer-elements))

(define-package (runtime gc-notification)
  (files "gcnote")
  (parent (runtime))
  (export ()
	  gc-statistic->string
	  print-gc-statistics
	  set-gc-notification!
	  toggle-gc-notification!
	  with-gc-notification!)
  (import (runtime thread)
	  first-running-thread
	  %maybe-toggle-thread-timer
	  %signal-thread-event))

(define-package (runtime gc-statistics)
  (files "gcstat")
  (parent (runtime))
  (export ()
	  gc-history-mode
	  gc-statistic/heap-left
	  gc-statistic/last-gc-end
	  gc-statistic/last-gc-start
	  gc-statistic/last-gc-end-clock
	  gc-statistic/last-gc-start-clock
	  gc-statistic/meter
	  gc-statistic/this-gc-end
	  gc-statistic/this-gc-start
	  gc-statistic/this-gc-end-clock
	  gc-statistic/this-gc-start-clock
	  gc-statistic/this-gc-start-uctime
	  gc-statistics
	  gc-timestamp
	  gctime)
  (export (runtime gc-notification)
	  last-statistic))

(define-package (runtime generic-i/o-port)
  (files "generic-io")
  (parent (runtime))
  (export ()
	  binary->textual-port
	  char-set:iso-8859-1
	  char-set:iso-8859-10
	  char-set:iso-8859-11
	  char-set:iso-8859-13
	  char-set:iso-8859-14
	  char-set:iso-8859-15
	  char-set:iso-8859-16
	  char-set:iso-8859-2
	  char-set:iso-8859-3
	  char-set:iso-8859-4
	  char-set:iso-8859-5
	  char-set:iso-8859-6
	  char-set:iso-8859-7
	  char-set:iso-8859-8
	  char-set:iso-8859-9
	  known-input-port-coding?
	  known-input-port-codings
	  known-output-port-coding?
	  known-output-port-codings
	  primary-input-port-codings
	  primary-output-port-codings)
  (export (runtime console-i/o-port)
	  generic-i/o-port-accessor
	  generic-i/o-port-modifier
	  generic-i/o-port-type
	  generic-io/buffer-contents
	  generic-io/char-ready?
	  generic-io/flush-output
	  generic-io/peek-char
	  generic-io/read-char
	  generic-io/set-buffer-contents
	  generic-io/unread-char
	  make-generic-i/o-port
	  make-gstate
	  replace-binary-port!)
  (export (runtime file-i/o-port)
	  generic-i/o-port->binary-port
	  generic-i/o-port-type
	  make-generic-i/o-port
	  port-input-buffer
	  port-output-buffer
	  set-input-buffer-decoded-chars!
	  set-input-buffer-line!
	  set-input-buffer-peeked!
	  set-output-buffer-column!
	  set-output-buffer-line!)
  (export (runtime socket)
	  generic-i/o-port-type
	  generic-io/close-input
	  generic-io/close-output
	  make-generic-i/o-port)
  (export (runtime string-i/o-port)
	  generic-i/o-port-accessor
	  generic-i/o-port-type
	  make-generic-i/o-port)
  (export (runtime subprocess)
	  make-generic-i/o-port))

(define-package (runtime hash)
  (files "hash")
  (parent (runtime))
  (export deprecated ()
	  (hash-table/make make-object-hasher)
	  (object-hash hash-object)
	  (object-unhash unhash-object)
	  (unhash unhash-object)
	  (valid-hash-number? valid-object-hash?))
  (export ()
	  hash-object
	  make-object-hasher
	  object-hashed?
	  unhash-object
	  valid-object-hash?))

(define-package (runtime hash-table)
  (files "hash-table")
  (parent (runtime))
  (export deprecated ()
	  (eq-hash-table-type key-weak-eq-hash-table-type)
	  (eqv-hash-table-type key-weak-eqv-hash-table-type)
	  (hash-table-entry-type:key/datum-weak
	   hash-table-entry-type:key&datum-weak)
	  (hash-table/clean! hash-table-clean!)
	  (hash-table/clear! hash-table-clear!)
	  (hash-table/count hash-table-size)
	  (hash-table/datum-list hash-table-values)
	  (hash-table/for-each hash-table-walk)
	  (hash-table/get hash-table-ref/default)
	  (hash-table/intern! hash-table-intern!)
	  (hash-table/key-hash hash-table-hash-function)
	  (hash-table/key-list hash-table-keys)
	  (hash-table/key=? hash-table-equivalence-function)
	  (hash-table/put! hash-table-set!)
	  (hash-table/rehash-size hash-table-rehash-size)
	  (hash-table/rehash-threshold hash-table-rehash-threshold)
	  (hash-table/remove! hash-table-delete!)
	  (hash-table/size! hash-table-grow-size)
	  (hash-table/type hash-table-type)
	  (make-eq-hash-table make-key-weak-eq-hash-table)
	  (make-eqv-hash-table make-key-weak-eqv-hash-table)
	  (make-object-hash-table make-key-weak-eqv-hash-table)
	  (make-symbol-hash-table make-strong-eq-hash-table)
	  (make-weak-eq-hash-table make-key-weak-eq-hash-table)
	  (make-weak-eqv-hash-table make-key-weak-eqv-hash-table)
	  (set-hash-table/rehash-size! set-hash-table-rehash-size!)
	  (set-hash-table/rehash-threshold! set-hash-table-rehash-threshold!)
	  (weak-eq-hash-table-type key-weak-eq-hash-table-type)
	  (weak-eqv-hash-table-type key-weak-eqv-hash-table-type)
	  datum-weak-eq-hash-table-type
	  datum-weak-eqv-hash-table-type
	  eq-hash-mod
	  equal-hash-mod
	  equal-hash-table-type
	  eqv-hash-mod
	  hash-by-equal
	  hash-by-eqv
	  hash-table-entry-type-names
	  hash-table-entry-type:datum-ephemeral
	  hash-table-entry-type:datum-weak
	  hash-table-entry-type:key&datum-ephemeral
	  hash-table-entry-type:key&datum-weak
	  hash-table-entry-type:key-ephemeral
	  hash-table-entry-type:key-weak
	  hash-table-entry-type:strong
	  hash-table-type
	  hash-table-type?
	  hash-table/constructor
	  hash-table/lookup
	  hash-table/modify!
	  key-ephemeral-eq-hash-table-type
	  key-ephemeral-eqv-hash-table-type
	  key-weak-eq-hash-table-type
	  key-weak-eqv-hash-table-type
	  make-hash-table*
	  make-hash-table-type
	  make-hash-table-type*
	  non-pointer-hash-table-type
	  string-hash-table-type
	  strong-eq-hash-table-type
	  strong-eqv-hash-table-type
	  strong-hash-table/constructor
	  weak-hash-table/constructor)
  (export ()
	  (hash hash-by-equal)			    ;(srfi 69) (srfi 125)
	  (hash-table-exists? hash-table-contains?) ;(srfi 69) (srfi 125)
	  (hash-table-merge! hash-table-union!) ;(srfi 69) (srfi 125)
	  (number-hash eqv-hash)	;(srfi 128)
	  alist->hash-table		;(srfi 69) (srfi 125)
	  eq-hash
	  eqv-hash
	  hash-table			;(srfi 125)
	  hash-table->alist		;(srfi 69) (srfi 125)
	  hash-by-identity		;(srfi 69) (srfi 125)
	  hash-table-clean!
	  hash-table-clear!		;(srfi 69) (srfi 125)
	  hash-table-constructor
	  hash-table-contains?		;(srfi 125)
	  hash-table-copy		;(srfi 69) (srfi 125)
	  hash-table-count		;(srfi 125)
	  hash-table-delete!		;(srfi 69) (srfi 125)
	  hash-table-difference!	;(srfi 125)
	  hash-table-empty-copy		;(srfi 125)
	  hash-table-empty?		;(srfi 125)
	  hash-table-entries		;(srfi 125)
	  hash-table-equivalence-function ;(srfi 69) (srfi 125)
	  hash-table-every
	  hash-table-find		;(srfi 125)
	  hash-table-fold		;(srfi 69) (srfi 125)
	  hash-table-for-each		;(srfi 125)
	  hash-table-grow-size
	  hash-table-hash-function	;(srfi 69) (srfi 125)
	  hash-table-intern!		;(srfi 125)
	  hash-table-intersection!	;(srfi 125)
	  hash-table-keys		;(srfi 69) (srfi 125)
	  hash-table-map		;(srfi 125)
	  hash-table-map!		;(srfi 125)
	  hash-table-map->list		;(srfi 125)
	  hash-table-mutable?		;(srfi 125)
	  hash-table-pop!		;(srfi 125)
	  hash-table-prune!		;(srfi 125)
	  hash-table-ref		;(srfi 69) (srfi 125)
	  hash-table-ref/default	;(srfi 69) (srfi 125)
	  hash-table-rehash-size
	  hash-table-rehash-threshold
	  hash-table-set!		;(srfi 69) (srfi 125)
	  hash-table-shrink-size
	  hash-table-size		;(srfi 69) (srfi 125)
	  hash-table-unfold		;(srfi 125)
	  hash-table-union!		;(srfi 125)
	  hash-table-update!		;(srfi 69) (srfi 125)
	  hash-table-update!/default	;(srfi 69) (srfi 125)
	  hash-table-values		;(srfi 69) (srfi 125)
	  hash-table-walk		;(srfi 69) (srfi 125)
	  hash-table-xor!		;(srfi 125)
	  hash-table<=?
	  hash-table=?			;(srfi 125)
	  hash-table?			;(srfi 69) (srfi 125)
	  make-datum-weak-eq-hash-table
	  make-datum-weak-eqv-hash-table
	  make-equal-hash-table
	  make-hash-table		;(srfi 69) (srfi 125)
	  make-key-ephemeral-eq-hash-table
	  make-key-ephemeral-eqv-hash-table
	  make-key-weak-eq-hash-table
	  make-key-weak-eqv-hash-table
	  make-key-weak-list-eq-hash-table
	  make-key-weak-list-eqv-hash-table
	  make-non-pointer-hash-table
	  make-string-ci-hash-table
	  make-string-hash-table
	  make-strong-eq-hash-table
	  make-strong-eqv-hash-table
	  set-hash-table-rehash-size!
	  set-hash-table-rehash-threshold!))

(define-package (runtime memoizer)
  (files "memoizer")
  (parent (runtime))
  (export ()
	  clear-memoizer!
	  memoizer-procedure
	  memoizer-table
	  memoizer?
	  ordered-memoizer
	  unordered-memoizer
	  weak-ordered-memoizer
	  weak-unordered-memoizer))

(define-package (runtime history)
  (files "histry")
  (parent (runtime))
  (export ()
	  with-new-history)
  (export (runtime continuation-parser)
	  history-reductions
	  history-superproblem
	  history-transform
	  history-untransform))

(define-package (runtime compress)
  (file-case options
    ((load) "cpress")
    (else))
  (parent (runtime))
  (export ()
	  compress
	  uncompress
	  compress-ports))

(define-package (runtime binary-port)
  (files "binary-port")
  (parent (runtime))
  (export ()
	  binary-i/o-port?
	  binary-input-port?
	  binary-output-port?
	  binary-port-length
	  binary-port-position
	  binary-port?			;(scheme base)
	  call-with-output-bytevector
	  get-output-bytevector		;(scheme base)
	  open-input-bytevector		;(scheme base)
	  open-output-bytevector	;(scheme base)
	  peek-u8			;(scheme base)
	  read-bytevector		;(scheme base)
	  read-bytevector!		;(scheme base)
	  read-u8			;(scheme base)
	  set-binary-port-position!
	  textual->binary-port
	  u8-ready?			;(scheme base)
	  write-bytevector		;(scheme base)
	  write-u8			;(scheme base)
	  )
  (export (runtime)
	  binary-port-input-channel
	  binary-port-output-channel
	  binary-port-sink
	  binary-port-source
	  input-source-channel
	  input-source-custom-length
	  input-source-custom-ref
	  input-source-open?
	  input-source-port
	  input-source?
	  make-binary-port
	  make-channel-input-source
	  make-channel-output-sink
	  make-non-channel-input-source
	  make-non-channel-output-sink
	  output-sink-channel
	  output-sink-custom-length
	  output-sink-custom-ref
	  output-sink-port
	  output-sink?)
  (export (runtime port)
	  binary-input-port-channel
	  binary-input-port-open?
	  binary-output-port-channel
	  binary-output-port-open?
	  binary-port-metadata
	  close-binary-input-port
	  close-binary-output-port
	  close-binary-port)
  (export (runtime generic-i/o-port)
	  binary-input-port-at-eof?
	  binary-input-port-channel
	  binary-input-port-open?
	  binary-input-port-source
	  binary-input-port-buffer-contents
	  binary-output-port-buffered-byte-count
	  binary-output-port-channel
	  binary-output-port-open?
	  binary-output-port-sink
	  close-binary-input-port
	  close-binary-output-port
	  close-binary-port
	  flush-binary-output-port
	  input-source-has-bytes?
	  input-source-open?
	  input-source-read-bytes!
	  output-sink-open?
	  output-sink-write-bytes
	  set-binary-input-port-buffer-contents!
	  set-input-source-port!
	  set-output-sink-port!
	  synchronize-binary-output-port)
  (export (runtime file-i/o-port)
	  binary-port-length
	  binary-port-position
	  binary-port-positionable?
	  set-binary-port-position!)
  (export (runtime output-port)
	  flush-binary-output-port
	  synchronize-binary-output-port))

(define-package (runtime port)
  (files "textual-port")
  (parent (runtime))
  (export deprecated ()
	  (i/o-port-type? textual-i/o-port-type?)
	  (input-port-type? textual-input-port-type?)
	  (make-port make-textual-port)
	  (make-port-type make-textual-port-type)
	  (output-port-type? textual-output-port-type?)
	  (port-type/operation textual-port-type-operation)
	  (port-type/operation-names textual-port-type-operation-names)
	  (port-type/operations textual-port-type-operations)
	  (port-type? textual-port-type?)
	  (port/input-blocking-mode input-port-blocking-mode)
	  (port/input-terminal-mode input-port-terminal-mode)
	  (port/open? textual-port-open?)
	  (port/operation textual-port-operation)
	  (port/operation-names textual-port-operation-names)
	  (port/output-blocking-mode output-port-blocking-mode)
	  (port/output-terminal-mode output-port-terminal-mode)
	  (port/set-input-blocking-mode set-input-port-blocking-mode!)
	  (port/set-input-terminal-mode set-input-port-terminal-mode!)
	  (port/set-output-blocking-mode set-output-port-blocking-mode!)
	  (port/set-output-terminal-mode set-output-port-terminal-mode!)
	  (port/state textual-port-state)
	  (port/type textual-port-type)
	  (port/with-input-blocking-mode with-input-port-blocking-mode)
	  (port/with-input-terminal-mode with-input-port-terminal-mode)
	  (port/with-output-blocking-mode with-output-port-blocking-mode)
	  (port/with-output-terminal-mode with-output-port-terminal-mode)
	  set-current-input-port!
	  set-current-output-port!
	  set-interaction-i/o-port!
	  set-notification-output-port!
	  set-trace-output-port!
	  with-input-from-port
	  with-interaction-i/o-port
	  with-notification-output-port
	  with-output-to-port
	  with-trace-output-port)
  (export ()
	  call-with-port		;(scheme base)
	  close-input-port		;(scheme base)
	  close-output-port		;(scheme base)
	  close-port			;(scheme base)
	  current-error-port		;(scheme base)
	  current-input-port		;(scheme base)
	  current-output-port		;(scheme base)
	  i/o-port?
	  input-port-blocking-mode
	  input-port-open?		;(scheme base)
	  input-port-terminal-mode
	  input-port?			;(scheme base)
	  interaction-i/o-port
	  intern-port-property!
	  make-textual-port
	  make-textual-port-type
	  notification-output-port
	  output-port-blocking-mode
	  output-port-open?		;(scheme base)
	  output-port-terminal-mode
	  output-port?			;(scheme base)
	  port-properties
	  port-property
	  port/coding
	  port/known-coding?
	  port/known-codings
	  port/known-line-ending?
	  port/known-line-endings
	  port/line-ending
	  port/set-coding
	  port/set-line-ending
	  port/supports-coding?
	  port?				;(scheme base)
	  remove-port-property!
	  set-input-port-blocking-mode!
	  set-input-port-terminal-mode!
	  set-output-port-blocking-mode!
	  set-output-port-terminal-mode!
	  set-port-property!
	  textual-i/o-port?
	  textual-input-port?
	  textual-output-port?
	  textual-port-char-set
	  textual-port-open?
	  textual-port-operation
	  textual-port-operation-names
	  textual-port-thread-mutex
	  textual-port-type
	  textual-port?			;(scheme base)
	  set-textual-port-state!
	  textual-port-state
	  trace-output-port
	  with-input-port-blocking-mode
	  with-input-port-terminal-mode
	  with-output-port-blocking-mode
	  with-output-port-terminal-mode)
  (export (runtime)
	  input-port-channel
	  output-port-channel)
  (export (runtime input-port)
	  textual-input-port-open?
	  textual-port-operation
	  textual-port-operation/char-ready?
	  textual-port-operation/peek-char
	  textual-port-operation/read-char
	  textual-port-operation/read-substring
	  textual-port-operation/unread-char)
  (export (runtime output-port)
	  textual-output-port-open?
	  textual-port-operation
	  textual-port-operation/discretionary-flush-output
	  textual-port-operation/flush-output
	  textual-port-operation/fresh-line
	  textual-port-operation/line-start?
	  textual-port-operation/write-char
	  textual-port-operation/write-substring)
  (export (runtime transcript)
	  set-textual-port-transcript!
	  textual-port-transcript)
  (export (runtime mime-codec)
	  generic-port-operation:write-substring)
  (export (runtime emacs-interface)
	  set-textual-port-type!
	  textual-port-type-operation))

(define-package (runtime input-port)
  (files "input-port")
  (parent (runtime))
  (export deprecated ()
	  make-eof-object
	  read-substring!)
  (export ()
	  (discard-char read-char)
	  (input-port/discard-char input-port/read-char)
	  char-ready?			;(scheme base)
	  eof-object			;(scheme base)
	  eof-object?			;(scheme base)
	  input-port/char-ready?
	  input-port/line
	  input-port/discard-chars
	  input-port/eof?
	  input-port/peek-char
	  input-port/read-char
	  input-port/read-line
	  input-port/read-string
	  input-port/read-string!
	  input-port/read-substring!
	  input-port/unread-char
	  peek-char			;(scheme base)
	  read				;(scheme read)
	  read-char			;(scheme base)
	  read-char-no-hang
	  read-delimited-string
	  read-file
	  read-line			;(scheme base)
	  read-string			;(scheme base)
	  read-string!
	  unread-char))

(define-package (runtime output-port)
  (files "output-port")
  (parent (runtime))
  (export deprecated ()
	  (flush-output flush-output-port)
	  write-substring)
  (export ()
	  beep
	  call-with-truncated-output-port
	  clear
	  display			;(scheme write)
	  flush-output-port		;(scheme base)
	  fresh-line
	  newline			;(scheme base)
	  output-port/bytes-written
	  output-port/column
	  output-port/discretionary-flush
	  output-port/flush-output
	  output-port/fresh-line
	  output-port/line-start?
	  output-port/synchronize-output
	  output-port/write-char
	  output-port/write-string
	  output-port/write-substring
	  output-port/x-size
	  output-port/y-size
	  synchronize-output-port
	  write				;(scheme write)
	  write-char			;(scheme base)
	  write-line
	  write-shared			;(scheme write)
	  write-simple			;(scheme write)
	  write-string			;(scheme base)
	  write-strings-in-columns
	  write-strings-in-paragraph))

(define-package (runtime interrupt-handler)
  (files "interrupt")
  (parent (runtime))
  (export ()
	  event:console-resize)
  (export (runtime emacs-interface)
	  hook/^G-interrupt
	  hook/clean-input/flush-typeahead)
  (export (runtime command-line)
	  generate-suspend-file?)
  (export (runtime swank)
	  keyboard-interrupt-vector)
  (import (runtime thread)
	  handle-current-thread-events))

(define-package (runtime lambda-abstraction)
  (files "lambda")
  (parent (runtime))
  (export ()
	  make-scode-lambda
	  scode-lambda-body
	  scode-lambda-bound
	  scode-lambda-bound?
	  scode-lambda-components
	  scode-lambda-interface
	  scode-lambda-name
	  scode-lambda?
	  set-scode-lambda-body!)
  (export (runtime advice)
	  lambda-unwrap-body!
	  lambda-wrap-body!
	  lambda-wrapper-components)
  (export (runtime environment)
	  internal-lambda?
	  lambda-names-vector
	  make-slambda)
  (export (runtime unsyntaxer)
	  lambda-immediate-body))

(define-package (runtime alternative-lambda)
  (files "lambdx")
  (parent (runtime))
  (export ()
	  lambda-components*
	  lambda-components**
	  lambda-pattern/name
	  lambda-pattern/optional
	  lambda-pattern/required
	  lambda-pattern/rest
	  lambda-pattern?
	  make-lambda*
	  make-lambda**
	  make-lambda-pattern))

(define-package (runtime list)
  (files "list")
  (parent (runtime))
  (export deprecated ()
	  (improper-list? dotted-list?)
	  (make-initialized-list list-tabulate)
	  append-map*
	  append-map*!
	  fold-left
	  guarantee-list->length
	  guarantee-list-of-type
	  guarantee-list-of-type->length
	  map*
	  reduce-left)
  (export ()
	  (proper-list? list?)		;(srfi 1)
	  add-member-procedure
	  alist->alist-table
	  alist->keyword-list
	  alist-adjoiner
	  alist-adjoiner!
	  alist-cons			;(srfi 1)
	  alist-copy			;(srfi 1)
	  alist-delete			;(srfi 1)
	  alist-delete!			;(srfi 1)
	  alist-fold
	  alist-fold-right
	  alist-for-each
	  alist-table
	  alist-table->alist
	  alist-table-clear!
	  alist-table-contains?
	  alist-table-delete!
	  alist-table-empty?
	  alist-table-fold
	  alist-table-fold-right
	  alist-table-intern!
	  alist-table-key=
	  alist-table-keys
	  alist-table-map!
	  alist-table-prune!
	  alist-table-ref
	  alist-table-search
	  alist-table-set!
	  alist-table-size
	  alist-table-update!
	  alist-table-values
	  alist-table?
	  alist?
	  any-duplicates?
	  append			;(scheme base)
	  append!			;(srfi 1)
	  append-map			;(srfi 1)
	  append-map!			;(srfi 1)
	  assoc				;(scheme base)
	  association-procedure
	  assq				;(scheme base)
	  assv				;(scheme base)
	  caaaar			;(scheme cxr)
	  caaadr			;(scheme cxr)
	  caaar				;(scheme cxr)
	  caadar			;(scheme cxr)
	  caaddr			;(scheme cxr)
	  caadr				;(scheme cxr)
	  caar				;(scheme base)
	  cadaar			;(scheme cxr)
	  cadadr			;(scheme cxr)
	  cadar				;(scheme cxr)
	  caddar			;(scheme cxr)
	  cadddr			;(scheme cxr)
	  caddr				;(scheme cxr)
	  cadr				;(scheme base)
	  car				;(scheme base)
	  car+cdr			;(srfi 1)
	  cdaaar			;(scheme cxr)
	  cdaadr			;(scheme cxr)
	  cdaar				;(scheme cxr)
	  cdadar			;(scheme cxr)
	  cdaddr			;(scheme cxr)
	  cdadr				;(scheme cxr)
	  cdar				;(scheme base)
	  cddaar			;(scheme cxr)
	  cddadr			;(scheme cxr)
	  cddar				;(scheme cxr)
	  cdddar			;(scheme cxr)
	  cddddr			;(scheme cxr)
	  cdddr				;(scheme cxr)
	  cddr				;(scheme base)
	  cdr				;(scheme base)
	  circular-list			;(srfi 1)
	  circular-list?		;(srfi 1)
	  cons				;(scheme base)
	  cons*				;(srfi 1)
	  cons-last
	  cons-last!
	  decode-general-car-cdr
	  del-assoc
	  del-assoc!
	  del-assq
	  del-assq!
	  del-assv
	  del-assv!
	  delete			;(srfi 1)
	  delete!			;(srfi 1)
	  delete-association-procedure
	  delete-member-procedure
	  delq
	  delq!
	  delv
	  delv!
	  dotted-list?			;(srfi 1)
	  eighth			;(srfi 1)
	  encode-general-car-cdr
	  error:not-restricted-keyword-list
	  except-last-pair
	  except-last-pair!
	  fifth				;(srfi 1)
	  first				;(srfi 1)
	  fold				;(srfi 1)
	  fold-map
	  fold-right			;(srfi 1)
	  fold-right-map
	  for-each			;(scheme base)
	  fourth			;(srfi 1)
	  general-car-cdr
	  get-keyword-value
	  get-keyword-values
	  guarantee-restricted-keyword-list
	  iota				;(srfi 1)
	  keyword-list->alist
	  keyword-list-fold
	  keyword-list-fold-right
	  keyword-list?
	  keyword-option-parser
	  last				;(srfi 1)
	  last-pair			;(srfi 1)
	  length			;(scheme base)
	  length=?
	  list				;(scheme base)
	  list-copy			;(scheme base)
	  list-deletor
	  list-deletor!
	  list-of-type?
	  list-of-type?->length
	  list-of-unique-symbols?
	  list-ref			;(scheme base)
	  list-set!			;(scheme base)
	  list-tabulate			;(srfi 1)
	  list=				;(srfi 1)
	  list?				;(scheme base)
	  list?->length
	  make-circular-list
	  make-list			;(scheme base)
	  map				;(scheme base)
	  member			;(scheme base)
	  member-procedure
	  memq				;(scheme base)
	  memv				;(scheme base)
	  ninth				;(srfi 1)
	  non-empty-list?
	  not-pair?			;(srfi 1)
	  null-list?			;(srfi 1)
	  null?				;(scheme base)
	  pair?				;(scheme base)
	  reduce			;(srfi 1)
	  reduce-right			;(srfi 1)
	  restricted-keyword-list?
	  second			;(srfi 1)
	  set-car!			;(scheme base)
	  set-cdr!			;(scheme base)
	  seventh			;(srfi 1)
	  sixth				;(srfi 1)
	  sublist
	  tenth				;(srfi 1)
	  third				;(srfi 1)
	  tree-copy			;(srfi 1)
	  unique-keyword-list?
	  xcons				;(srfi 1)
	  ))

(define-package (runtime lambda-list)
  (files "lambda-list")
  (parent (runtime))
  (export ()
	  fold-r4rs-lambda-list
	  lambda-tag:aux
	  lambda-tag:key
	  lambda-tag:optional
	  lambda-tag:rest
	  lambda-tag?
	  make-lambda-list
	  map-mit-lambda-list
	  map-r4rs-lambda-list
	  mit-lambda-list?
	  parse-mit-lambda-list
	  parse-r4rs-lambda-list
	  r4rs-lambda-list-arity
	  r4rs-lambda-list-names
	  r4rs-lambda-list?))

(define-package (runtime srfi-1)
  (files "srfi-1")
  (parent (runtime))
  (export deprecated ()
	  (list-head take)
	  (reverse* append-reverse)
	  (reverse*! append-reverse!)
	  for-all?
	  there-exists?)
  (export ()
	  (list-tail drop)		;(scheme base)
	  any
	  append-reverse
	  append-reverse!
	  break
	  break!
	  concatenate
	  concatenate!
	  count
	  delete-duplicates
	  delete-duplicates!
	  drop
	  drop-right
	  drop-right!
	  drop-while
	  every
	  filter
	  filter!
	  filter-map
	  find
	  find-map
	  find-tail
	  length+
	  list-index
	  lset-adjoin
	  lset-diff+intersection
	  lset-diff+intersection!
	  lset-difference
	  lset-difference!
	  lset-intersection
	  lset-intersection!
	  lset-union
	  lset-union!
	  lset-xor
	  lset-xor!
	  lset<=
	  lset=
	  map!
	  map-in-order
	  pair-fold
	  pair-fold-right
	  pair-for-each
	  partition
	  partition!
	  remove
	  remove!
	  reverse			;(scheme base)
	  reverse!
	  span
	  span!
	  split-at
	  split-at!
	  take
	  take!
	  take-right
	  take-while
	  take-while!
	  unfold
	  unfold-right
	  unzip1
	  unzip2
	  unzip3
	  unzip4
	  unzip5
	  zip))

(define-package (runtime load)
  (files "load")
  (parent (runtime))
  (export deprecated ()
	  load/loading?
	  load/suppress-loading-message?)
  (export ()
	  (load-latest load)
	  (load-noisily load)
	  built-in-object-file
	  condition-type:not-loading
	  current-load-environment
	  current-load-pathname
	  fasl-file?
	  fasload
	  file-fasloadable?
	  file-loadable?
	  file-type-bci
	  file-type-bin
	  file-type-com
	  file-type-ext
	  file-type-inf
	  file-type-src
	  file-types:all-bci
	  file-types:all-bin
	  file-types:all-com
	  file-types:all-ext
	  file-types:all-inf
	  file-types:library
	  file-types:program
	  find-file-types
	  load				;(scheme load)
	  load-library-object-file
	  load/push-hook!
	  loadable-source-pathname
	  param:loading?
	  param:suppress-loading-message?
	  pathname-new-type-map
	  pathname-new-type-bci
	  pathname-new-type-bin
	  pathname-new-type-com
	  pathname-new-type-ext
	  pathname-new-type-inf
	  pathname-new-type-src
	  system-library-uri
	  system-uri
	  with-loader-base-uri)
  (export (runtime)
	  load/purification-root))

(define-package (runtime command-line)
  (files "command-line")
  (parent (runtime))
  (export ()
	  argument-command-line-parser
	  command-line			;(scheme process-context)
	  command-line-arguments
	  scheme-program-name
	  set-command-line-parser!
	  simple-command-line-parser))

(define-package (runtime microcode-errors)
  (files "microcode-errors")
  (parent (runtime error-handler))
  (export ()
	  condition-type:anomalous-microcode-error
	  condition-type:compiled-code-error
	  condition-type:fasdump-environment
	  condition-type:fasl-file-bad-data
	  condition-type:fasl-file-compiled-mismatch
	  condition-type:fasl-file-too-big
	  condition-type:fasload-band
	  condition-type:fasload-error
	  condition-type:hardware-trap
	  condition-type:inapplicable-object
	  condition-type:out-of-file-handles
	  condition-type:primitive-io-error
	  condition-type:primitive-procedure-error
	  condition-type:process-terminated-error
	  condition-type:system-call-error
	  condition-type:unimplemented-primitive
	  condition-type:unimplemented-primitive-for-os
	  condition-type:user-microcode-reset
	  condition-type:wrong-arity-primitives))

(define-package (runtime microcode-tables)
  (files "microcode-tables")
  (parent (runtime))
  (export deprecated ()
	  microcode-id/operating-system-name)
  (export ()
	  microcode-id/compiled-code-type
	  microcode-id/floating-epsilon
	  microcode-id/floating-mantissa-bits
	  microcode-id/floating-exponent-max
	  microcode-id/floating-exponent-min
	  microcode-id/machine-type
	  microcode-id/nonnegative-fixnum-length
	  microcode-id/nonnegative-fixnum-mask
	  microcode-id/operating-system
	  microcode-id/operating-system-suffix
	  microcode-id/operating-system-variant
	  microcode-type/code-limit)
  (export (runtime)
	  fixed-objects-accessor
	  fixed-objects-item
	  fixed-objects-item?
	  fixed-objects-modifier
	  fixed-objects-updater
	  microcode-type/code->name
	  microcode-type/name->code
	  set-fixed-objects-item!
	  update-fixed-objects-item!)
  (export (runtime continuation-parser)
	  microcode-return/code-limit)
  (export (runtime garbage-collector)
	  fixed-objects-vector-slot)
  (export (runtime gc-daemons)
	  fixed-objects-vector-slot)
  (export (runtime interrupt-handler)
	  fixed-objects-vector-slot
	  microcode-termination/code-limit)
  (export (runtime microcode-data)
	  microcode-error/name->code
	  microcode-return/code->name
	  microcode-return/name->code
	  microcode-termination/name->code)
  (export (runtime microcode-errors)
	  fixed-objects-vector-slot
	  microcode-error/code->name
	  microcode-error/code-limit
	  microcode-error/name->code
	  microcode-return/code->name
	  microcode-return/name->code
	  microcode-system-call-error/code->name
	  microcode-system-call-error/name->code
	  microcode-system-call/code->name)
  (export (runtime miscellaneous-global)
	  microcode-termination/code-limit
	  microcode-termination/name->code)
  (export (runtime save/restore)
	  read-microcode-identification!)
  (export (runtime version)
	  get-microcode-version))

(define-package (runtime number)
  (files "arith" "dragon4")
  (parent (runtime))
  (export deprecated ()
	  (flonum-unparser:engineering-output flonum-printer:engineering-output)
	  (flonum-unparser:normal-output flonum-printer:normal-output)
	  (flonum-unparser:scientific-output flonum-printer:scientific-output))
  (export ()
	  (-1+ complex:-1+)
	  (1+ complex:1+)
	  (abs complex:abs)		;(scheme base)
	  (acos complex:acos)		;(scheme inexact)
	  (acos/pi real:acos/pi)
	  (aexsec complex:aexsec)
	  (aexsec/pi real:aexsec/pi)
	  (angle complex:angle)		;(scheme complex)
	  (asin complex:asin)		;(scheme inexact)
	  (asin/pi real:asin/pi)
	  (aversin complex:aversin)
	  (aversin/pi real:aversin/pi)
	  (ceiling complex:ceiling)	;(scheme base)
	  (ceiling->exact complex:ceiling->exact)
	  (complex? complex:complex?)	;(scheme base)
	  (compound complex:compound)
	  (compoundm1 complex:compoundm1)
	  (conjugate complex:conjugate)
	  (copysign complex:copysign)
	  (cos complex:cos)		;(scheme inexact)
	  (cos-pi* real:cos-pi*)
	  (denominator complex:denominator) ;(scheme base)
	  (denominator->exact complex:denominator->exact)
	  (even? complex:even?)		;(scheme base)
	  (exact complex:inexact->exact) ;(scheme base)
	  (exact->inexact complex:exact->inexact)
	  (exact-rational? rat:rational?)
	  (exact? complex:exact?)	;(scheme base)
	  (exp complex:exp)		;(scheme inexact)
	  (exp10 complex:exp10)
	  (exp10m1 complex:exp10m1)
	  (exp2 complex:exp2)
	  (exp2m1 complex:exp2m1)
	  (expm1 complex:expm1)
	  (expt complex:expt)		;(scheme base)
	  (exsec complex:exsec)
	  (exsec-pi* real:exsec-pi*)
	  (finite? complex:finite?)	;(scheme inexact)
	  (floor complex:floor)		;(scheme base)
	  (floor->exact complex:floor->exact)
	  (imag-part complex:imag-part)	;(scheme complex)
	  (inexact complex:exact->inexact) ;(scheme base)
	  (inexact->exact complex:inexact->exact)
	  (infinite? complex:infinite?)	;(scheme inexact)
	  (integer-ceiling complex:integer-ceiling)
	  (integer-divide complex:divide)
	  (integer-floor complex:integer-floor)
	  (integer-round complex:integer-round)
	  (integer-truncate complex:quotient)
	  (integer? complex:integer?)	;(scheme base)
	  (log complex:log)		;(scheme inexact)
	  (log10 complex:log10)
	  (log10p1 complex:log10p1)
	  (log1p complex:log1p)
	  (log2 complex:log2)
	  (log2p1 complex:log2p1)
	  (logp1 complex:log1p)
	  (magnitude complex:magnitude)	;(scheme complex)
	  (make-polar complex:make-polar) ;(scheme complex)
	  (make-rectangular complex:make-rectangular) ;(scheme complex)
	  (nan? complex:nan?)           ;(scheme inexact)
	  (negative? complex:negative?)	;(scheme base)
	  (number:eqv? complex:eqv?)
	  (number? complex:complex?)	;(scheme base)
	  (numerator complex:numerator)	;(scheme base)
	  (numerator->exact complex:numerator->exact)
	  (positive? complex:positive?)	;(scheme base)
	  (rational? complex:rational?)	;(scheme base)
	  (rationalize complex:rationalize) ;(scheme base)
	  (rationalize->exact complex:rationalize->exact)
	  (real-part complex:real-part)	;(scheme complex)
	  (real? complex:real?)		;(scheme base)
	  (round complex:round)		;(scheme base)
	  (round->exact complex:round->exact)
	  (rsqrt complex:rsqrt)
	  (simplest-exact-rational complex:simplest-exact-rational)
	  (simplest-rational complex:simplest-rational)
	  (sin complex:sin)		;(scheme inexact)
	  (sin-pi* real:sin-pi*)
	  (sqrt complex:sqrt)		;(scheme inexact)
	  (sqrt1pm1 complex:sqrt1pm1)
	  (tan complex:tan)		;(scheme inexact)
	  (tan-pi* real:tan-pi*)
	  (truncate complex:truncate)	;(scheme base)
	  (truncate->exact complex:truncate->exact)
	  (versin complex:versin)
	  (versin-pi* real:versin-pi*)
	  (zero? complex:zero?)		;(scheme base)
	  *				;(scheme base)
	  +				;(scheme base)
	  -				;(scheme base)
	  /				;(scheme base)
	  <				;(scheme base)
	  <=				;(scheme base)
	  =				;(scheme base)
	  >				;(scheme base)
	  >=				;(scheme base)
	  atan				;(scheme inexact)
	  atan/pi
	  cube
	  exact-nonnegative-integer?
	  exact-positive-integer?
	  flo:acos/pi
	  flo:aexsec
	  flo:aexsec/pi
	  flo:asin/pi
	  flo:atan/pi
	  flo:atan2/pi
	  flo:aversin
	  flo:aversin/pi
	  flo:cos-pi*
	  flo:error-bound
	  flo:exp10m1
	  flo:exp2m1
	  flo:expm1
	  flo:exsec
	  flo:greatest-normal-exponent-base-10
	  flo:greatest-normal-exponent-base-2
	  flo:greatest-normal-exponent-base-e
	  flo:largest-positive-normal
	  flo:least-normal-exponent-base-10
	  flo:least-normal-exponent-base-2
	  flo:least-normal-exponent-base-e
	  flo:least-subnormal-exponent-base-10
	  flo:least-subnormal-exponent-base-2
	  flo:least-subnormal-exponent-base-e
	  flo:log-error-bound
	  flo:log10p1
	  flo:log1p
	  flo:log2p1
	  (flo:logp1 flo:log1p)
	  flo:normal-exponent-max
	  flo:normal-exponent-min
	  flo:precision
	  flo:radix
	  flo:radix.
	  flo:rsqrt
	  flo:significand-digits-base-10
	  flo:significand-digits-base-2
	  flo:sin-pi*
	  flo:smallest-positive-normal
	  flo:smallest-positive-subnormal
	  flo:sqrt1pm1
	  flo:subnormal-exponent-min
	  flo:tan-pi*
	  flo:ulp-of-one
	  flo:versin
	  flo:versin-pi*
	  flonum-printer:engineering-output
	  flonum-printer:normal-output
	  flonum-printer:scientific-output
	  flonum-unparser-cutoff
	  gcd				;(scheme base)
	  inexact?			;(scheme base)
	  integer-divide-quotient
	  integer-divide-remainder
	  lcm				;(scheme base)
	  log-logistic
	  log1mexp
	  log1pexp
	  logistic
	  logistic-1/2
	  logit
	  logit-exp
	  logit1/2+
	  logsumexp
	  max				;(scheme base)
	  min				;(scheme base)
	  modulo			;(scheme base)
	  non-negative?
	  non-positive?
	  number->string		;(scheme base)
	  odd?				;(scheme base)
	  param:flonum-printer-cutoff
	  quotient			;(scheme base)
	  remainder			;(scheme base)
	  square			;(scheme base)
	  ))

(define-package (runtime number interface)
  (file-case options
    ((load) "numint")
    (else))
  (parent (runtime number))
  (export ()
	  complex-package
	  integer-package
	  make-accumulation-operator
	  make-arithmetic-package
	  make-inverse-accumulation-operator
	  rational-package
	  real-package))

(define-package (runtime number-parser)
  (files "numpar")
  (parent (runtime))
  (export ()
	  flonum-parser-fast?
	  string->number		;(scheme base)
	  substring->number))

(define-package (runtime options)
  (files "option")
  (parent (runtime))
  (export ()
	  *initial-options-file*
	  define-load-option
	  dummy-option-loader
	  further-load-options
	  load-option
	  local-load-options
	  option-loaded?
	  standard-load-options
	  standard-option-loader
	  standard-system-loader))

(define-package (runtime reader)
  (files "reader")
  (parent (runtime))
  (export deprecated ()
	  (param:parser-canonicalize-symbols? param:reader-fold-case?)
	  *parser-associate-positions?*
	  *parser-canonicalize-symbols?*
	  *parser-radix*)
  (export ()
	  condition-type:read-error
	  param:reader-associate-positions?
	  param:reader-enable-attributes?
	  param:reader-fold-case?
	  param:reader-keyword-style
	  param:reader-radix
	  read-error?			;(scheme base)
	  )
  (export (runtime)
	  define-bracketed-reader-method)
  (export (runtime input-port)
	  read-top-level)
  (export (runtime swank)
	  get-param:reader-fold-case?)
  (export (runtime printer)
	  get-param:reader-fold-case?))

(define-package (runtime file-attributes)
  (files "file-attributes")
  (parent (runtime))
  (export (runtime)
	  parse-file-attributes-string))

(define-package (runtime pathname)
  (files "pathname")
  (parent (runtime))
  (export ()
	  *default-pathname-defaults*
	  ->namestring
	  ->pathname
	  ->truename
	  directory-namestring
	  directory-pathname
	  directory-pathname-as-file
	  directory-pathname?
	  enough-namestring
	  enough-pathname
	  file-namestring
	  file-pathname
	  host-namestring
	  host/type-name
	  host=?
	  host?
	  init-file-pathname
	  local-host
	  make-pathname
	  merge-pathnames
	  param:default-pathname-defaults
	  parse-namestring
	  pathname->uri
	  pathname-absolute?
	  pathname-as-directory
	  pathname-default
	  pathname-default-device
	  pathname-default-directory
	  pathname-default-name
	  pathname-default-type
	  pathname-default-version
	  pathname-device
	  pathname-directory
	  pathname-hash
	  pathname-host
	  pathname-name
	  pathname-new-device
	  pathname-new-directory
	  pathname-new-name
	  pathname-new-type
	  pathname-new-version
	  pathname-relative?
	  pathname-simplify
	  pathname-type
	  pathname-version
	  pathname-wild?
	  pathname=?
	  pathname?
	  system-library-directory-pathname
	  system-library-pathname
	  uri->pathname
	  user-homedir-pathname)
  (export (runtime compiler-info)
	  %make-host
	  %make-pathname)
  (export (runtime options)
	  library-directory-path)
  (export (runtime load)
	  library-directory-path))

(define-package (runtime pathname unix)
  (files "unix-pathname")
  (parent (runtime pathname)))

(define-package (runtime pathname dos)
  (files "dos-pathname")
  (parent (runtime pathname)))

(define-package (runtime population)
  (files "poplat")
  (parent (runtime))
  (import (runtime gc-daemons)
	  add-secondary-gc-daemon!/unsafe)
  (export ()
	  add-new-to-population!
	  add-to-population!
	  empty-population!
	  exists-an-inhabitant?
	  for-all-inhabitants?
	  (for-each-inhabitant map-over-population!)
	  make-population
	  make-serial-population
	  map-over-population
	  map-over-population!
	  population?
	  remove-from-population!))

(define-package (runtime pretty-printer)
  (files "pp")
  (parent (runtime))
  (export ()
	  *pp-arity-dispatched-procedure-style*
	  *pp-auto-highlighter*
	  *pp-avoid-circularity?*
	  *pp-default-as-code?*
	  *pp-forced-x-size*
	  *pp-lists-as-tables?*
	  *pp-named-lambda->define?*
	  *pp-no-highlights?*
	  *pp-primitives-by-name*
	  *pp-save-vertical-space?*
	  *pp-uninterned-symbols-by-name*
	  make-pretty-printer-highlight
	  param:pp-named-lambda->define?
	  param:pp-primitives-by-name?
	  param:pp-uninterned-symbols-by-name?
	  param:pp-no-highlights?
	  param:pp-save-vertical-space?
	  param:pp-lists-as-tables?
	  param:pp-forced-x-size
	  param:pp-avoid-circularity?
	  param:pp-default-as-code?
	  param:pp-auto-highlighter
	  pp
	  pp-description
	  pretty-print))

(define-package (runtime primitive-io)
  (files "primitive-io")
  (parent (runtime))
  (export ()
	  all-dld-handles
	  all-open-channels
	  channel-blocking
	  channel-blocking?
	  channel-close
	  channel-closed?
	  channel-file-length
	  channel-file-position
	  channel-file-set-position
	  channel-file-truncate
	  channel-has-input?
	  channel-nonblocking
	  channel-open?
	  channel-port
	  channel-read
	  channel-read-block
	  channel-synchronize
	  channel-table
	  channel-type
	  channel-type=directory?
	  channel-type=file?
	  channel-type=terminal?
	  channel-type=unknown?
	  channel-write
	  channel-write-block
	  channel?
	  close-all-open-channels
	  close-all-open-files
	  directory-channel-close
	  directory-channel-open
	  directory-channel-read
	  directory-channel-read-matching
	  directory-channel?
	  dld-get-scheme-handle
	  dld-handle-pathname
	  dld-handle-valid?
	  dld-handle?
	  dld-load-file
	  dld-loaded-file?
	  dld-lookup-symbol
	  dld-unload-file
	  file-open-append-channel
	  file-open-exclusive-output-channel
	  file-open-input-channel
	  file-open-io-channel
	  file-open-output-channel
	  find-dld-handle
	  guarantee-valid-dld-handle
	  make-pipe
	  open-pty-master
	  pty-master-continue
	  pty-master-hangup
	  pty-master-interrupt
	  pty-master-kill
	  pty-master-quit
	  pty-master-send-signal
	  pty-master-stop
	  set-channel-port!
	  set-terminal-input-baud-rate!
	  set-terminal-output-baud-rate!
	  terminal-cooked-input
	  terminal-cooked-input?
	  terminal-cooked-output
	  terminal-cooked-output?
	  terminal-drain-output
	  terminal-flush-input
	  terminal-flush-output
	  terminal-get-state
	  terminal-input-baud-rate
	  terminal-output-baud-rate
	  terminal-raw-input
	  terminal-raw-output
	  terminal-set-state
	  test-for-io-on-channel
	  test-for-io-on-descriptor
	  with-channel-blocking)
  (export (runtime console-i/o-port)
	  tty-input-channel
	  tty-output-channel
	  tty-error-channel)
  (export (runtime emacs-interface)
	  channel-descriptor)
  (export (runtime load)
	  channel-descriptor)
  (export (runtime socket)
	  channel-descriptor
	  open-channel)
  (export (runtime subprocess)
	  channel-descriptor)
  (export (runtime microcode-errors)
	  port-error-test)
  (export (runtime thread)
	  add-to-select-registry!
	  have-select?
	  make-select-registry
	  remove-from-select-registry!
	  test-select-registry)
  (import (runtime thread)
	  %deregister-io-descriptor)
  (import (runtime gc-finalizer)
	  with-gc-finalizer-lock
	  remove-from-locked-gc-finalizer!)
  (export (runtime directory)
	  directory-channel/descriptor))

(define-package (runtime ffi)
  (parent (runtime))
  (files "ffi")
  (export ()
	  alien-byte-increment
	  alien-byte-increment!
	  alien-function/name
	  alien-function?
	  alien-hash
	  alien-null!
	  alien-null?
	  alien/address-string
	  alien/ctype
	  alien=?
	  alien?
	  c-cast
	  c-enum-name
	  c-peek-bytes
	  c-peek-cstring
	  c-peek-cstring!
	  c-peek-cstringp
	  c-peek-cstringp!
	  c-peek-csubstring
	  c-poke-bytes
	  c-poke-pointer
	  c-poke-pointer!
	  c-poke-string
	  c-poke-string!
	  call-alien
	  copy-alien
	  copy-alien-address!
	  de-register-c-callback
	  error:not-alien
	  error:not-alien-function
	  free
	  generate-shim
	  guarantee-alien
	  guarantee-alien-function
	  make-alien
	  make-alien-to-free
	  malloc
	  null-alien
	  outf-error
	  plugin-available?
	  register-c-callback
	  set-alien/ctype!
	  add-plugin
	  remove-plugin
	  delete-plugin-list
	  update-plugin-indices))

(define-package (runtime program-copier)
  (files "prgcop")
  (parent (runtime))
  (export ()
	  copy-program))

(define-package (runtime random-number)
  (files "random")
  (parent (runtime))
  (export deprecated ()
	  (flo:random-unit flo:random-unit-open))
  (export ()
	  (random-source-state-ref export-random-state)
	  (random-source? random-state?)
	  *random-state*
	  default-random-source
	  export-random-state
	  flo:random-unit-closed
	  flo:random-unit-open
	  import-random-state
	  make-random-source
	  make-random-state
	  random
	  random-bytevector
	  random-bytevector!
	  random-integer
	  random-real
	  random-source-make-integers
	  random-source-make-reals
	  random-source-pseudo-randomize!
	  random-source-randomize!
	  random-source-state-set!
	  random-state?))

(define-package (runtime record)
  (files "record")
  (parent (runtime))
  (export deprecated ()
	  (new-make-record-type make-record-type) ;RELNOTE: delete
	  (record-copy copy-record)
	  (record-updater record-modifier)
	  set-record-type-unparser-method!)
  (export ()
	  applicable-record?
	  condition-type:no-such-slot
	  condition-type:slot-error
	  condition-type:uninitialized-slot
	  copy-record
	  define-structure/default-value-by-index
	  define-structure/keyword-constructor
	  define-structure/list-accessor
	  define-structure/list-modifier
	  define-structure/vector-accessor
	  define-structure/vector-modifier
	  make-define-structure-type
	  make-record-type
	  named-list?
	  named-structure/set-tag-description!
	  named-structure?
	  named-vector?
	  new-make-define-structure-type ;RELNOTE: rename without "new-"
	  record-accessor
	  record-applicator
	  record-constructor
	  record-keyword-constructor
	  record-modifier
	  record-predicate
	  record-type-default-value-by-index
	  record-type-descriptor
	  record-type-field-names
	  record-type-field-specs
	  record-type-name
	  record-type-parent
	  record-type?
	  record?)
  (export (runtime)
	  error:no-such-slot
	  error:uninitialized-slot
	  record-type-field-index)
  (export (runtime pathname)
	  record-type-proxy:host
	  record-type-proxy:pathname))

(define-package (runtime reference-trap)
  (files "reference-trap")
  (parent (runtime))
  (export ()
	  cached-reference-trap-value
	  cached-reference-trap?
	  macro-reference-trap-transformer
	  macro-reference-trap?
	  make-macro-reference-trap
	  make-unassigned-reference-trap
	  make-unbound-reference-trap
	  make-unmapped-macro-reference-trap
	  make-unmapped-unassigned-reference-trap
	  make-unmapped-unbound-reference-trap
	  map-reference-trap
	  map-reference-trap-value
	  reference-trap-kind
	  reference-trap-kind-name
	  reference-trap?
	  unassigned-reference-trap?
	  unbound-reference-trap?
	  unmap-reference-trap
	  unmapped-macro-reference-trap?
	  unmapped-unassigned-reference-trap?
	  unmapped-unbound-reference-trap?)
  (export (runtime syntax)
	  make-macro-reference-trap-expression)
  (export (runtime unsyntaxer)
	  macro-reference-trap-expression-transformer
	  macro-reference-trap-expression?)
  (export (runtime miscellaneous-global)
	  trap-max-immediate))

(define-package (runtime rep)
  (files "rep")
  (parent (runtime))
  (export ()
	  (interaction-environment nearest-repl/environment) ;(scheme repl)
	  abort->nearest
	  abort->previous
	  abort->top-level
	  bkpt
	  breakpoint
	  breakpoint-procedure
	  breakpoint/environment
	  cmdl-interrupt/abort-nearest
	  cmdl-interrupt/abort-previous
	  cmdl-interrupt/abort-top-level
	  cmdl-interrupt/breakpoint
	  cmdl-message/active
	  cmdl-message/append
	  cmdl-message/null
	  cmdl-message/strings
	  cmdl/base
	  cmdl/batch-mode?
	  cmdl/driver
	  cmdl/level
	  cmdl/operation
	  cmdl/operation-names
	  cmdl/parent
	  cmdl/port
	  cmdl/properties
	  cmdl/start
	  cmdl/state
	  cmdl?
	  condition-type:breakpoint
	  condition/breakpoint?
	  default/repl-eval
	  default/repl-read
	  default/repl-write
	  ge
	  hook/repl-eval
	  hook/repl-read
	  hook/repl-write
	  in
	  initial-top-level-repl
	  make-cmdl
	  make-repl
	  make-repl-history
	  make-repl-message
	  nearest-cmdl
	  nearest-cmdl/batch-mode?
	  nearest-cmdl/level
	  nearest-cmdl/port
	  nearest-repl
	  nearest-repl/condition
	  nearest-repl/environment
	  out
	  param:standard-breakpoint-hook
	  pe
	  proceed
	  push-cmdl
	  push-repl
	  re
	  read-eval-print
	  repl-eval
	  repl-eval/write
	  repl-get-hash-number
	  repl-history/read
	  repl-history/record!
	  repl-history/size
	  repl-printer-history-size
	  repl-read
	  repl-reader-history-size
	  repl-scode-eval
	  repl-write
	  repl/condition
	  repl/environment
	  repl/parent
	  repl/printer-history
	  repl/prompt
	  repl/reader-history
	  repl/start
	  repl:allow-restart-notifications?
	  repl:write-result-hash-numbers?
	  repl?
	  restart
	  run-in-nearest-repl
	  set-repl/environment!
	  set-repl/prompt!
	  signal-breakpoint
	  standard-breakpoint-handler
	  standard-breakpoint-hook
	  ve
	  with-repl-eval-boundary)
  (export (runtime)
	  nearest-repl/named-environment)
  (export (runtime debugger)
	  write-restarts)
  (export (runtime emacs-interface)
	  hook/error-decision
	  set-cmdl/port!)
  (export (runtime miscellaneous-global)
	  root-continuation)
  (export (runtime working-directory)
	  cmdl/set-default-directory))

(define-package (runtime rep ui)
  (files "rep-ui")
  (parent (runtime rep))
  (export (runtime rep)
	  handle-rep-escape
	  rep-escape?))

(define-package (runtime save/restore)
  (files "savres")
  (parent (runtime))
  (export ()
	  disk-restore
	  disk-save
	  identify-world)
  (export (runtime gc-daemons)
	  *within-restore-window?*)
  (export (runtime user-interface)
	  *within-restore-window?*))

(define-package (runtime scode)
  (files "scode")
  (parent (runtime))
  (export ()
	  make-scode-absolute-reference
	  make-scode-access
	  make-scode-assignment
	  make-scode-block-declaration
	  make-scode-combination
	  make-scode-comment
	  make-scode-conditional
	  make-scode-declaration
	  make-scode-definition
	  make-scode-delay
	  make-scode-disjunction
	  make-scode-quotation
	  make-scode-sequence
	  make-scode-the-environment
	  make-scode-unassigned?
	  make-scode-variable
	  scode-absolute-reference-name
	  scode-absolute-reference-to?
	  scode-absolute-reference?
	  scode-access-environment
	  scode-access-name
	  scode-access?
	  scode-assignment-name
	  scode-assignment-value
	  scode-assignment?
	  scode-block-declaration-text
	  scode-block-declaration?
	  scode-combination-operands
	  scode-combination-operator
	  scode-combination?
	  scode-comment-expression
	  scode-comment-text
	  scode-comment?
	  scode-conditional-alternative
	  scode-conditional-consequent
	  scode-conditional-predicate
	  scode-conditional?
	  scode-constant?
	  scode-declaration-expression
	  scode-declaration-text
	  scode-declaration?
	  scode-definition-name
	  scode-definition-value
	  scode-definition?
	  scode-delay-expression
	  scode-delay?
	  scode-disjunction-alternative
	  scode-disjunction-predicate
	  scode-disjunction?
	  scode-expression?
	  scode-lambda-name:fluid-let
	  scode-lambda-name:internal-lambda
	  scode-lambda-name:let
	  scode-lambda-name:unnamed
	  scode-quotation-expression
	  scode-quotation?
	  scode-sequence-actions
	  scode-sequence?
	  scode-the-environment?
	  scode-unassigned?-name
	  scode-unassigned??
	  scode-variable-name
	  scode-variable-safe?
	  scode-variable?
	  undefined-scode-conditional-branch)
  (export (runtime lambda-abstraction)
	  set-scode-comment-expression!))

(define-package (runtime scode-data)
  (files "sdata")
  (parent (runtime))
  (export (runtime lambda-abstraction)
	  &pair-car
	  &pair-cdr
	  &pair-set-car!
	  &pair-set-cdr!
	  &triple-first
	  &triple-second
	  &triple-set-first!
	  &triple-set-second!
	  &triple-set-third!
	  &triple-third
	  &typed-pair-cons
	  &typed-triple-cons)
  (export (runtime scode-scan)
	  &pair-car
	  &pair-cdr
	  &pair-set-car!
	  &pair-set-cdr!
	  &triple-first
	  &triple-second
	  &triple-set-first!
	  &triple-set-second!
	  &triple-set-third!
	  &triple-third
	  &typed-pair-cons
	  &typed-triple-cons)
  (export (runtime debugging-info)
	  &pair-car
	  &pair-cdr
	  &triple-first
	  &triple-second
	  &triple-third
	  &vector-ref))

(define-package (runtime scode-scan)
  (files "scan")
  (parent (runtime))
  (export ()
	  make-scode-open-block
	  scan-defines
	  scode-open-block-actions
	  scode-open-block-declarations
	  scode-open-block-names
	  scode-open-block?
	  unscan-defines))

(define-package (runtime scode-walker)
  (files "codwlk")
  (parent (runtime))
  (export ()
	  make-scode-walker
	  scode-walk
	  scode-walker?))

(define-package (runtime socket)
  (files "socket")
  (parent (runtime))
  (export ()
	  allocate-host-address
	  bind-tcp-server-socket
	  canonical-host-name
	  close-tcp-server-socket
	  close-unix-server-socket
	  create-tcp-server-socket
	  get-host-by-address
	  get-host-by-name
	  get-host-name
	  host-address-any
	  host-address-loopback
	  listen-tcp-server-socket
	  open-binary-tcp-stream-socket
	  open-binary-unix-stream-socket
	  open-tcp-server-socket
	  open-tcp-stream-socket
	  open-tcp-stream-socket-channel
	  open-unix-server-socket
	  open-unix-stream-socket
	  open-unix-stream-socket-channel
	  os/hostname
	  tcp-server-binary-connection-accept
	  tcp-server-connection-accept
	  unix-server-binary-connection-accept
	  unix-server-connection-accept))

(define-package (runtime subprocess)
  (file-case options
    ((load) "process")
    (else))
  (parent (runtime))
  (export ()
	  deregister-subprocess-event
	  make-subprocess
	  process-environment-bind
	  register-subprocess-event
	  run-subprocess-in-foreground
	  scheme-subprocess-environment
	  start-batch-subprocess
	  start-pipe-subprocess
	  start-pty-subprocess
	  start-subprocess-in-background
	  subprocess-arguments
	  subprocess-binary-i/o-port
	  subprocess-continue-background
	  subprocess-continue-foreground
	  subprocess-delete
	  subprocess-exit-reason
	  subprocess-filename
	  subprocess-get
	  subprocess-hangup
	  subprocess-i/o-port
	  subprocess-id
	  subprocess-input-channel
	  subprocess-input-port
	  subprocess-interrupt
	  subprocess-job-control-available?
	  subprocess-job-control-status
	  subprocess-kill
	  subprocess-list
	  subprocess-output-channel
	  subprocess-output-port
	  subprocess-properties
	  subprocess-pty-master
	  subprocess-put!
	  subprocess-quit
	  subprocess-remove!
	  subprocess-signal
	  subprocess-status
	  subprocess-stop
	  subprocess-wait
	  subprocess?)
  (export (runtime primitive-io)
	  handle-subprocess-status-change)
  (export (runtime socket)
	  handle-subprocess-status-change)
  (export (runtime thread)
	  deregister-subprocess-events
	  %handle-subprocess-status-change)
  (import (runtime thread)
	  %maybe-toggle-thread-timer
	  %signal-thread-event
	  subprocess-registrations
	  subprocess-support-loaded?))

(define-package (runtime synchronous-subprocess)
  (file-case options
    ((load) "syncproc")
    (else))
  (parent (runtime))
  (import (runtime primitive-io)
	  channel-descriptor-for-select)
  (export ()
	  condition-type:subprocess-abnormal-termination
	  condition-type:subprocess-signalled
	  condition-type:subprocess-stopped
	  run-shell-command
	  run-synchronous-subprocess))

(define-package (runtime graphics)
  (files "graphics")
  (parent (runtime))
  (export ()
	  enumerate-graphics-types
	  graphics-bind-drawing-mode
	  graphics-bind-line-style
	  graphics-clear
	  graphics-close
	  graphics-coordinate-limits
	  graphics-device-coordinate-limits
	  graphics-device/descriptor
	  graphics-device/properties
	  graphics-device?
	  graphics-disable-buffering
	  graphics-drag-cursor
	  graphics-draw-line
	  graphics-draw-point
	  graphics-draw-text
	  graphics-enable-buffering
	  graphics-erase-point
	  graphics-flush
	  graphics-move-cursor
	  graphics-operation
	  graphics-reset-clip-rectangle
	  graphics-set-clip-rectangle
	  graphics-set-coordinate-limits
	  graphics-set-drawing-mode
	  graphics-set-line-style
	  graphics-type
	  (graphics-type? graphics-device-type?)
	  graphics-type-available?
	  graphics-type-name
	  graphics-type-properties
	  image-type
	  image/create
	  image/descriptor
	  image/destroy
	  image/draw
	  image/draw-subimage
	  image/fill-from-byte-vector
	  image/height
	  image/width
	  image?
	  make-graphics-device
	  make-graphics-device-type))

(define-package (runtime x-graphics)
  (file-case os-type
    ((unix) "x11graph")
    (else))
  (parent (runtime))
  (export deprecated ()
	  create-x-colormap
	  create-x-image
	  x-character-bounds/ascent
	  x-character-bounds/descent
	  x-character-bounds/lbearing
	  x-character-bounds/rbearing
	  x-character-bounds/width
	  x-close-all-displays
	  x-colormap/allocate-color
	  x-colormap/free
	  x-colormap/query-color
	  x-colormap/store-color
	  x-colormap/store-colors
	  x-colormap?
	  x-display/name
	  x-display/properties
	  x-font-structure/all-chars-exist?
	  x-font-structure/character-bounds
	  x-font-structure/default-char
	  x-font-structure/direction
	  x-font-structure/max-ascent
	  x-font-structure/max-bounds
	  x-font-structure/max-descent
	  x-font-structure/min-bounds
	  x-font-structure/name
	  x-font-structure/start-index
	  x-geometry-string
	  x-graphics-default-display-name
	  x-graphics-default-geometry
	  x-graphics-device-type
	  x-graphics/available?
	  x-graphics/clear
	  x-graphics/close-display
	  x-graphics/close-window
	  x-graphics/color?
	  x-graphics/coordinate-limits
	  x-graphics/copy-area
	  x-graphics/device-coordinate-limits
	  x-graphics/disable-keyboard-focus
	  x-graphics/discard-events
	  x-graphics/display
	  x-graphics/drag-cursor
	  x-graphics/draw-arc
	  x-graphics/draw-circle
	  x-graphics/draw-line
	  x-graphics/draw-lines
	  x-graphics/draw-point
	  x-graphics/draw-points
	  x-graphics/draw-text
	  x-graphics/enable-keyboard-focus
	  x-graphics/fill-circle
	  x-graphics/flush
	  x-graphics/font-structure
	  x-graphics/get-colormap
	  x-graphics/get-default
	  x-graphics/iconify-window
	  x-graphics/image-depth
	  x-graphics/lower-window
	  x-graphics/map-window
	  x-graphics/move-cursor
	  x-graphics/move-window
	  x-graphics/open-display
	  x-graphics/open-display?
	  x-graphics/open-window?
	  x-graphics/query-pointer
	  x-graphics/raise-window
	  x-graphics/read-button
	  x-graphics/read-user-event
	  x-graphics/reset-clip-rectangle
	  x-graphics/resize-window
	  x-graphics/select-user-events
	  x-graphics/set-background-color
	  x-graphics/set-border-color
	  x-graphics/set-border-width
	  x-graphics/set-clip-rectangle
	  x-graphics/set-colormap
	  x-graphics/set-coordinate-limits
	  x-graphics/set-drawing-mode
	  x-graphics/set-font
	  x-graphics/set-foreground-color
	  x-graphics/set-icon-name
	  x-graphics/set-input-hint
	  x-graphics/set-internal-border-width
	  x-graphics/set-line-style
	  x-graphics/set-mouse-color
	  x-graphics/set-mouse-shape
	  x-graphics/set-window-name
	  x-graphics/visual-info
	  x-graphics/window-id
	  x-graphics/withdraw-window
	  x-graphics:auto-raise?
	  x-image/destroy
	  x-image/draw
	  x-image/draw-subimage
	  x-image/fill-from-byte-vector
	  x-image/get-pixel
	  x-image/height
	  x-image/set-pixel
	  x-image/width
	  x-image?
	  x-visual-class:direct-color
	  x-visual-class:gray-scale
	  x-visual-class:pseudo-color
	  x-visual-class:static-color
	  x-visual-class:static-gray
	  x-visual-class:true-color
	  x-visual-info/bits-per-rgb
	  x-visual-info/blue-mask
	  x-visual-info/class
	  x-visual-info/colormap-size
	  x-visual-info/depth
	  x-visual-info/green-mask
	  x-visual-info/red-mask
	  x-visual-info/screen
	  x-visual-info/visual
	  x-visual-info/visual-id))

(define-package (runtime state-space)
  (files "wind")
  (parent (runtime))
  (export ()
	  dynamic-wind			;(scheme base)
	  shallow-fluid-bind)
  (export (runtime continuation)
	  get-dynamic-state
	  set-dynamic-state!)
  (export (runtime continuation-parser)
	  %translate-to-state-point
	  merge-dynamic-state)
  (export (runtime thread)
	  current-state-point
	  make-state-space
	  state-space:local
	  translate-to-state-point))

(define-package (runtime dynamic)
  (files "dynamic")
  (parent (runtime))
  (export ()
	  (make-parameter make-unsettable-parameter) ;(scheme base)
	  copy-parameter
	  default-parameter-converter
	  default-parameter-merger
	  default-parameter-getter
	  default-parameter-setter
	  parameter-converter
	  parameter?
	  make-forwarding-parameter
	  make-general-parameter
	  make-settable-parameter
	  make-unsettable-parameter
	  parameterize*))

(define-package (runtime stream)
  (files "stream")
  (parent (runtime))
  (export ()
	  condition-type:illegal-stream-element
	  empty-stream?
	  head
	  list->stream
	  make-prime-numbers-stream
	  prime-numbers-stream
	  stream
	  stream->list
	  stream-accumulate
	  stream-append
	  stream-append-map
	  stream-car
	  stream-cdr
	  stream-filter
	  stream-first
	  stream-for-each
	  stream-head
	  stream-last
	  stream-last-pair
	  stream-length
	  stream-map
	  stream-null?
	  stream-pair?
	  stream-ref
	  stream-rest
	  stream-tail
	  stream-truncate
	  stream-write
	  tail
	  the-empty-stream))

(define-package (runtime string-i/o-port)
  (files "string-io")
  (parent (runtime))
  (export deprecated ()
	  (get-output-from-accumulator get-output-string!)
	  (make-accumulator-output-port open-output-string)
	  (string->input-port open-input-string)
	  (with-string-output-port call-with-output-string)
	  with-input-from-string
	  with-output-to-string
	  with-output-to-truncated-string)
  (export ()
	  call-with-input-string
	  call-with-output-string
	  call-with-truncated-output-string
	  get-output-string		;(scheme base)
	  get-output-string!
	  open-input-string		;(scheme base)
	  open-output-string		;(scheme base)
	  pp-to-string
	  read-from-string
	  write-to-string))

(define-package (runtime syntax)
  (files)
  (parent (runtime)))

(define-package (runtime syntax top-level)
  (files "syntax")
  (parent (runtime syntax))
  (export ()
	  (make-synthetic-identifier new-identifier)
	  capture-syntactic-environment
	  close-syntax
	  identifier->symbol
	  identifier=?
	  identifier?
	  make-syntactic-closure
	  new-identifier
	  param:trace-syntax?
	  reverse-syntactic-environments
	  strip-syntactic-closures
	  syntactic-closure-form
	  syntactic-closure-free
	  syntactic-closure-senv
	  syntactic-closure?
	  syntax
	  syntax*
	  syntax-error			;(scheme base)
	  )
  (export (runtime library)
	  syntax-library-forms)
  (export (runtime syntax)
	  apply-classifier-item
	  biselect-cadr
	  biselect-car
	  biselect-cddr
	  biselect-cdr
	  biselect-list-elts
	  biselector:cadddr
	  biselector:caddr
	  biselector:cadr
	  biselector:car
	  biselector:cddddr
	  biselector:cdddr
	  biselector:cddr
	  biselector:cdr
	  biselector:cr
	  classify-form
	  hist-cadr
	  hist-car
	  hist-cddr
	  hist-cdr
	  hist-reduce
	  hist-select
	  initial-hist
	  reclassify
	  serror
	  serror-ctx
	  serror-ctx-form
	  serror-ctx-hist
	  serror-ctx-senv
	  serror-ctx?
	  smap
	  subform-select
	  trace-reduce)
  (export (runtime syntax parser)
	  with-error-context))

(define-package (runtime syntax low)
  (files "syntax-low")
  (parent (runtime syntax))
  (export ()
	  er-macro-transformer->expander
	  rsc-macro-transformer->expander
	  sc-macro-transformer->expander
	  spar-macro-transformer->expander
	  spar-transformer->runtime)
  (export (runtime syntax)
	  classifier->keyword
	  classifier->runtime
	  classifier-item
	  classifier-item->keyword
	  classifier-item->runtime
	  classifier-item-impl
	  classifier-item?
	  er-macro-transformer->item
	  rsc-macro-transformer->item
	  sc-macro-transformer->item
	  spar-classifier->keyword
	  spar-classifier->runtime
	  spar-classifier-item
	  spar-macro-transformer->item
	  top-level-senv
	  transformer-item
	  transformer-item-expr
	  transformer-item-has-expr?
	  transformer-item-impl
	  transformer-item?))

(define-package (runtime syntax items)
  (files "syntax-items")
  (parent (runtime syntax))
  (export (runtime syntax)
	  body-item
	  combination-item
	  compile-expr-item
	  constant-item
	  define-item-compiler
	  defn-item
	  defn-item-id
	  defn-item-syntax?
	  defn-item-value
	  defn-item?
	  expr-item
	  expr-item-compiler
	  expr-item-ctx
	  expr-item?
	  flatten-items
	  item->list
	  keyword-item?
	  render-item
	  reserved-name-item
	  reserved-name-item?
	  seq-item
	  seq-item-elements
	  seq-item?
	  syntax-defn-item
	  var-item
	  var-item-id
	  var-item?)
  (export (runtime syntax top-level)
	  compile-item))

(define-package (runtime syntax environment)
  (files "syntax-environment")
  (parent (runtime syntax))
  (export ()
	  runtime-environment->syntactic
	  syntactic-environment?)
  (export (runtime syntax)
	  bind-keyword
	  bind-variable
	  lookup-identifier
	  make-classifier-senv
	  make-internal-senv
	  make-keyword-internal-senv
	  make-partial-senv
	  make-sealed-senv
	  reserve-keyword
	  senv->runtime
	  senv-top-level?))

(define-package (runtime syntax check)
  (files "syntax-check")
  (parent (runtime syntax))
  (export ()
	  ill-formed-syntax
	  syntax-check
	  syntax-match?
	  syntax-match?*)
  (export (runtime syntax)
	  scheck))

(define-package (runtime syntax parser)
  (files "syntax-parser")
  (parent (runtime syntax))
  (export ()
	  pattern->spar
	  pattern->spar-expr
	  spar*
	  spar+
	  spar-append-map-values
	  spar-arg:close
	  spar-arg:form
	  spar-arg:hist
	  spar-arg:id!=?
	  spar-arg:id=?
	  spar-arg:senv
	  spar-arg:value
	  spar-arg:values
	  spar-call-with-values
	  spar-discard-form
	  spar-encapsulate-values
	  spar-error
	  spar-fail
	  spar-filter-map-values
	  spar-funcall
	  spar-if
	  spar-map-values
	  spar-match
	  spar-match-null
	  spar-match-subform
	  spar-not
	  spar-opt
	  spar-or
	  spar-pattern-fixed-point
	  spar-push
	  spar-push-form-if
	  spar-push-subform
	  spar-push-subform-if
	  spar-push-value
	  spar-repeat
	  spar-and
	  spar-subform
	  spar-succeed
	  spar-transform-values
	  spar-with-mapped-senv
	  top-level-patterns->spar)
  (export (runtime syntax)
	  spar-arg:ctx
	  spar-call
	  spar-push-classified
	  spar-push-deferred-classified
	  spar-push-open-classified))

(define-package (runtime syntax constructor)
  (files "syntax-constructor")
  (parent (runtime syntax))
  (export ()
	  scons-and
	  scons-begin
	  scons-call
	  scons-close
	  scons-cond
	  scons-declare
	  scons-define
	  scons-delay
	  scons-if
	  scons-lambda
	  scons-let
	  scons-let-syntax
	  scons-letrec
	  scons-letrec*
	  scons-named-lambda
	  scons-named-let
	  scons-or
	  scons-quote
	  scons-quote-identifier
	  scons-rule
	  scons-safe-ref
	  scons-set!))

(define-package (runtime syntax rename)
  (files "syntax-rename")
  (parent (runtime syntax))
  (export (runtime syntax)
	  make-local-identifier-renamer
	  with-identifier-renaming))

(define-package (runtime syntax output)
  (files "syntax-output")
  (parent (runtime syntax))
  (export (runtime syntax)
	  output/access-assignment
	  output/access-reference
	  output/assignment
	  output/body
	  output/combination
	  output/conditional
	  output/constant
	  output/declaration
	  output/definition
	  output/disjunction
	  output/lambda
	  output/let
	  output/letrec
	  output/quoted-identifier
	  output/runtime-reference
	  output/sequence
	  output/syntax-definition
	  output/the-environment
	  output/top-level-syntax-expander
	  output/unassigned
	  output/unassigned-test
	  output/unspecific
	  output/variable
	  quoted-identifier-identifier
	  quoted-identifier?
	  transformer-eval))

(define-package (runtime syntax declaration)
  (files "syntax-declaration")
  (parent (runtime syntax))
  (export (runtime syntax)
	  fold-decl-ids
	  map-decl-ids))

(define-package (runtime syntax mit)
  (files "mit-syntax")
  (parent (runtime syntax))
  (export ()
	  (... $...)			;(scheme base)
	  (=> $=>)			;(scheme base)
	  (_ $_)			;(scheme base)
	  (access $access)
	  (begin $begin)		;(scheme base)
	  (declare $declare)
	  (define $define)		;(scheme base)
	  (define-syntax $define-syntax) ;(scheme base)
	  (else $else)			;(scheme base)
	  (er-macro-transformer $er-macro-transformer)
	  (if $if)			;(scheme base)
	  (lambda $lambda)		;(scheme base)
	  (let-syntax $let-syntax)	;(scheme base)
	  (letrec-syntax $letrec-syntax) ;(scheme base)
	  (named-lambda $named-lambda)
	  (or $or)			;(scheme base)
	  (quote $quote)		;(scheme base)
	  (quote-identifier $quote-identifier)
	  (rsc-macro-transformer $rsc-macro-transformer)
	  (safe-reference $safe-reference)
	  (sc-macro-transformer $sc-macro-transformer)
	  (set! $set!)			;(scheme base)
	  (spar-macro-transformer $spar-macro-transformer)
	  (the-environment $the-environment)
	  (unquote $unquote)		;(scheme base)
	  (unquote-splicing $unquote-splicing) ;(scheme base)
	  )
  (export (runtime mit-macros)
	  keyword:let-syntax
	  keyword:unassigned
	  keyword:unspecific))

(define-package (runtime mit-macros)
  (files "mit-macros")
  (parent (runtime))
  (export ()
	  (and $and)			;(scheme base)
	  (and-let* $and-let*)		;(srfi 2)
	  (assert $assert)
	  (begin0 $begin0)
	  (bundle $bundle)
	  (case $case)			;(scheme base)
	  (case-lambda $case-lambda)	;(scheme case-lambda)
	  (circular-stream $circular-stream)
	  (cond $cond)			;(scheme base)
	  (cond-expand $cond-expand)	;(scheme base)
	  (cons-stream $cons-stream)
	  (cons-stream* $cons-stream*)
	  (define-integrable $define-integrable)
	  (define-record-type $define-record-type) ;(scheme base)
	  (define-values $define-values) ;(scheme base)
	  (delay $delay)		;(scheme lazy)
	  (delay-force $delay-force)	;(scheme lazy)
	  (do $do)			;(scheme base)
	  (fluid-let $fluid-let)
	  (guard $guard)		;(scheme base)
	  (include $include)		;(scheme base)
	  (include-ci $include-ci)	;(scheme base)
	  (let $let)			;(scheme base)
	  (let-values $let-values)	;(scheme base)
	  (let* $let*)			;(scheme base)
	  (let*-syntax $let*-syntax)
	  (let*-values $let*-values)	;(scheme base)
	  (letrec $letrec)		;(scheme base)
	  (letrec* $letrec*)		;(scheme base)
	  (local-declare $local-declare)
	  (parameterize $parameterize)	;(scheme base)
	  (rx $rx)			;(srfi 115)
	  (quasiquote $quasiquote)	;(scheme base)
	  (receive $receive)		;(srfi 8)
	  (unless $unless)		;(scheme base)
	  (when $when)			;(scheme base)
	  )
  (export (runtime library parser)
	  evaluate-cond-expand))

(define-package (runtime syntax syntax-rules)
  (files "syntax-rules")
  (parent (runtime syntax))
  (export ()
	  syntax-rules))

(define-package (runtime syntax defstruct)
  (files "defstr")
  (parent (runtime syntax))
  (export ()
	  define-structure))

(define-package (runtime system-macros)
  (files "sysmac")
  (parent (runtime))
  (export deprecated ()
	  define-guarantee)
  (export (runtime)
	  define-deferred
	  define-primitives
	  define-sequenced-procedure
	  define-values-deferred
	  select-on-bytes-per-word
	  ucode-primitive
	  ucode-return-address
	  ucode-type
	  variable-setter))

(define-package (runtime system)
  (files "system")
  (parent (runtime))
  (export ()
	  add-subsystem-identification!
	  get-subsystem-identification-string
	  get-subsystem-names
	  get-subsystem-version
	  get-subsystem-version-string
	  remove-subsystem-identification!))

(define-package (runtime system-clock)
  (files "sysclk")
  (parent (runtime))
  (export ()
	  current-jiffy			;(scheme time)
	  internal-time/seconds->ticks
	  internal-time/ticks->seconds
	  jiffies-per-second		;(scheme time)
	  measure-interval
	  process-time-clock
	  real-time-clock
	  runtime
	  system-clock
	  with-timings)
  (export (runtime gc-statistics)
	  increment-non-runtime!))

(define-package (runtime printer)
  (files "printer")
  (parent (runtime))
  (export deprecated ()
	  *unparse-abbreviate-quotations?*
	  *unparse-compound-procedure-names?*
	  *unparse-primitives-by-name?*
	  *unparse-streams?*
	  *unparse-uninterned-symbols-by-name?*
	  *unparse-with-datum?*
	  *unparse-with-maximum-readability?*
	  *unparser-list-breadth-limit*
	  *unparser-list-depth-limit*
	  *unparser-radix*
	  *unparser-string-length-limit*
	  with-current-unparser-state)
  (export ()
	  param:print-char-in-unicode-syntax?
	  param:print-compound-procedure-names?
	  param:print-hash-number-in-objects?
	  param:print-primitives-by-name?
	  param:print-streams?
	  param:print-uninterned-symbols-by-name?
	  param:print-with-datum?
	  param:print-with-maximum-readability?
	  param:printer-abbreviate-quotations?
	  param:printer-list-breadth-limit
	  param:printer-list-depth-limit
	  param:printer-radix
	  param:printer-string-length-limit)
  (export (runtime boot-definitions)
	  get-param:print-with-maximum-readability?)
  (export (runtime output-port)
	  print-top-level)
  (export (runtime pretty-printer)
	  get-param:printer-list-breadth-limit
	  get-param:printer-list-depth-limit
	  prefix-pair?
	  print-for-pp
	  get-print-method)
  (export (runtime swank)
	  user-object-type))

(define-package (runtime unsyntaxer)
  (files "unsyn")
  (parent (runtime))
  (export ()
	  unsyntax
	  unsyntax-lambda-list
	  unsyntax-with-substitutions
	  unsyntaxer:elide-global-accesses?
	  unsyntaxer:macroize?
	  unsyntaxer:show-comments?))

(define-package (runtime working-directory)
  (files "wrkdir")
  (parent (runtime))
  (export ()
	  set-working-directory-pathname!
	  with-working-directory-pathname
	  working-directory-pathname)
  (export (runtime rep)
	  *working-directory-pathname*))

(define-package (runtime user-interface)
  (files "usrint")
  (parent (runtime))
  (export ()
	  (write-notification-line with-notification)
	  param:hide-notifications?
	  prompt-for-command-char
	  prompt-for-command-expression
	  prompt-for-confirmation
	  prompt-for-evaluated-expression
	  prompt-for-expression
	  prompt-for-string
	  call-with-pass-phrase
	  with-notification)
  (export (runtime rep)
	  port/set-default-environment
	  port/write-values)
  (export (runtime rep)
	  port/set-default-directory)
  (export (runtime debugger-command-loop)
	  port/debugger-failure
	  port/debugger-message
	  port/debugger-presentation)
  (export (runtime gc-statistics)
	  port/gc-finish
	  port/gc-start)
  (export (runtime emacs-interface)
	  port/read-finish
	  port/read-start)
  (export (runtime swank)
	  port/write-values))

(define-package (runtime thread)
  (files "thread-low" "thread")
  (parent (runtime))
  (export ()
	  assert-thread-mutex-owned
	  block-thread-events
	  condition-type:no-current-thread
	  condition-type:thread-control-error
	  condition-type:thread-dead
	  condition-type:thread-deadlock
	  condition-type:thread-detached
	  console-thread
	  create-thread
	  create-thread-continuation
	  current-thread
	  deregister-all-events
	  deregister-io-descriptor-events
	  deregister-io-thread-event
	  deregister-time-event
	  deregister-timer-event
	  detach-thread
	  exit-current-thread
	  join-thread
	  lock-thread-mutex
	  make-thread-mutex
	  other-running-threads?
	  permanently-register-io-thread-event
	  register-io-thread-event
	  register-time-event
	  register-timer-event
	  restart-thread
	  set-thread-timer-interval!
	  signal-thread-event
	  sleep-current-thread
	  start-thread-timer
	  stop-current-thread
	  stop-thread-timer
	  suspend-current-thread
	  thread-continuation
	  thread-dead?
	  thread-execution-state
	  thread-get
	  thread-mutex-owner
	  thread-mutex?
	  thread-put!
	  thread-timer-interval
	  thread?
	  threads-list
	  try-lock-thread-mutex
	  unblock-thread-events
	  unlock-thread-mutex
	  with-create-thread-continuation
	  with-thread-events-blocked
	  with-thread-mutex-lock
	  with-thread-mutex-locked
	  with-thread-mutex-try-lock
	  with-thread-mutex-unlocked
	  with-thread-timer-stopped
	  (without-interruption with-thread-events-blocked)
	  without-thread-mutex-lock
	  yield-current-thread)
  (import (runtime population)
	  add-new-to-population!/unsafe
	  make-population/unsafe)
  (import (runtime 1d-property)
	  make-1d-table/unsafe)
  (export (runtime interrupt-handler)
	  thread-timer-interrupt-handler)
  (export (runtime primitive-io)
	  block-on-io-descriptor)
  (export (runtime continuation)
	  get-thread-event-block
	  set-thread-event-block!)
  (export (runtime floating-point-environment)
	  set-thread-float-environment!
	  thread-float-environment))

(define-package (runtime thread barrier)
  (files "thread-barrier")
  (parent (runtime thread))
  (export ()
	  make-thread-barrier
	  thread-barrier-wait
	  thread-barrier?))

(define-package (runtime thread condition-variable)
  (files "condvar")
  (parent (runtime thread))
  (export ()
	  condition-variable-broadcast!
	  condition-variable-name
	  condition-variable-signal!
	  condition-variable-specific
	  condition-variable-specific-set!
	  condition-variable-wait!
	  condition-variable?
	  make-condition-variable
	  unlock-thread-mutex-and-wait))

(define-package (runtime rb-tree)
  (files "rbtree")
  (parent (runtime))
  (export ()
	  alist->rb-tree
	  make-rb-tree
	  rb-tree->alist
	  rb-tree/clear!
	  rb-tree/contains?
	  rb-tree/copy
	  rb-tree/datum-list
	  rb-tree/delete!
	  rb-tree/delete-max!
	  rb-tree/delete-max-datum!
	  rb-tree/delete-max-pair!
	  rb-tree/delete-min!
	  rb-tree/delete-min-datum!
	  rb-tree/delete-min-pair!
	  rb-tree/empty-copy
	  rb-tree/empty?
	  rb-tree/equal?
	  rb-tree/find
	  rb-tree/fold
	  rb-tree/fold-right
	  rb-tree/for-each
	  rb-tree/height
	  rb-tree/insert!
	  rb-tree/intern!
	  rb-tree/key-list
	  rb-tree/key<?
	  rb-tree/key=?
	  rb-tree/lookup
	  rb-tree/map!
	  rb-tree/max
	  rb-tree/max-datum
	  rb-tree/max-pair
	  rb-tree/min
	  rb-tree/min-datum
	  rb-tree/min-pair
	  rb-tree/ref
	  rb-tree/size
	  rb-tree/update!
	  rb-tree?))

(define-package (runtime wt-tree)
  (files "wttree")
  (parent (runtime))
  (export ()
	  number-wt-type
	  string-wt-type
	  wt-tree/empty?
          alist->wt-tree
          make-wt-tree
          make-wt-tree-type
          singleton-wt-tree
          wt-tree/add
          wt-tree/add!
          wt-tree/delete
          wt-tree/delete!
          wt-tree/delete-min
          wt-tree/delete-min!
          wt-tree/difference
          wt-tree/fold
          wt-tree/for-each
          wt-tree/index
          wt-tree/index-datum
          wt-tree/index-pair
          wt-tree/intersection
          wt-tree/lookup
          wt-tree/member?
          wt-tree/min
          wt-tree/min-datum
          wt-tree/min-pair
          wt-tree/rank
          wt-tree/set-equal?
          wt-tree/size
          wt-tree/split<
          wt-tree/split>
          wt-tree/subset?
          wt-tree/union
          wt-tree/union-merge
          wt-tree/valid?                ; Debugging utility only.
          wt-tree?))

(define-package (runtime apropos)
  (files "apropos")
  (parent (runtime))
  (export ()
	  apropos
	  apropos-list))

(define-package (runtime stepper)
  (file-case options
    ((load) "ystep")
    (else))
  (parent (runtime))
  (export ()
	  step
	  step-form
	  step-n
	  step-over
	  step-proceed
	  step-quit
	  step-run
	  step-until
	  step-until-visibly))

(define-package (runtime ordered-vector)
  (file-case options
    ((load) "ordvec")
    (else))
  (parent (runtime))
  (export ()
	  match-ordered-subvector
	  match-ordered-vector
	  ordered-subvector-matches
	  ordered-subvector-minimum-match
	  ordered-vector-matches
	  ordered-vector-minimum-match
	  search-ordered-subvector
	  search-ordered-vector))

(define-package (runtime gdbm)
  (file-case options
    ((load) "gdbm")
    (else))
  (parent (runtime))
  (export deprecated ()
	  gdbm-available?
	  gdbm-close
	  gdbm-delete
	  gdbm-exists?
	  gdbm-fetch
	  gdbm-firstkey
	  gdbm-nextkey
	  gdbm-open
	  gdbm-reorganize
	  gdbm-setopt
	  gdbm-store
	  gdbm-sync
	  gdbm-version
	  gdbm_cachesize
	  gdbm_fast
	  gdbm_fastmode
	  gdbm_insert
	  gdbm_newdb
	  gdbm_reader
	  gdbm_replace
	  gdbm_wrcreat
	  gdbm_writer))

(define-package (runtime tagged-dispatch)
  (files "dispatch-tag" "dispatch-cache")
  (parent (runtime))
  (export ()
	  dispatch-metatag-constructor
	  dispatch-metatag?
	  dispatch-tag->predicate
	  dispatch-tag-extra
	  dispatch-tag-extra-length
	  dispatch-tag-extra-ref
	  dispatch-tag-metatag
	  dispatch-tag-name
	  dispatch-tag-print-name
	  dispatch-tag?
	  make-dispatch-metatag)
  (export (runtime compound-predicate)
	  %dispatch-tag-extra-set!)
  (export (runtime predicate)
	  add-dispatch-tag-superset
	  any-dispatch-tag-superset)
  (export (runtime predicate-dispatch)
	  fill-cache
	  new-cache
	  probe-cache
	  probe-cache-1
	  probe-cache-2
	  probe-cache-3
	  probe-cache-4)
  (export (runtime record)
	  %dispatch-tag->predicate
	  %dispatch-tag-extra-index
	  %dispatch-tag-extra-ref
	  %dispatch-tag-extra-set!
	  %dispatch-tag-name))

(define-package (runtime crypto)
  (files "crypto")
  (parent (runtime))
  (export ()
	  md5-available?
	  md5-bytevector
	  md5-file
	  md5-string))

(define-package (runtime regexp)
  (files)
  (parent (runtime)))

(define-package (runtime regexp regsexp)
  (files "regsexp")
  (parent (runtime regexp))
  (export ()
	  compile-regsexp
	  compiled-regsexp?
	  condition-type:compile-regsexp
	  re-pattern->regsexp
	  regsexp-group-key?
	  regsexp-match-input-port
	  regsexp-match-string
	  regsexp-match?
	  regsexp-replacement?
	  regsexp-replacer
	  regsexp-search-string-forward
	  regsexp?))

(define-package (runtime regexp srfi-115)
  (files "srfi-115")
  (parent (runtime regexp))
  (export ()
	  char-set->sre			;(srfi 115)
	  condition-type:compile-regexp
	  print-regexp
	  regexp			;(srfi 115)
	  regexp->nfa
	  regexp-extract		;(srfi 115)
	  regexp-fold			;(srfi 115)
	  regexp-fold-right
	  regexp-match->list		;(srfi 115)
	  regexp-match-count		;(srfi 115)
	  regexp-match-empty?
	  regexp-match-end
	  regexp-match-key?
	  regexp-match-keys
	  regexp-match-length
	  regexp-match-replace
	  regexp-match-replacement?
	  regexp-match-start
	  regexp-match-submatch		;(srfi 115)
	  regexp-match-submatch-end	;(srfi 115)
	  regexp-match-submatch-start	;(srfi 115)
	  regexp-match-value
	  regexp-match?			;(srfi 115)
	  regexp-matches		;(srfi 115)
	  regexp-matches?		;(srfi 115)
	  regexp-matches-some
	  regexp-matches-some?
	  regexp-partition		;(srfi 115)
	  regexp-replace		;(srfi 115)
	  regexp-replace-all		;(srfi 115)
	  regexp-replace-subst?
	  regexp-search			;(srfi 115)
	  regexp-search-all
	  regexp-split			;(srfi 115)
	  regexp?			;(srfi 115)
	  valid-cset-sre?
	  valid-sre?			;(srfi 115)
	  ))

(define-package (runtime regexp rules)
  (files "regexp-rules")
  (parent (runtime))
  (export (runtime regexp)
	  make-rules
	  pattern?
	  rule-key
	  rule-operation
	  rule-predicate
	  rules-adder
	  rules-definer
	  rules-matcher
	  rules-rewriter
	  rules?
	  rule?))

(define-package (runtime regexp nfa)
  (files "regexp-nfa")
  (parent (runtime))
  (export (runtime regexp srfi-115)
	  compile-matcher
	  group-empty?
	  group-end
	  group-key
	  group-length
	  group-start
	  group-value
	  insn:*
	  insn:**
	  insn:**?
	  insn:*?
	  insn:=
	  insn:>=
	  insn:>=?
	  insn:?
	  insn:??
	  insn:alt
	  insn:bog
	  insn:boundary
	  insn:char
	  insn:char-set
	  insn:char-zero-width
	  insn:end-boundary
	  insn:eog
	  insn:group
	  insn:non-boundary
	  insn:seq
	  insn:start-boundary
	  insn:string
	  insn:string-end
	  insn:string-start
	  insn:string-zero-width
	  make-index-generator
	  matcher->nfa
	  run-matcher)
  (export ()
	  param:trace-regexp-nfa?))

(define-package (runtime regexp recursive)
  (files "regexp-recursive")
  (parent (runtime))
  (export (runtime regexp regsexp)
	  all-groups
	  group-end
	  group-key
	  group-start
	  group-value
	  insn:*
	  insn:**
	  insn:**?
	  insn:*?
	  insn:?
	  insn:??
	  insn:alt
	  insn:char
	  insn:char-matching
	  insn:char-set
	  insn:group
	  insn:group-ref
	  insn:inverse-char-set
	  insn:line-end
	  insn:line-start
	  insn:seq
	  insn:string
	  insn:string-end
	  insn:string-start
	  make-group
	  make-groups
	  make-source-position
	  make-string-position
	  next-char
	  next-position
	  pos-index))

(define-package (runtime regular-expression)
  (file-case options
    ((load) "regexp")
    (else))
  (parent (runtime))
  (export ()
	  char-set->regexp
	  preserving-re-registers
	  re-match-end-index
	  re-match-extract
	  re-match-start-index
	  re-registers
	  re-registers?
	  re-string-match
	  re-string-search-backward
	  re-string-search-forward
	  re-substring-match
	  re-substring-search-backward
	  re-substring-search-forward
	  regexp-group
	  set-re-registers!))

(define-package (runtime regular-expression-compiler)
  (file-case options
    ((load) "rgxcmp")
    (else))
  (parent (runtime))
  (export ()
	  compiled-regexp?
	  compiled-regexp/byte-stream
	  compiled-regexp/translation-table
	  condition-type:re-compile-pattern
	  re-compile-char
	  re-compile-pattern
	  re-compile-string
	  re-disassemble-pattern
	  re-quote-string
	  re-translation-table))

(define-package (runtime rexp)
  (file-case options
    ((load) "rexp")
    (else))
  (parent (runtime))
  (export ()
	  rexp*
	  rexp+
	  rexp-*n
	  rexp->regexp
	  rexp-alternatives
	  rexp-any-char
	  rexp-case-fold
	  rexp-compile
	  rexp-group
	  rexp-line-end
	  rexp-line-start
	  rexp-n*
	  rexp-n*m
	  rexp-n*n
	  rexp-not-syntax-char
	  rexp-not-word-char
	  rexp-not-word-edge
	  rexp-optional
	  rexp-sequence
	  rexp-string-end
	  rexp-string-start
	  rexp-syntax-char
	  rexp-word-char
	  rexp-word-edge
	  rexp-word-end
	  rexp-word-start
	  rexp?))

(define-package (runtime char-syntax)
  (file-case options
    ((load) "chrsyn")
    (else))
  (parent (runtime))
  (export ()
	  char->syntax-code
	  char-syntax->string
	  char-syntax-code?
	  char-syntax-table?
	  get-char-syntax
	  make-char-syntax-table
	  set-char-syntax!
	  standard-char-syntax-table
	  string->char-syntax
	  substring-find-next-char-not-of-syntax
	  substring-find-next-char-of-syntax
	  syntax-code-predicate)
  (export (runtime regular-expression)
	  char-syntax-table/entries))

(define-package (runtime mime-codec)
  (file-case options
    ((load) "mime-codec")
    (else))
  (parent (runtime))
  (export ()
	  call-with-decode-base64-output-port
	  call-with-decode-binhex40-output-port
	  call-with-decode-quoted-printable-output-port
	  call-with-decode-uue-output-port
	  condition-type:decode-base64
	  condition-type:decode-binhex40
	  condition-type:decode-mime
	  condition-type:decode-uue
	  decode-base64:finalize
	  decode-base64:initialize
	  decode-base64:update
	  decode-binhex40:finalize
	  decode-binhex40:initialize
	  decode-binhex40:update
	  decode-quoted-printable:finalize
	  decode-quoted-printable:initialize
	  decode-quoted-printable:update
	  decode-uue:finalize
	  decode-uue:initialize
	  decode-uue:update
	  encode-base64:finalize
	  encode-base64:initialize
	  encode-base64:update
	  encode-quoted-printable:finalize
	  encode-quoted-printable:initialize
	  encode-quoted-printable:update
	  make-decode-base64-port
	  make-decode-binhex40-port
	  make-decode-quoted-printable-port
	  make-decode-uue-port))

(define-package (runtime parser-buffer)
  (files "parser-buffer")
  (parent (runtime))
  (export deprecated ()
	  (input-port->parser-buffer textual-input-port->parser-buffer))
  (export ()
	  *match-string
	  *match-symbol
	  *parse-string
	  *parse-symbol
	  call-with-parser-buffer-tail
	  complete-*match
	  complete-*parse
	  discard-parser-buffer-head!
	  get-parser-buffer-pointer
	  get-parser-buffer-tail
	  match-parser-buffer-char
	  match-parser-buffer-char-ci
	  match-parser-buffer-char-ci-no-advance
	  match-parser-buffer-char-in-set
	  match-parser-buffer-char-in-set-no-advance
	  match-parser-buffer-char-no-advance
	  match-parser-buffer-char-not-in-set
	  match-parser-buffer-char-not-in-set-no-advance
	  match-parser-buffer-not-char
	  match-parser-buffer-not-char-ci
	  match-parser-buffer-not-char-ci-no-advance
	  match-parser-buffer-not-char-no-advance
	  match-parser-buffer-string
	  match-parser-buffer-string-ci
	  match-parser-buffer-string-ci-no-advance
	  match-parser-buffer-string-no-advance
	  match-parser-buffer-substring
	  match-parser-buffer-substring-ci
	  match-parser-buffer-substring-ci-no-advance
	  match-parser-buffer-substring-no-advance
	  parser-buffer-error
	  parser-buffer-line
	  parser-buffer-pointer-index
	  parser-buffer-pointer-line
	  parser-buffer-pointer?
	  parser-buffer-port
	  parser-buffer-position-string
	  parser-buffer-ref
	  parser-buffer?
	  peek-parser-buffer-char
	  read-parser-buffer-char
	  set-parser-buffer-pointer!
	  string->parser-buffer
	  textual-input-port->parser-buffer))

(define-package (runtime uri)
  (files "url")
  (parent (runtime))
  (export ()
	  (url:decode-string decode-component)
	  (url:match:escape matcher:pct-encoded)
	  (url:parse:hostport parser:hostport)
	  ->absolute-uri
	  ->relative-uri
	  ->uri
	  <partial-uri>
	  <uri-authority>
	  <uri>
	  absolute-uri?
	  char-set:uri-alpha
	  char-set:uri-digit
	  char-set:uri-fragment
	  char-set:uri-hex
	  char-set:uri-ipvfuture
	  char-set:uri-query
	  char-set:uri-reg-name
	  char-set:uri-scheme
	  char-set:uri-segment
	  char-set:uri-segment-nc
	  char-set:uri-userinfo
	  encode-uri-path-segment
	  make-uri
	  make-uri-authority
	  merge-uris
	  parse-absolute-uri
	  parse-partial-absolute-uri
	  parse-partial-uri
	  parse-relative-uri
	  parse-uri
	  parse-uri-authority
	  parse-uri-path-absolute
	  partial-uri->string
	  partial-uri-authority
	  partial-uri-extra
	  partial-uri-fragment
	  partial-uri-path
	  partial-uri-query
	  partial-uri-scheme
	  partial-uri-state-name
	  partial-uri?
	  relative-uri?
	  string->absolute-uri
	  string->partial-absolute-uri
	  string->partial-uri
	  string->relative-uri
	  string->uri
	  uri->alist
	  uri->string
	  uri->symbol
	  uri-absolute?
	  uri-authority
	  uri-authority-host
	  uri-authority-port
	  uri-authority-userinfo
	  uri-authority=?
	  uri-authority?
	  uri-fragment
	  uri-host?
	  uri-merge-defaults
	  uri-path
	  uri-path-absolute?
	  uri-path-relative?
	  uri-path?
	  uri-port?
	  uri-prefix
	  uri-query
	  uri-relative?
	  uri-rexp:absolute-uri
	  uri-rexp:authority
	  uri-rexp:dec-octet
	  uri-rexp:fragment
	  uri-rexp:h16
	  uri-rexp:hier-part
	  uri-rexp:host
	  uri-rexp:ip-literal
	  uri-rexp:ipv4-address
	  uri-rexp:ipv6-address
	  uri-rexp:ipvfuture
	  uri-rexp:ls32
	  uri-rexp:path
	  uri-rexp:path-abempty
	  uri-rexp:path-absolute
	  uri-rexp:path-empty
	  uri-rexp:path-noscheme
	  uri-rexp:path-rootless
	  uri-rexp:pct-encoded
	  uri-rexp:port
	  uri-rexp:query
	  uri-rexp:reg-name
	  uri-rexp:relative-part
	  uri-rexp:relative-ref
	  uri-rexp:scheme
	  uri-rexp:segment
	  uri-rexp:segment-nz
	  uri-rexp:segment-nz-nc
	  uri-rexp:uri
	  uri-rexp:uri-reference
	  uri-rexp:userinfo
	  uri-scheme
	  uri-scheme?
	  uri=?
	  uri?
	  url:char-set:unreserved
	  url:encode-string
	  write-partial-uri
	  write-uri
	  write-uri-authority))

(define-package (runtime rfc2822-headers)
  (files "rfc2822-headers")
  (parent (runtime))
  (export ()
	  all-rfc2822-headers
	  char-set:rfc2822-name
	  char-set:rfc2822-qtext
	  char-set:rfc2822-text
	  condition-type:rfc2822-parse-error
	  first-rfc2822-header
	  make-rfc2822-header
	  parser:rfc2822-quoted-string
	  quote-rfc2822-text
	  read-rfc2822-folded-line
	  read-rfc2822-headers
	  rfc2822-header-name
	  rfc2822-header-value
	  rfc2822-header?
	  rfc2822-headers->string
	  string->rfc2822-headers
	  write-rfc2822-headers))

(define-package (runtime http-syntax)
  (files "http-syntax")
  (parent (runtime))
  (export ()
	  <http-header>
	  char-set:http-text
	  char-set:http-token
	  convert-http-headers
	  default-http-user-agent
	  http-header
	  http-header-name
	  http-header-parsed-value
	  http-header-value
	  http-header?
	  http-status?
	  http-text?
	  http-token-string?
	  http-token?
	  http-version-major
	  http-version-minor
	  http-version:1.0
	  http-version:1.1
	  http-version<?
	  http-version=?
	  http-version?
	  make-http-header
	  make-http-version
	  parse-http-chunk-leader
	  parse-http-status
	  parse-http-token
	  parse-http-version
	  read-http-headers
	  write-http-status
	  write-http-token
	  write-http-version
	  write-http-headers))

(define-package (runtime http-i/o)
  (files "http-io")
  (parent (runtime))
  (export ()
	  http-message-body
	  http-message-body-port
	  http-message-header
	  http-message-headers
	  http-message?
	  http-request-body
	  http-request-headers
	  http-request-method
	  http-request-uri
	  http-request-uri?
	  http-request-version
	  http-request?
	  http-response-body
	  http-response-headers
	  http-response-reason
	  http-response-status
	  http-response-version
	  http-response?
	  http-status-description
	  make-http-request
	  make-http-response
	  make-simple-http-request
	  make-simple-http-response
	  read-http-request
	  read-http-response
	  read-simple-http-request
	  read-simple-http-response
	  simple-http-request-uri?
	  simple-http-request?
	  simple-http-response?
	  write-http-request
	  write-http-response))

(define-package (runtime http-client)
  (files "http-client")
  (parent (runtime))
  (export ()
	  call-with-http-client-socket
	  http-client-exchange
	  http-client-request
	  http-get
	  http-head
	  http-post))

(define-package (runtime html-form-codec)
  (files "html-form-codec")
  (parent (runtime))
  (export ()
	  decode-www-form-urlencoded
	  encode-www-form-urlencoded))

(define-package (runtime structure-parser)
  (files "structure-parser")
  (parent (runtime))
  (export ()
	  apply-list-parser
	  apply-object-parser
	  apply-vector-parser
	  list->structure-parser-values
	  list-parser
	  map-structure-parser-values
	  object-parser
	  structure-parser-values
	  structure-parser-values->list
	  structure-parser-values-length
	  structure-parser-values-ref
	  structure-parser-values?
	  vector-parser))

(define-package (runtime postgresql)
  (file-case options
    ((load) "pgsql")
    (else))
  (parent (runtime))
  (export deprecated ()
	  call-with-pgsql-conn
	  close-pgsql-conn
	  condition-type:pgsql-connection-error
	  condition-type:pgsql-error
	  condition-type:pgsql-query-error
	  decode-pgsql-bytea
	  encode-pgsql-bytea
	  escape-pgsql-string
	  exec-pgsql-query
	  guarantee-pgsql-available
	  make-empty-pgsql-result
	  open-pgsql-conn
	  pgsql-available?
	  pgsql-bad-response
	  pgsql-clear
	  pgsql-cmd-status
	  pgsql-cmd-tuples
	  pgsql-command-ok
	  pgsql-conn-db
	  pgsql-conn-error-message
	  pgsql-conn-host
	  pgsql-conn-open?
	  pgsql-conn-options
	  pgsql-conn-pass
	  pgsql-conn-port
	  pgsql-conn-reset
	  pgsql-conn-reset-start
	  pgsql-conn-status
	  pgsql-conn-tty
	  pgsql-conn-user
	  pgsql-connection-auth-ok
	  pgsql-connection-awaiting-response
	  pgsql-connection-bad
	  pgsql-connection-made
	  pgsql-connection-ok
	  pgsql-connection-setenv
	  pgsql-connection-started
	  pgsql-copy-in
	  pgsql-copy-out
	  pgsql-empty-query
	  pgsql-fatal-error
	  pgsql-field-name
	  pgsql-get-is-null?
	  pgsql-get-line
	  pgsql-get-value
	  pgsql-n-fields
	  pgsql-n-tuples
	  pgsql-nonfatal-error
	  pgsql-polling-active
	  pgsql-polling-failed
	  pgsql-polling-ok
	  pgsql-polling-reading
	  pgsql-polling-writing
	  pgsql-put-line
	  pgsql-result-error-message
	  pgsql-result-status
	  pgsql-tuples-ok
	  poll-pgsql-conn
	  poll-pgsql-reset))


(os-type-case
 ((nt)
  (define-package (runtime win32-registry)
    (files "win32-registry")
    (parent (runtime))
    (export ()
	    win32-registry/add-subkey
	    win32-registry/delete-subkey
	    win32-registry/delete-value
	    win32-registry/get-value
	    win32-registry/key-full-name
	    win32-registry/key-name
	    win32-registry/key-parent
	    win32-registry/key?
	    win32-registry/open-key
	    win32-registry/set-value
	    win32-registry/subkey
	    win32-registry/subkeys
	    win32-registry/value-names
	    win32/expand-environment-strings))))

(define-package (runtime swank)
  (files "swank")
  (parent (runtime))
  (export ()
	  start-swank))

(define-package (runtime stack-sampler)
  (files "stack-sample")
  (parent (runtime))
  (export ()
	  stack-sampler:debug-internal-errors?
	  stack-sampler:topmost-expressions
	  with-stack-sampling))

(define-package (runtime world-report)
  (files "world-report")
  (parent (runtime))
  (import (runtime options)
	  loaded-options)
  (import (runtime thread)
	  enable-smp?
	  thread/process-time
	  thread/real-time)
  (import (runtime save/restore)
	  time-world-restored)
  (export ()
	  world-report))

(define-package (runtime library)
  (files)
  (parent (runtime)))

(define-package (runtime library database)
  (files "library-database")
  (parent (runtime library))
  (export (runtime)
	  copy-library-db
	  library-bound-names
	  library-contents
	  library-db
	  library-db?
	  library-environment
	  library-exports
	  library-filename
	  library-free-names
	  library-get
	  library-has?
	  library-imports
	  library-imports-environment
	  library-imports-used
	  library-name
	  library-parsed-contents
	  library-parsed-exports
	  library-parsed-imports
	  library-registered?
	  library?
	  registered-libraries
	  registered-library
	  registered-library?)
  (export (runtime environment)
	  library->environment-helper)
  (export (runtime library)
	  define-automatic-property
	  deregister-library!
	  library-eval-result
	  library-preregistered?
	  load-preregistered-library!
	  make-library
	  preregister-library!
	  register-libraries!
	  register-library!)
  (export (runtime library standard)
	  make-library-db))

(define-package (runtime library parser)
  (files "library-parser")
  (parent (runtime library))
  (export (runtime)
	  library-name-elt<?
	  library-name-elt=?
	  library-name-elt?
	  library-name<?
	  library-name=?
	  library-name?
	  parse-r7rs-source
	  r7rs-source-elements
	  r7rs-source-libraries
	  r7rs-source-program
	  r7rs-source?
	  read-r7rs-source
	  register-r7rs-source!)
  (export (runtime library)
	  library-name-adjoin
	  ;; Next two exported for testing only.
	  parse-define-library-form
	  parse-define-library*-form
	  parse-import-set))

(define-package (runtime library standard)
  (files "library-standard")
  (parent (runtime library))
  (export ()
	  current-library-db
	  host-library-db
	  new-library-db)
  (export (runtime)
	  standard-library-globals))

(define-package (runtime library import/export)
  (files "library-ixports")
  (parent (runtime library))
  (export (runtime)
	  library-ixport-from
	  library-ixport-from-library
	  library-ixport-to
	  library-ixport=?
	  library-ixport?
	  make-library-ixport)
  (export (runtime library)
	  expand-parsed-imports
	  library-ixport->list
	  library-ixports->libraries
	  library-ixports->library-names
	  list->library-ixport))

(define-package (runtime library import/export r7rs)
  (files "library-ixports-r7rs")
  (parent (runtime library import/export))
  (export (runtime library import/export)
	  r7rs-expand-parsed-export
	  r7rs-expand-parsed-import
	  r7rs-parsed-export-libraries
	  r7rs-parsed-import-libraries))

(define-package (runtime library import/export mit)
  (files "library-ixports-mit")
  (parent (runtime library import/export))
  (export (runtime library import/export)
	  mit-expand-parsed-export
	  mit-expand-parsed-import
	  mit-parsed-export-libraries
	  mit-parsed-import-libraries))

(define-package (runtime library scode)
  (files "library-scode")
  (parent (runtime library))
  (export (runtime)
	  map-r7rs-scode-file
	  map-scode-library
	  r7rs-scode-file-elements
	  r7rs-scode-file-libraries
	  r7rs-scode-file-program
	  r7rs-scode-file?
	  scode-library-imports
	  scode-library-imports-used
	  scode-library-name
	  scode-library-version
	  scode-library-version-current?
	  scode-library?)
  (export (runtime library)
	  library->scode-library
	  make-r7rs-scode-file
	  r7rs-source->scode-file
	  scode-library->library))

(define-package (runtime library loader)
  (files "library-loader")
  (parent (runtime library))
  (export ()
	  environment			;(scheme eval)
	  find-scheme-libraries!
	  import!
	  null-environment		;(scheme r5rs)
	  scheme-report-environment	;(scheme r5rs)
	  )
  (export (runtime)
	  eval-r7rs-scode-file
	  eval-r7rs-source
	  make-environment-from-parsed-imports
	  syntax-r7rs-source))

(define-package (runtime directed-graph)
  (files "digraph")
  (parent (runtime))
  (export ()
	  digraph?
	  make-digraph))

(define-package (runtime ieee754)
  (files "ieee754")
  (parent (runtime))
  (export ()
	  compose-ieee754-binary
	  compose-ieee754-binary128
	  compose-ieee754-binary32
	  compose-ieee754-binary64
	  compose-ieee754-infinity
	  compose-ieee754-nan
	  compose-ieee754-normal
	  compose-ieee754-subnormal
	  compose-ieee754-zero
	  decompose-ieee754
	  decompose-ieee754-binary128
	  decompose-ieee754-binary32
	  decompose-ieee754-binary64
	  ieee754-binary-hex-string
	  ieee754-binary-parameters
	  ieee754-binary128-exact?
	  ieee754-binary128-hex-string
	  ieee754-binary32-exact?
	  ieee754-binary32-hex-string
	  ieee754-binary64-exact?
	  ieee754-binary64-hex-string
	  ))

(define-package (runtime simple-matcher)
  (files "simple-matcher")
  (parent (runtime))
  (export ()
	  apply-simple-matcher
	  make-simple-matcher
	  simple-matcher-names
	  simple-matcher-pattern->names))

(define-package (runtime trie)
  (files "trie")
  (parent (runtime))
  (export ()
	  alist->trie
	  delete-trie-value!
	  find-subtrie
	  intern-subtrie!
	  make-trie
	  set-trie-value!
	  trie-=?
	  trie->alist
	  trie-clean!
	  trie-clear!
	  trie-edge-find
	  trie-edge-fold
	  trie-edge-for-each
	  trie-edge-prune!
	  trie-fold
	  trie-for-each
	  trie-has-value?
	  trie-paths
	  trie-ref
	  trie-set!
	  trie-value
	  trie-values
	  trie?))

(define-package (runtime cgen)
  (files "cgen-base")
  (parent (runtime))
  (export ()
	  cgen:and
	  cgen:and*
	  cgen:call
	  cgen:call*
	  cgen:finish
	  cgen:if
	  cgen:in-context
	  cgen:lambda
	  cgen:let
	  cgen:new-name
	  cgen:or
	  cgen:or*
	  cgen:pcall
	  cgen:quote
	  cgen:raw-output?
	  cgen:rename))

(define-package (runtime cgen optimizer)
  (files "cgen-optimize")
  (parent (runtime cgen))
  (export (runtime cgen)
	  optimization-rules
	  optimize-cgen-expr))

(define-package (runtime cgen cse)
  (files "cgen-cse")
  (parent (runtime cgen))
  (export (runtime cgen)
	  cse-cgen-expr))

(define-package (runtime cgen output)
  (files "cgen-output")
  (parent (runtime cgen))
  (export (runtime cgen)
	  cgen-expr->scheme
	  output-optimizer-rules))

(define-package (runtime comparator)
  (files "comparator")
  (parent (runtime))
  (export ()
	  (comparator-equality-predicate %comparator-=) ;(srfi 128)
	  (comparator-type-test-predicate %comparator-?) ;(srfi 128)
	  <=?				;(srfi 128)
	  <?				;(srfi 128)
	  =?				;(srfi 128)
	  >=?				;(srfi 128)
	  >?				;(srfi 128)
	  boolean-comparator
	  boolean-hash			;(srfi 128)
	  bytevector-comparator
	  char-ci-comparator
	  char-ci-hash			;(srfi 128)
	  char-comparator
	  char-hash			;(srfi 128)
	  char-set-comparator
	  combine-hashes
	  comparator-check-type		;(srfi 128)
	  comparator-hash		;(srfi 128)
	  comparator-hash-function	;(srfi 128)
	  comparator-hashable?		;(srfi 128)
	  comparator-if<=>		;(srfi 128)
	  comparator-ordered?		;(srfi 128)
	  comparator-ordering-predicate	;(srfi 128)
	  comparator-register-default!	;(srfi 128)
	  comparator-rehash-after-gc?
	  comparator-test-type		;(srfi 128)
	  comparator?			;(srfi 128)
	  default-hash			;(srfi 128)
	  default<
	  default=
	  exact-integer-comparator
	  fixnum-comparator
	  fixnum-hash
	  flonum-comparator
	  hash-bound			;(srfi 128)
	  hash-mask
	  hash-salt			;(srfi 128)
	  initial-hash
	  interned-symbol-comparator
	  lset-comparator
	  lset-comparator-elt
	  lset-comparator?
	  make-comparator		;(srfi 128)
	  make-default-comparator	;(srfi 128)
	  make-eq-comparator		;(srfi 128)
	  make-equal-comparator		;(srfi 128)
	  make-eqv-comparator		;(srfi 128)
	  make-list-comparator		;(srfi 128)
	  make-pair-comparator		;(srfi 128)
	  make-vector-comparator	;(srfi 128)
	  make-weak-pair-comparator
	  number-comparator
	  pair-comparator-car
	  pair-comparator-cdr
	  pair-comparator?
	  real-comparator
	  string-ci-comparator
	  string-comparator
	  symbol-comparator
	  uniform-klist-comparator-elt
	  uniform-klist-comparator?
	  uniform-kvector-comparator-elt
	  uniform-kvector-comparator?
	  uniform-list-comparator
	  uniform-list-comparator-elt
	  uniform-list-comparator?
	  uniform-vector-comparator
	  uniform-vector-comparator-elt
	  uniform-vector-comparator?
	  uniform-weak-list-comparator
	  uniform-weak-list-comparator-elt
	  uniform-weak-list-comparator?
	  weak-lset-comparator
	  weak-lset-comparator-elt
	  weak-lset-comparator?
	  weak-pair-comparator-car
	  weak-pair-comparator-cdr
	  weak-pair-comparator?)
  (export (runtime hash-table)
	  eq-uwlist=
	  eq-uwlist-hash
	  eqv-uwlist=
	  eqv-uwlist-hash
	  checked-hash-mod))

(define-package (runtime feature)
  (files "feature")
  (parent (runtime))
  (export ()
	  features			;(scheme base)
	  ))

(define-package (runtime amap)
  (files "amap")
  (parent (runtime))
  (export ()
          alist->amap
          amap->alist
	  amap-args
          amap-clean!
          amap-clear!
	  amap-comparator
          amap-contains?
          amap-copy
          amap-count
          amap-delete!
          amap-difference!
          amap-empty-copy
          amap-empty?
          amap-entries
          amap-find
          amap-fold
          amap-for-each
	  amap-implementation-name
          amap-intern!
          amap-intersection!
          amap-keys
          amap-map
          amap-map!
          amap-map->list
          amap-mutable?
          amap-pop!
          amap-prune!
          amap-ref
          amap-ref/default
          amap-set!
          amap-size
          amap-unfold
          amap-union!
          amap-update!
          amap-update!/default
          amap-values
          amap-xor!
          amap=?
          amap?
          make-amap))

(define-package (runtime amap impl)
  (files "amap-impl")
  (parent (runtime amap))
  (export ()
	  all-amap-args
	  amap-implementation-names
	  amap-implementation-supported-args
	  amap-implementation-supports-args?
	  amap-implementation-supports-comparator?
          define-amap-implementation
          define-amap-implementation-selector
	  make-amap-implementation)
  (export (runtime amap)
          select-impl))

(define-package (runtime amap hash-table)
  (files "amap-hash-table")
  (parent (runtime)))

(define-package (runtime amap trie)
  (files "amap-trie")
  (parent (runtime)))

(define-package (runtime amap alist)
  (files "amap-alist")
  (parent (runtime)))