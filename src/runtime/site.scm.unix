#| -*-Scheme-*-

$Id: site.scm.unix,v 1.17 2003/02/14 18:28:34 cph Exp $

Copyright (c) 1988-1999 Massachusetts Institute of Technology

This file is part of MIT/GNU Scheme.

MIT/GNU Scheme is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or (at
your option) any later version.

MIT/GNU Scheme is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with MIT/GNU Scheme; if not, write to the Free Software
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307,
USA.

|#

;;;; Switzerland site specific stuff
;;;; call/cc is used by the C back end!

(declare (usual-integrations))

;;; Local hacks

(define *call/cc-warn?* true)
(define *call/cc-c-compiler* "cc")

(define (call/cc . args)
  (let ((command-line
	 (with-output-to-string
	   (lambda ()
	     (write-string *call/cc-c-compiler*)
	     (let loop ((args args))
	       (if (not (null? args))
		   (begin
		     (write-string " ")
		     (display (car args))
		     (loop (cdr args)))))))))
    (if *call/cc-warn?*
	(warn "call/cc: Invoking the C compiler:" command-line))
    (system command-line)))

(define (system command-line)
  (let ((inside (->namestring
		 (directory-pathname-as-file (working-directory-pathname))))
	(outside false))
    (dynamic-wind
     (lambda ()
       (stop-thread-timer)
       (set! outside ((ucode-primitive working-directory-pathname 0)))
       ((ucode-primitive set-working-directory-pathname! 1) inside))
     (lambda ()
       ((ucode-primitive system 1) command-line))
     (lambda ()
       (set! inside ((ucode-primitive working-directory-pathname 0)))
       ((ucode-primitive set-working-directory-pathname! 1) outside)
       (start-thread-timer)))))