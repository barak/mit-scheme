
class.scm,2583
(define-structure (class 31,1058
(define (make-class 49,1527
(define class-metatag76,2432
(define class-tag?79,2493
(define make-class-tag82,2556
(define (make-trivial-subclass 85,2640
(define <object>88,2774
(define (class-name 100,3107
(define (class-direct-superclasses 103,3187
(define (class-direct-slot-names 107,3315
(define (class-precedence-list 110,3434
(define (class-slots 113,3547
(define (class-slot 116,3630
(define (class->dispatch-tag 123,3872
(define (subclass? 126,3978
(define (guarantee-class 133,4124
(define (compute-precedence-list 138,4301
(define (compute-slots 155,4974
(define (topological-sort 189,6046
(define (build-transitive-closure 231,7425
(define (build-constraints 240,7736
(define (remove-if 253,8125
(define (remove-if! 261,8317
(define (remove-item! 280,8858
(define <instance> 295,9194
(define-syntax define-primitive-class297,9260
(define-primitive-class <boolean> 303,9442
(define-primitive-class <char> 304,9486
(define-primitive-class <pair> 305,9527
(define-primitive-class <record> 306,9568
(define-primitive-class <string> 307,9611
(define-primitive-class <symbol> 308,9654
(define-primitive-class <vector> 309,9697
(define-primitive-class <number> 311,9741
(define-primitive-class <complex> 312,9784
(define-primitive-class <real> 313,9828
(define-primitive-class <rational> 314,9870
(define-primitive-class <integer> 315,9913
(define-primitive-class <exact> 317,9960
(define-primitive-class <exact-complex> 318,10002
(define-primitive-class <exact-real> 319,10061
(define-primitive-class <exact-rational> 320,10122
(define-primitive-class <exact-integer> 321,10188
(define-primitive-class <inexact> 323,10257
(define-primitive-class <inexact-complex> 324,10301
(define-primitive-class <inexact-real> 325,10364
(define-primitive-class <inexact-rational> 326,10429
(define-primitive-class <inexact-integer> 327,10499
(define-primitive-class <fixnum> 329,10572
(define-primitive-class <bignum> 330,10622
(define-primitive-class <ratnum> 331,10672
(define-primitive-class <flonum> 332,10723
(define-primitive-class <flonum-vector> 333,10776
(define-primitive-class <recnum> 334,10826
(define-primitive-class <procedure> 336,10871
(define-primitive-class <generic-procedure> 337,10917
(define-primitive-class <entity> 338,10974
(define (object-class 340,11022
(define (record-type-class 343,11108
(define (record-class 346,11172
(define (dispatch-tag->class 349,11258
(define (make-record-type-class 358,11558
(define built-in-class-table367,11816
(define <class> 401,13145

geneqht.scm,755
(define (make-eqht)31,1089
(define (eqht/get 37,1216
(define (eqht/put! 48,1547
(define (eqht/for-each 69,2201
(define (compute-key-hash 80,2489
(define (record-address-hash-table! 89,2757
(define (mark-address-hash-tables!)92,2851
(define address-hash-tables 97,2999
(define (grow-table! 102,3123
(define (shrink-table! 111,3363
(define (new-size! 120,3638
(define (reset-table! 126,3833
(define (compute-shrink-size 141,4346
(define (decrement-size 146,4474
(define (rehash-table-from-old-buckets! 154,4611
(define (rehash-table-entries! 164,4954
(define (maybe-shrink-table! 179,5494
(define (rehash-table! 186,5786
(define (extract-table-entries! 192,5981
(define-structure (eqht 211,6482
(define-integrable minimum-size 219,6676

generic.scm,1170
(define (make-generic-procedure 34,1131
(define-structure (generic-record59,2230
(define (generic-procedure? 72,2545
(define (generic-record/arity 78,2797
(define (generic-procedure-arity 83,2939
(define (generic-procedure-arity-min 87,3074
(define (generic-procedure-arity-max 91,3221
(define (generic-procedure-name 95,3368
(define (generic-procedure-generator 99,3501
(define (set-generic-procedure-generator! 103,3648
(define (purge-generic-procedure-cache 113,4032
(define (%reset-generic-procedure-cache! 131,4651
(define (%purge-generic-procedure-cache! 135,4793
(define (guarantee-generic-procedure 145,5183
(define (guarantee-generator 151,5435
(define (compute-apply-generic 161,5726
(define (apply-generic 172,6079
(define (generic-procedure-applicable? 208,7100
(define (apply-generic-1 225,7733
(define (apply-generic-2 234,7975
(define (apply-generic-3 244,8257
(define (apply-generic-4 255,8579
(define (compute-method-and-store 267,8941
(define generic-procedure-records 288,9642
(define generic-procedure-records-mutex 289,9689
(define condition-type:no-applicable-methods291,9751
(define error:no-applicable-methods301,10179

genmult.scm,894
(define (generic-procedure-generator-list 47,1962
(define (add-generic-procedure-generator 55,2158
(define (remove-generic-procedure-generator 63,2438
(define (remove-generic-procedure-generators 82,3015
(define (generic-procedure-default-generator 89,3302
(define (set-generic-procedure-default-generator! 94,3463
(define (install-multiplexer 104,3840
(define (add-generator 112,4058
(define (maybe-deinstall-multiplexer 115,4162
(define (make-multiplexer)125,4564
(define (multiplexer? 130,4737
(define (multiplexer-list 134,4845
(define (set-multiplexer-list! 137,4941
(define (multiplexer-default 140,5057
(define (set-multiplexer-default! 143,5159
(define-structure (multiplexer-record 146,5287
(define (multiplexer-dispatch 150,5377
(define multiplexer-tag169,5993
(define condition-type:extra-applicable-methods172,6059
(define error:extra-applicable-methods182,6496

instance.scm,560
(define-syntax constructor-case36,1209
(define-syntax instance-constructor-154,1742
(define-syntax instance-constructor-268,2267
(define-syntax instance-constructor-3129,4066
(define-syntax ucode-type167,5301
(define (instance-constructor 173,5473
(define-syntax make-initialization-1235,7438
(define-syntax make-initialization-2247,7860
(define (make-initialization 307,9865
(define initialize-instance328,10539
(define (instance? 331,10627
(define (instance-class 336,10796
(define (instance-predicate 339,10885
(define (instance-of? 352,11287

macros.scm,992
(define-syntax define-class31,1057
(define (canonicalize-slot-argument 73,2408
(define (parse-define-class-name 90,2824
(define (parse-define-class-name-1 146,4460
(define (parse-constructor-option 160,4789
(define (optional? 170,5159
(define (default-predicate-name 173,5232
(define (default-constructor-name 176,5343
(define (make-named-lambda 179,5460
(define (absolute 190,5789
(define (extract-generic-definitions! 193,5899
(define (translate-define-arg 227,6918
(define (plist-lookup 257,7924
(define (strip-angle-brackets 265,8125
(define-syntax define-generic273,8394
(define-syntax define-method292,8980
(define-syntax define-computed-method310,9608
(define-syntax define-computed-emp326,10216
(define-syntax method343,10849
(define (make-method-sexp 358,11352
(define (match 419,13095
(define (call-next-method-used? 429,13349
(define free-variable?450,13993
(define (parse-specialized-lambda-list 510,15906
(define (extract-required-specializers 585,18089

method.scm,1989
(define (add-method 33,1120
(define method-member63,1985
(define computed-emp-member70,2178
(define (delete-method 77,2351
(define (guarantee-valid-method 82,2558
(define (guarantee-method 91,2976
(define (purge-method-entries 95,3102
(define (add-methods 101,3299
(define (method-combinator-record 106,3432
(define (method-combinator? 117,3788
(define (make-method-combinator)121,3909
(define-structure (combinator-record 128,4117
(define (modify-methods 131,4213
(define (generic-procedure-methods 137,4414
(define (compute-method 146,4688
(define (compute-effective-method-procedure 151,4842
(define (try-computed-emps 165,5387
(define (compute-methods 193,6301
(define (compute-methods-1 196,6406
(define (method-applicable? 229,7373
(define (subclasses? 233,7520
(define (sort-methods 239,7754
(define (restricted-specializers? 255,8178
(define (specializers? 266,8485
(define (specializer? 271,8604
(define (guarantee-specializers 276,8721
(define (specializers=288,9149
(define (specializer=303,9516
(define (eq-set=307,9616
(define (specializer-classes 311,9724
(define-structure (union-specializer 321,9976
(define (union-specializer 324,10082
(define (eliminate-duplicates 330,10279
(define (enumerate-union-specializers 339,10501
(define (new-method-specializers 359,11247
(define <method>373,11705
(define (method? 376,11779
(define method-specializers379,11839
(define method-procedure382,11919
(define <concrete-method>386,11994
(define (concrete-method? 389,12076
(define make-method392,12154
(define <chained-method>400,12386
(define make-chained-method403,12475
(define (chained-method? 410,12721
(define <computed-method>414,12798
(define make-computed-method417,12880
(define (computed-method? 424,13129
(define <computed-emp>428,13208
(define make-computed-emp431,13287
(define (computed-emp? 439,13545
(define computed-emp-key442,13617
(define (try-emp-short-circuits 453,14177
(define emp-short-circuits459,14392

microbench.scm,1140
(define (f1 31,1075
(define (f2 34,1096
(define (rf 38,1123
(define (get-f5)41,1146
(define (get-f6 45,1186
(define (fv 50,1234
(define-class <c1> 53,1270
(define-class <c2> 56,1298
(define-class <c3> 59,1329
(define fx1 62,1360
(define fx2 63,1397
(define fx3 64,1434
(define-generic fx1* 66,1472
(define-generic fx2* 67,1505
(define-generic fx3* 68,1538
(define-generic g1 74,1701
(define-method g1 75,1732
(define (get-g1)76,1778
(define-generic g2 78,1800
(define-method g2 79,1831
(define-method g2 80,1877
(define-generic g3 82,1924
(define-method g3 83,1961
(define (null-test)85,2021
(define (f1-test)92,2221
(define (f2-test)100,2433
(define (f3-test)108,2648
(define (f4-test)116,2860
(define (f5-test)124,3075
(define (f6-test)133,3302
(define (fv-test)142,3531
(define (fx1-test)148,3645
(define (fx2-test)157,3889
(define (fx3-test)168,4178
(define (fx1*-test)181,4512
(define (fx2*-test)190,4758
(define (fx3*-test)201,5050
(define (g1-test)214,5389
(define (g2-test)222,5601
(define (g3-test)231,5827
(define (g4-test)239,6042
(define (run-test 248,6269
(define (run-tests)261,6574

printer.scm,189
(define write-instance31,1066
(define (write-instance-helper 84,2548
(define-print-method instance?95,2796
(define (instance-description 98,2846
(define-pp-describer instance?107,3103

recslot.scm,392
(define (%record-accessor-generator 31,1069
(define (%record-modifier-generator 38,1265
(define (%record-initpred-generator 45,1461
(define-syntax generate-index-cases52,1657
(define (%record-accessor 64,2050
(define (%record-modifier 74,2405
(define (%record-initpred 80,2593
(define (%record-slot-name 88,2872
(define %record-slot-index103,3385
(define %record-slot-names114,3701

slot.scm,1067
(define-structure (slot-descriptor 31,1065
(define (slot-name 37,1227
(define (slot-class 41,1330
(define (slot-index 45,1436
(define (slot-property 49,1542
(define (slot-properties 55,1685
(define (slot-initializer 58,1767
(define (slot-initial-value 61,1840
(define (slot-initial-value? 64,1940
(define (guarantee-slot-descriptor 67,2043
(define (method-constructor 89,2676
(define slot-accessor-method 101,3051
(define slot-modifier-method 102,3129
(define slot-initpred-method 103,3207
(define (accessor-constructor 105,3286
(define slot-accessor 111,3480
(define slot-modifier 112,3549
(define slot-initpred 113,3618
(define (install-slot-accessor-methods 115,3688
(define (slot-value 134,4297
(define (set-slot-value! 137,4388
(define (slot-initialized? 140,4497
(define (compute-slot-index 144,4638
(define (canonicalize-slot-argument 150,4797
(define (slot-argument-plist? 160,5067
(define (compute-slot-descriptor 169,5289
(define (merge-slot-arguments 173,5450
(define interacting-options204,6199
(define (plist->alist 207,6262

tvector.scm,528
(define (make-tagged-vector 35,1253
(define (tagged-vector 40,1466
(define (tagged-vector? 44,1590
(define (tagged-vector-tag 49,1761
(define (set-tagged-vector-tag! 53,1877
(define (tagged-vector-length 58,2068
(define (tagged-vector-element 62,2201
(define (set-tagged-vector-element! 66,2355
(define (tagged-vector-element-initialized? 70,2532
(define (guarantee-tagged-vector 75,2760
(define (guarantee-tagged-vector-ref 79,2911
(define (guarantee-index-integer 85,3161
(define record-slot-uninitialized89,3336

sos.pkg,221
MIT/GNU Scheme is free software;10,323
the Free Software Foundation;12,463
the Free Software Foundation; either version 2 of the License,12,463
the Free Software Foundation; either version 2 of the License, or 12,463

load.scm,0

ed-ffi.scm,0

compile.scm,0
