
class.scm,2582
(define-structure (class 31,1052
(define (make-class 49,1521
(define class-metatag76,2426
(define class-tag?79,2487
(define make-class-tag82,2550
(define (make-trivial-subclass 85,2634
(define <object>88,2768
(define (class-name 100,3101
(define (class-direct-superclasses 103,3181
(define (class-direct-slot-names 107,3309
(define (class-precedence-list 110,3428
(define (class-slots 113,3541
(define (class-slot 116,3624
(define (class->dispatch-tag 123,3866
(define (subclass? 126,3972
(define (guarantee-class 133,4118
(define (compute-precedence-list 138,4295
(define (compute-slots 155,4968
(define (topological-sort 189,6040
(define (build-transitive-closure 231,7419
(define (build-constraints 240,7730
(define (remove-if 253,8119
(define (remove-if! 261,8311
(define (remove-item! 280,8852
(define <instance> 295,9188
(define-syntax define-primitive-class297,9254
(define-primitive-class <boolean> 303,9436
(define-primitive-class <char> 304,9480
(define-primitive-class <pair> 305,9521
(define-primitive-class <record> 306,9562
(define-primitive-class <string> 307,9605
(define-primitive-class <symbol> 308,9648
(define-primitive-class <vector> 309,9691
(define-primitive-class <number> 311,9735
(define-primitive-class <complex> 312,9778
(define-primitive-class <real> 313,9822
(define-primitive-class <rational> 314,9864
(define-primitive-class <integer> 315,9907
(define-primitive-class <exact> 317,9954
(define-primitive-class <exact-complex> 318,9996
(define-primitive-class <exact-real> 319,10055
(define-primitive-class <exact-rational> 320,10116
(define-primitive-class <exact-integer> 321,10182
(define-primitive-class <inexact> 323,10251
(define-primitive-class <inexact-complex> 324,10295
(define-primitive-class <inexact-real> 325,10358
(define-primitive-class <inexact-rational> 326,10423
(define-primitive-class <inexact-integer> 327,10493
(define-primitive-class <fixnum> 329,10566
(define-primitive-class <bignum> 330,10616
(define-primitive-class <ratnum> 331,10666
(define-primitive-class <flonum> 332,10717
(define-primitive-class <flonum-vector> 333,10770
(define-primitive-class <recnum> 334,10820
(define-primitive-class <procedure> 336,10865
(define-primitive-class <generic-procedure> 337,10911
(define-primitive-class <entity> 338,10968
(define (object-class 340,11016
(define (record-type-class 343,11102
(define (record-class 346,11166
(define (dispatch-tag->class 349,11252
(define (make-record-type-class 358,11552
(define built-in-class-table367,11810
(define <class> 401,13139

geneqht.scm,755
(define (make-eqht)31,1083
(define (eqht/get 37,1210
(define (eqht/put! 48,1541
(define (eqht/for-each 69,2195
(define (compute-key-hash 80,2483
(define (record-address-hash-table! 89,2751
(define (mark-address-hash-tables!)92,2845
(define address-hash-tables 97,2993
(define (grow-table! 102,3117
(define (shrink-table! 111,3357
(define (new-size! 120,3632
(define (reset-table! 126,3827
(define (compute-shrink-size 141,4340
(define (decrement-size 146,4468
(define (rehash-table-from-old-buckets! 154,4605
(define (rehash-table-entries! 164,4948
(define (maybe-shrink-table! 179,5488
(define (rehash-table! 186,5780
(define (extract-table-entries! 192,5975
(define-structure (eqht 211,6476
(define-integrable minimum-size 219,6670

generic.scm,1170
(define (make-generic-procedure 34,1125
(define-structure (generic-record59,2224
(define (generic-procedure? 72,2539
(define (generic-record/arity 78,2791
(define (generic-procedure-arity 83,2933
(define (generic-procedure-arity-min 87,3068
(define (generic-procedure-arity-max 91,3215
(define (generic-procedure-name 95,3362
(define (generic-procedure-generator 99,3495
(define (set-generic-procedure-generator! 103,3642
(define (purge-generic-procedure-cache 113,4026
(define (%reset-generic-procedure-cache! 131,4645
(define (%purge-generic-procedure-cache! 135,4787
(define (guarantee-generic-procedure 145,5177
(define (guarantee-generator 151,5429
(define (compute-apply-generic 161,5720
(define (apply-generic 172,6073
(define (generic-procedure-applicable? 208,7094
(define (apply-generic-1 225,7727
(define (apply-generic-2 234,7969
(define (apply-generic-3 244,8251
(define (apply-generic-4 255,8573
(define (compute-method-and-store 267,8935
(define generic-procedure-records 288,9636
(define generic-procedure-records-mutex 289,9683
(define condition-type:no-applicable-methods291,9745
(define error:no-applicable-methods301,10173

genmult.scm,894
(define (generic-procedure-generator-list 47,1956
(define (add-generic-procedure-generator 55,2152
(define (remove-generic-procedure-generator 63,2432
(define (remove-generic-procedure-generators 82,3009
(define (generic-procedure-default-generator 89,3296
(define (set-generic-procedure-default-generator! 94,3457
(define (install-multiplexer 104,3834
(define (add-generator 112,4052
(define (maybe-deinstall-multiplexer 115,4156
(define (make-multiplexer)125,4558
(define (multiplexer? 130,4731
(define (multiplexer-list 134,4839
(define (set-multiplexer-list! 137,4935
(define (multiplexer-default 140,5051
(define (set-multiplexer-default! 143,5153
(define-structure (multiplexer-record 146,5281
(define (multiplexer-dispatch 150,5371
(define multiplexer-tag169,5987
(define condition-type:extra-applicable-methods172,6053
(define error:extra-applicable-methods182,6490

instance.scm,560
(define-syntax constructor-case36,1203
(define-syntax instance-constructor-154,1736
(define-syntax instance-constructor-268,2261
(define-syntax instance-constructor-3129,4060
(define-syntax ucode-type167,5295
(define (instance-constructor 173,5467
(define-syntax make-initialization-1235,7432
(define-syntax make-initialization-2247,7854
(define (make-initialization 307,9859
(define initialize-instance328,10533
(define (instance? 331,10621
(define (instance-class 336,10790
(define (instance-predicate 339,10879
(define (instance-of? 352,11281

macros.scm,992
(define-syntax define-class31,1051
(define (canonicalize-slot-argument 73,2402
(define (parse-define-class-name 90,2818
(define (parse-define-class-name-1 146,4454
(define (parse-constructor-option 160,4783
(define (optional? 170,5153
(define (default-predicate-name 173,5226
(define (default-constructor-name 176,5337
(define (make-named-lambda 179,5454
(define (absolute 190,5783
(define (extract-generic-definitions! 193,5893
(define (translate-define-arg 227,6912
(define (plist-lookup 257,7918
(define (strip-angle-brackets 265,8119
(define-syntax define-generic273,8388
(define-syntax define-method292,8974
(define-syntax define-computed-method310,9602
(define-syntax define-computed-emp326,10210
(define-syntax method343,10843
(define (make-method-sexp 358,11346
(define (match 419,13089
(define (call-next-method-used? 429,13343
(define free-variable?450,13987
(define (parse-specialized-lambda-list 510,15900
(define (extract-required-specializers 585,18083

method.scm,1989
(define (add-method 33,1114
(define method-member63,1979
(define computed-emp-member70,2172
(define (delete-method 77,2345
(define (guarantee-valid-method 82,2552
(define (guarantee-method 91,2970
(define (purge-method-entries 95,3096
(define (add-methods 101,3293
(define (method-combinator-record 106,3426
(define (method-combinator? 117,3782
(define (make-method-combinator)121,3903
(define-structure (combinator-record 128,4111
(define (modify-methods 131,4207
(define (generic-procedure-methods 137,4408
(define (compute-method 146,4682
(define (compute-effective-method-procedure 151,4836
(define (try-computed-emps 165,5381
(define (compute-methods 193,6295
(define (compute-methods-1 196,6400
(define (method-applicable? 229,7367
(define (subclasses? 233,7514
(define (sort-methods 239,7748
(define (restricted-specializers? 255,8172
(define (specializers? 266,8479
(define (specializer? 271,8598
(define (guarantee-specializers 276,8715
(define (specializers=288,9143
(define (specializer=303,9510
(define (eq-set=307,9610
(define (specializer-classes 311,9718
(define-structure (union-specializer 321,9970
(define (union-specializer 324,10076
(define (eliminate-duplicates 330,10273
(define (enumerate-union-specializers 339,10495
(define (new-method-specializers 359,11241
(define <method>373,11699
(define (method? 376,11773
(define method-specializers379,11833
(define method-procedure382,11913
(define <concrete-method>386,11988
(define (concrete-method? 389,12070
(define make-method392,12148
(define <chained-method>400,12380
(define make-chained-method403,12469
(define (chained-method? 410,12715
(define <computed-method>414,12792
(define make-computed-method417,12874
(define (computed-method? 424,13123
(define <computed-emp>428,13202
(define make-computed-emp431,13281
(define (computed-emp? 439,13539
(define computed-emp-key442,13611
(define (try-emp-short-circuits 453,14171
(define emp-short-circuits459,14386

microbench.scm,1140
(define (f1 31,1069
(define (f2 34,1090
(define (rf 38,1117
(define (get-f5)41,1140
(define (get-f6 45,1180
(define (fv 50,1228
(define-class <c1> 53,1264
(define-class <c2> 56,1292
(define-class <c3> 59,1323
(define fx1 62,1354
(define fx2 63,1391
(define fx3 64,1428
(define-generic fx1* 66,1466
(define-generic fx2* 67,1499
(define-generic fx3* 68,1532
(define-generic g1 74,1695
(define-method g1 75,1726
(define (get-g1)76,1772
(define-generic g2 78,1794
(define-method g2 79,1825
(define-method g2 80,1871
(define-generic g3 82,1918
(define-method g3 83,1955
(define (null-test)85,2015
(define (f1-test)92,2215
(define (f2-test)100,2427
(define (f3-test)108,2642
(define (f4-test)116,2854
(define (f5-test)124,3069
(define (f6-test)133,3296
(define (fv-test)142,3525
(define (fx1-test)148,3639
(define (fx2-test)157,3883
(define (fx3-test)168,4172
(define (fx1*-test)181,4506
(define (fx2*-test)190,4752
(define (fx3*-test)201,5044
(define (g1-test)214,5383
(define (g2-test)222,5595
(define (g3-test)231,5821
(define (g4-test)239,6036
(define (run-test 248,6263
(define (run-tests)261,6568

printer.scm,189
(define write-instance31,1060
(define (write-instance-helper 84,2542
(define-print-method instance?95,2790
(define (instance-description 98,2840
(define-pp-describer instance?107,3097

recslot.scm,392
(define (%record-accessor-generator 31,1063
(define (%record-modifier-generator 38,1259
(define (%record-initpred-generator 45,1455
(define-syntax generate-index-cases52,1651
(define (%record-accessor 64,2044
(define (%record-modifier 74,2399
(define (%record-initpred 80,2587
(define (%record-slot-name 88,2866
(define %record-slot-index103,3379
(define %record-slot-names114,3695

slot.scm,1067
(define-structure (slot-descriptor 31,1059
(define (slot-name 37,1221
(define (slot-class 41,1324
(define (slot-index 45,1430
(define (slot-property 49,1536
(define (slot-properties 55,1679
(define (slot-initializer 58,1761
(define (slot-initial-value 61,1834
(define (slot-initial-value? 64,1934
(define (guarantee-slot-descriptor 67,2037
(define (method-constructor 89,2670
(define slot-accessor-method 101,3045
(define slot-modifier-method 102,3123
(define slot-initpred-method 103,3201
(define (accessor-constructor 105,3280
(define slot-accessor 111,3474
(define slot-modifier 112,3543
(define slot-initpred 113,3612
(define (install-slot-accessor-methods 115,3682
(define (slot-value 134,4291
(define (set-slot-value! 137,4382
(define (slot-initialized? 140,4491
(define (compute-slot-index 144,4632
(define (canonicalize-slot-argument 150,4791
(define (slot-argument-plist? 160,5061
(define (compute-slot-descriptor 169,5283
(define (merge-slot-arguments 173,5444
(define interacting-options204,6193
(define (plist->alist 207,6256

tvector.scm,528
(define (make-tagged-vector 35,1247
(define (tagged-vector 40,1460
(define (tagged-vector? 44,1584
(define (tagged-vector-tag 49,1755
(define (set-tagged-vector-tag! 53,1871
(define (tagged-vector-length 58,2062
(define (tagged-vector-element 62,2195
(define (set-tagged-vector-element! 66,2349
(define (tagged-vector-element-initialized? 70,2526
(define (guarantee-tagged-vector 75,2754
(define (guarantee-tagged-vector-ref 79,2905
(define (guarantee-index-integer 85,3155
(define record-slot-uninitialized89,3330

sos.pkg,221
MIT/GNU Scheme is free software;10,317
the Free Software Foundation;12,457
the Free Software Foundation; either version 2 of the License,12,457
the Free Software Foundation; either version 2 of the License, or 12,457

load.scm,0

ed-ffi.scm,0

compile.scm,0
