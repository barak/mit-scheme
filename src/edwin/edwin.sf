;;; -*-Scheme-*-
;;;
;;; $Id: edwin.sf,v 1.29 2001/12/18 21:57:13 cph Exp $
;;;
;;; Copyright (c) 1991-2001 Massachusetts Institute of Technology
;;;
;;; This program is free software; you can redistribute it and/or
;;; modify it under the terms of the GNU General Public License as
;;; published by the Free Software Foundation; either version 2 of the
;;; License, or (at your option) any later version.
;;;
;;; This program is distributed in the hope that it will be useful,
;;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
;;; General Public License for more details.
;;;
;;; You should have received a copy of the GNU General Public License
;;; along with this program; if not, write to the Free Software
;;; Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
;;; 02111-1307, USA.

(load-option 'CREF)

(if (not (name->package '(EDWIN)))
    (let ((package-set (package-set-pathname "edwin")))
      (if (not (file-exists? package-set))
	  (cref/generate-trivial-constructor "edwin"))
      (construct-packages-from-file (fasload package-set))))

(if (lexical-unreferenceable? (->environment '(EDWIN CLASS-CONSTRUCTOR))
			      'CLASS-DESCRIPTORS)
    (begin
      (let ((sf-and-load
	     (lambda (files package)
	       (fluid-let ((sf/default-syntax-table (->environment '())))
		 (sf-conditionally files))
	       (for-each (lambda (file)
			   (load (string-append file ".bin") package))
			 files))))
	(sf-and-load '("macros") '(EDWIN MACROS))
	(sf-and-load '("clsmac") '(EDWIN CLASS-MACROS))
	(sf-and-load '("xform")
		     '(EDWIN CLASS-MACROS TRANSFORM-INSTANCE-VARIABLES))
	(sf-and-load '("class") '(EDWIN))
	(sf-and-load '("clscon") '(EDWIN CLASS-CONSTRUCTOR)))))

(let ((read-class-definitions
       (lambda (filename)
	 (fresh-line)
	 (write-string "Pre-loading class definitions from ")
	 (write filename)
	 (syntax* (read-file (string-append filename ".scm"))
		  (->environment '(EDWIN WINDOW)))
	 (write-string " -- done")
	 (newline))))
  (read-class-definitions "window")
  (read-class-definitions "utlwin")
  (read-class-definitions "modwin")
  (read-class-definitions "bufwin")
  (read-class-definitions "comwin")
  (read-class-definitions "buffrm")
  (read-class-definitions "edtfrm"))

(load "decls")

(cref/generate-constructors "edwin")
(sf-conditionally "edwin.ldr")