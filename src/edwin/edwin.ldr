#| -*-Scheme-*-

Copyright (C) 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994,
    1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005,
    2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014 Massachusetts
    Institute of Technology

This file is part of MIT/GNU Scheme.

MIT/GNU Scheme is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or (at
your option) any later version.

MIT/GNU Scheme is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with MIT/GNU Scheme; if not, write to the Free Software
Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301,
USA.

|#

;;; program to load package contents
;;; **** This program (unlike most .ldr files) is not generated by a program.

(declare (usual-integrations))

(lambda (package/loader key-alist)
  (let ((to-avoid-list (if (file-exists? "edwin.bad")
			   (fasload "edwin.bad")
			   '()))
	(bad-environment-tag '*BAD-ENVIRONMENT*))
    (let ((->environment
	   (lambda (spec)
	     (if (name->package spec)
		 (->environment spec)
		 (cons bad-environment-tag spec)))))
      (define (load file env)
	(cond ((string-member? file to-avoid-list)
	       (newline)
	       (write-string "* skipping ")
	       (write-string file)
	       false)
	      ((and (pair? env)
		    (eq? (car env) bad-environment-tag))
	       (error "Attempting to load into non-existent package"
		      file (cdr env)))
	      (else (package/loader file env)
		    true)))
      (define (load-set files env)
	(if (null? files)
	    true
	    (let ((val (load (car files) env)))
	      (boolean-and val (load-set (cdr files) env)))))
      (define (load-set-and-initialize! files env)
	(and (load-set files env)
	     ((access initialize-package! env))))
      (define (lookup var)
	(cond ((assq var key-alist) => cdr)
	      (else false)))
      (define (load-case var alist env)
	(for-each (lambda (key/file)
		    (and (eq? (lookup var) (car key/file))
			 (load (cdr key/file) env)))
		  alist))
      (define string-member? (member-procedure string=?))
      (define (boolean-and a b) (and a b))

      (if (memq (lookup 'OS-TYPE) '(UNIX OS/2 NT))
	  (begin
	    (load-option 'SUBPROCESS)
	    (load-option 'SYNCHRONOUS-SUBPROCESS)))
      (load-option 'RB-TREE)
      (load-option 'HASH-TABLE)
      (load-option 'REGULAR-EXPRESSION)
      (load-option 'MIME-CODEC)

      (let ((environment (->environment '(EDWIN))))
	(load "utils" environment)
	(load "nvector" environment)
	(load "ring" environment)
	(load "strtab" environment)
	(load "strpad" environment)
	(load "macros" (->environment '(EDWIN MACROS)))
	(load "class" environment)
	(load "clscon" (->environment '(EDWIN CLASS-CONSTRUCTOR)))
	(load "clsmac" (->environment '(EDWIN CLASS-MACROS)))
	(load "xform"
	      (->environment
	       '(EDWIN CLASS-MACROS TRANSFORM-INSTANCE-VARIABLES)))
	(load "paths" environment)
	(load "struct" environment)
	(load "grpops" (->environment '(EDWIN GROUP-OPERATIONS)))
	(load "txtprp" (->environment '(EDWIN TEXT-PROPERTIES)))
	(load "regops" environment)
	(load "motion" environment)
	(load "search" environment)
	(load "image" environment)
	(load "comman" environment)
	(load "docstr" environment)
	(if (not (memq (lookup 'OS-TYPE) '(DOS NT)))
	    (set! (access *external-doc-strings?* environment) #f))
	(load "comtab" (->environment '(EDWIN COMTAB)))
	(load "modes" environment)
	(load "buffer" environment)
	(load "bufset" environment)
	(load "display" (->environment '(EDWIN DISPLAY-TYPE)))
	(load "screen" (->environment '(EDWIN SCREEN)))
	(load "winren" environment)

	(let ((environment (->environment '(EDWIN WINDOW))))
	  (load "window" environment)
	  (load "utlwin" environment)
	  (load "bufwin" environment)
	  (load "bufwfs" environment)
	  (load "bufwiu" environment)
	  (load "bufwmc" environment)
	  (load "comwin" (->environment '(EDWIN WINDOW COMBINATION)))
	  (load "modwin" environment)
	  (load "buffrm" environment)
	  (load "edtfrm" environment))

	(load "calias" environment)
	(load "edtstr" environment)
	(load "editor" environment)
	(load "curren" environment)
	;; "undo" must be loaded after "editor":
	(load "undo" (->environment '(EDWIN UNDO)))
	(load "simple" environment)
	(load "debuge" environment)
	(load "modlin" (->environment '(EDWIN MODELINE-STRING)))
	(load "input" (->environment '(EDWIN KEYBOARD)))
	(load "prompt" (->environment '(EDWIN PROMPT)))
	(load "comred" (->environment '(EDWIN COMMAND-READER)))
	(load "bufinp" (->environment '(EDWIN BUFFER-INPUT-PORT)))
	(load "bufout" (->environment '(EDWIN BUFFER-OUTPUT-PORT)))
	(load "winout" (->environment '(EDWIN WINDOW-OUTPUT-PORT)))
	(load "things" environment)
	(load "tparse" environment)
	(load "syntax" environment)
	(load "regexp" (->environment '(EDWIN REGULAR-EXPRESSION)))
	(load "comatch" environment)
	(load "keyparse" (->environment '(EDWIN KEYPARSER)))
	(load "linden" (->environment '(EDWIN LISP-INDENTATION)))

	(case (lookup 'OS-TYPE)
	  ((UNIX)
	   (load "unix" environment))
	  ((DOS NT)
	   (load "dos" environment)
	   (load "dosfile" environment))
	  ((OS/2)
	   (load "os2" environment)
	   (load "dosfile" environment)))

	(load "fileio" environment)

	(if (not (eq? 'OS/2 (lookup 'OS-TYPE)))
	    (let ((env (->environment '(EDWIN SCREEN CONSOLE-SCREEN))))
	      (load-set-and-initialize! '("termcap" "tterm") env)
	      (if (memq (lookup 'OS-TYPE) '(DOS NT))
		  (begin
		    (load "ansi" env)
		    (if (load "bios" env)
			((access bios-initialize-package! env)))))))

        (case (lookup 'OS-TYPE)
	  ((NT)
	   (load-set-and-initialize! '("win32")
				     (->environment '(EDWIN SCREEN WIN32)))
	   (load-set-and-initialize! '("key-w32")
				     (->environment '(EDWIN WIN32-KEYS))))
	  ((UNIX)
	   (load-set-and-initialize! '("xterm")
				     (->environment '(EDWIN SCREEN X-SCREEN)))
	   (load "key-x11" (->environment '(EDWIN X-KEYS))))
	  ((OS/2)
	   (load-set-and-initialize! '("os2term")
				     (->environment
				      '(EDWIN SCREEN OS2-SCREEN)))))

	(load-case 'OS-TYPE
		   '((UNIX . "process")
		     (OS/2 . "process")
		     (DOS . "dosproc")
		     (NT . "process"))
		   (->environment '(EDWIN PROCESS)))

	(load "mousecom" environment)
        (case (lookup 'OS-TYPE)
	  ((UNIX) (load "xcom" (->environment '(EDWIN X-COMMANDS))))
	  ((NT) (load "win32com" (->environment '(EDWIN WIN-COMMANDS))))
	  ((OS/2) (load "os2com" (->environment '(EDWIN OS2-COMMANDS)))))
	;; debug depends on button1-down defined in mousecom
	(load "debug" (->environment '(EDWIN DEBUGGER)))

	(let ((env (->environment '(EDWIN DIRED))))
	  (load "dired" env)
	  (case (lookup 'OS-TYPE)
	    ((UNIX) (load "dirunx" env))
	    ((OS/2) (load "diros2" env))
	    ((NT) (load "dirw32" env))))

	(load "abbrev" environment)
	(load "argred" (->environment '(EDWIN COMMAND-ARGUMENT)))
	(load "autold" environment)
	(load "autosv" environment)
	(load "basic" environment)
	(load "bufcom" environment)
	(load "bufmnu" (->environment '(EDWIN BUFFER-MENU)))
	(load "c-mode" environment)
	(load "javamode" environment)
	(load "cinden" (->environment '(EDWIN C-INDENTATION)))
	(load "comhst" environment)
	(load "comint" environment)
	(load "compile" environment)
	(load "dabbrev" environment)
	(load "evlcom" environment)
	(load "filcom" environment)
	(load "fill" environment)
	(load "hlpcom" environment)
	(load "info" (->environment '(EDWIN INFO)))
	(load "intmod" (->environment '(EDWIN INFERIOR-REPL)))
	(load "keymap" (->environment '(EDWIN COMMAND-SUMMARY)))
	(load "kilcom" environment)
	(load "kmacro" environment)
	(load "lincom" environment)
	(load "lspcom" environment)
	(load "malias" (->environment '(EDWIN MAIL-ALIAS)))
	(load "motcom" environment)
	(load "occur" (->environment '(EDWIN OCCURRENCE)))
	(load "outline" environment)
	;;(load "rcs" (->environment '(EDWIN RCS)))
	(load "reccom" (->environment '(EDWIN RECTANGLE)))
	(load "regcom" (->environment '(EDWIN REGISTER-COMMAND)))
	(load "replaz" environment)
	(load "rfc822" (->environment '(EDWIN RFC822)))
	(load "rmail" (->environment '(EDWIN RMAIL)))
	(load "rmailsum" (->environment '(EDWIN RMAIL)))
	(load "rmailsrt" (->environment '(EDWIN RMAIL)))
	(load "schmod" environment)
	(load "sendmail" (->environment '(EDWIN SENDMAIL)))
	(load "sercom" environment)
	(load "iserch" (->environment '(EDWIN INCREMENTAL-SEARCH)))
	(load "shell" environment)
	(load "tagutl" (->environment '(EDWIN TAGS)))
	(load "texcom" environment)
	(load "htmlmode" environment)
        (load "diff" (->environment '(EDWIN DIFF)))
	(load "rcsparse" (->environment '(EDWIN RCS-PARSE)))
	(load "vc" (->environment '(EDWIN VC)))
	(load "vc-rcs" (->environment '(EDWIN VC)))
	(load "vc-cvs" (->environment '(EDWIN VC)))
	(load "vc-svn" (->environment '(EDWIN VC)))
	(load "vc-bzr" (->environment '(EDWIN VC)))
	(load "vc-git" (->environment '(EDWIN VC)))
	(load "wincom" environment)
	(load "scrcom" environment)
	(load "modefs" environment)
	(load "rename" environment)
	(load "loadef" environment)
	#|
	(load-set-and-initialize! '("bochser" "bochsmod")
				  (->environment '(EDWIN BOCHSER)))
	|#
	(load "notify" environment)
	(if (access *external-doc-strings?* environment)
	    (begin
	      (set! (access *external-doc-strings?* environment) false)
	      (warn "Remember to use ``dump-doc-strings''!")))))))