#| -*-Scheme-*-

$Id: compiler.sf,v 1.22 2001/12/20 03:04:02 cph Exp $

Copyright (c) 1988-1999, 2001 Massachusetts Institute of Technology

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or (at
your option) any later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307,
USA.
|#

;;;; Script to incrementally syntax the compiler

(load-option 'CREF)

;; Guarantee that the compiler's package structure exists.
(if (not (name->package '(COMPILER)))
    (let ((package-set (package-set-pathname "compiler")))
      (if (not (file-exists? package-set))
	  (cref/generate-trivial-constructor "compiler"))
      (construct-packages-from-file (fasload package-set))))

;; Guarantee that the necessary syntactic transforms and optimizers
;; are loaded.
(if (lexical-unreferenceable? (->environment '(COMPILER)) 'SYNTAX-FILES!)
    (let ((sf-and-load
	   (lambda (files package)
	     (sf-conditionally files)
	     (for-each (lambda (file)
			 (load (string-append file ".bin") package))
		       files))))
      (load-option 'HASH-TABLE)
      (fresh-line)
      (newline)
      (write-string "---- Loading compile-time files ----")
      (newline)
      (sf-and-load '("base/switch") '(COMPILER))
      (sf-and-load '("base/macros") '(COMPILER MACROS))
      ((access initialize-package! (->environment '(COMPILER MACROS))))
      (sf-and-load '("machines/bobcat/decls") '(COMPILER DECLARATIONS))
      (let ((environment (->environment '(COMPILER DECLARATIONS))))
	(set! (access source-file-expression environment) "*.scm")
	((access initialize-package! environment)))
      (sf-and-load '("base/pmlook") '(COMPILER PATTERN-MATCHER/LOOKUP))
      (sf-and-load '("base/pmpars") '(COMPILER PATTERN-MATCHER/PARSER))
      (fluid-let ((sf/default-syntax-table (->environment '(COMPILER))))
	(sf-and-load '("machines/bobcat/machin") '(COMPILER)))
      (fluid-let ((sf/default-declarations
		   '((integrate-external "insseq")
		     (integrate-external "machin")
		     (usual-definition (set expt)))))
	(sf-and-load '("machines/bobcat/assmd") '(COMPILER ASSEMBLER)))
      (sf-and-load '("back/syntax") '(COMPILER LAP-SYNTAXER))
      (sf-and-load '("machines/bobcat/coerce"
		     "back/asmmac"
		     "machines/bobcat/insmac")
		   '(COMPILER LAP-SYNTAXER))
      (sf-and-load '("base/scode") '(COMPILER))
      (sf-and-load '("base/pmerly") '(COMPILER PATTERN-MATCHER/EARLY))
      (sf-and-load '("back/syerly") '(COMPILER LAP-SYNTAXER))))

;; Resyntax any files that need it.
((access syntax-files! (->environment '(COMPILER))))

;; Rebuild the package constructors and cref.
(cref/generate-constructors "compiler")