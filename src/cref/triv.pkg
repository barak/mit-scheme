#| -*-Scheme-*-

Copyright (C) 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994,
    1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005,
    2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016,
    2017, 2018, 2019 Massachusetts Institute of Technology

This file is part of MIT/GNU Scheme.

MIT/GNU Scheme is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or (at
your option) any later version.

MIT/GNU Scheme is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with MIT/GNU Scheme; if not, write to the Free Software
Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301,
USA.

|#

;;;; CREF Packaging: hand-compiled package for bootstrapping

(vector
 'PACKAGE-DESCRIPTIONS
 2
 (let ((package
	(lambda (package-name ancestors exported-names imported-names)
	  (vector package-name
		  ancestors
		  '#()
		  (list->vector
		   (map (lambda (n.p)
			  (if (pair? n.p)
			      (vector (car n.p) (cdr n.p))
			      (vector n.p (car ancestors))))
			exported-names))
		  (list->vector
		   (map (lambda (n.p) (vector (car n.p) (cdr n.p)))
			imported-names))
		  #f))))
   (vector (package '(cross-reference)
		    '(())
		    '(cref/generate-all
		      cref/generate-constructors
		      cref/generate-cref
		      cref/generate-cref-unusual
		      cref/generate-trivial-constructor
		      cref/package-files)
		    '())
	   (package '(cross-reference analyze-file)
		    '((cross-reference) ())
		    '(analyze-file)
		    '())
	   (package '(cross-reference constructor)
		    '((cross-reference) ())
		    '(construct-external-descriptions)
		    '())
	   (package '(cross-reference formatter)
		    '((cross-reference) ())
		    '(format-packages
		      format-packages-unusual)
		    '())
	   (package '(cross-reference reader)
		    '((cross-reference) ())
		    '(read-file-analyses!
		      read-package-model
		      resolve-references!)
		    '((package-file? . (package))))))
 (let ((files
	(lambda (package-name . files)
	  (vector package-name
		  (vector (list->vector files))
		  '#()
		  '#()))))
   (vector (files '(cross-reference) "mset" "object" "toplev")
	   (files '(cross-reference analyze-file) "anfile")
	   (files '(cross-reference constructor) "conpkg")
	   (files '(cross-reference formatter) "forpkg")
	   (files '(cross-reference reader) "redpkg"))))