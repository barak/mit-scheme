#| -*-Scheme-*-

Copyright (C) 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994,
    1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005,
    2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013 Massachusetts
    Institute of Technology

This file is part of MIT/GNU Scheme.

MIT/GNU Scheme is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or (at
your option) any later version.

MIT/GNU Scheme is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with MIT/GNU Scheme; if not, write to the Free Software
Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301,
USA.

|#

;;;; Build Utilities
;;; package: (ffi build)

(define (compile-shim)
  (run-command (append cc-cmdline-prefix (command-line))))

(define (link-shim)
  (run-command (append CCLD LDFLAGS (command-line) MODULE_LDFLAGS)))

(define (install-shim libname)
  (let* ((pathname (pathname-as-directory libname))
	 (library-dir
	  (->namestring
	   (or (system-library-directory-pathname pathname)
	       (merge-pathnames pathname
				(system-library-directory-pathname))))))
    (run-command (list "rm" "-rf" library-dir))
    (run-command (list "mkdir" library-dir))
    (run-command (append (list "install" "-m" "644")
			 (command-line) (list library-dir)))
    (run-command (list "install" "-m" "644"
		       (string-append libname "-shim.so")
		       (string-append libname "-types.bin")
		       (string-append libname "-const.bin")
		       (->namestring
			(pathname-new-directory
			 library-dir
			 (except-last-pair
			  (pathname-directory library-dir))))))))

(define (install-load-option name #!optional directory)
  (guarantee-string name 'INSTALL-OPTION)
  (let ((dir (if (default-object? directory) name directory)))
    (guarantee-string dir 'INSTALL-OPTION)
    (rewrite-file (system-library-pathname "optiondb.scm")
		  (lambda (in out)
		    (rewrite-optiondb name dir in out)))))

(define (rewrite-file name rewriter)
  (let ((tmp (pathname-new-type name "tmp")))
    (call-with-exclusive-output-file tmp
      (lambda (out)
	(call-with-input-file name
	  (lambda (in)
	    (rewriter in out)))))
    (rename-file tmp name)))

(define (rewrite-optiondb name dirname in out)
  (do ((line (read-line in) (read-line in)))
      ((eof-object? line))
    (write-string line out)
    (newline out))
  (fresh-line out)
  (newline out)
  (write-string "(define-load-option '" out)
  (write-string name out)
  (newline out)
  (write-string "  (standard-system-loader \"" out)
  (write-string dirname out)
  (write-string "\"))" out))

(define (parse-words string)
  (burst-string string char-set:whitespace #t))

(define CC (parse-words "@CC@"))
(define CFLAGS (parse-words "@CFLAGS@"))
(define CCLD (parse-words "@CCLD@"))
(define LDFLAGS (parse-words "@LDFLAGS@"))
(define MODULE_LDFLAGS (parse-words "@MODULE_LDFLAGS@"))
(define AUXDIR/ "@libdir@/@AUXDIR_NAME@/")
(define INSTALL_DATA (parse-words "@INSTALL_DATA@"))
(define cc-cmdline-prefix
  (append
   (filter
    (lambda (i) (not (string=? "-DMIT_SCHEME" i)))
    (parse-words "@CC@ @DEFS@ @SCHEME_DEFS@ @CPPFLAGS@"))
   (list (string-append "-I" (->namestring
			      (directory-pathname
			       (system-library-pathname "mit-scheme.h")))))
   (parse-words "@CFLAGS@ @MODULE_CFLAGS@")))

(define (run-command command)
  (with-notification
   (lambda (port)
     (write-string (decorated-string-append "" " " "" command) port)
     (newline port))
   (lambda ()
     (let ((code (run-synchronous-subprocess
		  (car command) (cdr command)
		  'working-directory (working-directory-pathname))))
       (if (not (zero? code))
	   (error "Process exited with error code:" code command))))))