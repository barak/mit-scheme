% Automatic differentiation.

/T { 2 array astore } def       % x dx => [x dx]
/Tq { 0 get } def               % Tx => x (`position')
/Tv { 1 get } def               % Tx => dx (`velocity')
/Tqv { dup 0 get exch 1 get } def % [x dx] => x dx
/Tvar { 1.0 T } def             % x => [x 1]
/Tconst { 0.0 T } def           % x => [x 0]

/Tadd                           % Tx Ty => T(x+y)
{
    Tqv                         % Tx y dy
    3 -1 roll                   % y dy Tx
    Tqv                         % y dy x dx
    exch                        % y dy dx x
    4 -1 roll add               % dy dx x+y
    3 1 roll add                % x+y dx+dy
    T                           % T(x+y)
} def

/Tmul                           % Tx Ty => T(x*y)
{
    Tqv                         % Tx y dy
    3 -1 roll                   % y dy Tx
    Tqv                         % y dy x dx
    3 -1 roll                   % y x dx dy
    2 index mul                 % y x dx x*dy
    exch                        % y x x*dy dx
    3 index mul                 % y x x*dy y*dx
    add                         % y x y*dx+x*dy
    3 1 roll mul                % y*dx+x*dy x*y
    exch                        % x*y y*dx+x*dy
    T                           % T(x*y)
} def

/Tneg                           % Tx => T(-x)
{
    Tqv                         % x dx
    0 exch sub                  % x -dx
    exch                        % -dx x
    0 exch sub                  % -dx -x
    exch                        % -x -dx
    T                           % T(-x)
} def

/Trecip                         % Tx => T(1/x)
{
    Tqv exch                    % x dx
    1 exch div                  % dx 1/x
    dup dup                     % dx 1/x 1/x 1/x
    4 1 roll                    % 1/x dx 1/x 1/x
    0 exch sub                  % 1/x dx 1/x -1/x
    mul mul                     % 1/x -dx/x^2
    T                           % T(1/x)
} def

/Tsub { Tneg Tadd } def         % Tx Ty => T(x-y)
/Tdiv { Trecip Tmul } def       % Tx Ty => T(x/y)

/Tln                            % Tx => T(log x)
{
    Tqv                         % x dx
    exch dup ln                 % dx x log(x)
    3 1 roll                    % log(x) dx x
    div                         % log(x) dx/x
    T                           % T(log x)
} def

/Tln1p                          % Tx => T(log(1+x))
{
    Tqv                         % x dx
    exch dup                    % dx x x
    ln1p                        % dx x log(1+x)
    3 1 roll                    % log(1+x) dx x
    1 add                       % log(1+x) dx 1+x
    div                         % log(1+x) dx/(1+x)
    T                           % T(log(1+x))
} def

/Texp                           % Tx => T(e^x)
{
    Tqv                         % x dx
    exch 2.718281828 exch exp exch % e^x dx
    1 index mul                 % e^x e^x*dx
    T                           % T(e^x)
} def

/Texpm1                         % Tx => T(e^x-1)
{
    Tqv                         % x dx
    exch dup expm1              % dx x e^x-1
    3 1 roll                    % e^x-1 dx x
    2.718281828 exch exp        % e^x-1 dx e^x
    mul                         % e^x-1 e^x*dx
    T                           % T(e^x-1)
} def

/Tsin                           % Tx => T(sin(x))
{
    Tqv                         % x dx
    exch dup                    % dx x x
    sin exch cos                % dx sin(x) cos(x)
    3 -1 roll                   % sin(x) cos(x) dx
    0.017453292519943295 mul
    mul                         % sin(x) cos(x)*dx
    T                           % T(sin(x))
} def

/Tcos                           % Tx => T(cos(x))
{
    Tqv                         % x dx
    exch dup                    % dx x x
    cos exch sin                % dx cos(x) sin(x)
    3 -1 roll                   % cos(x) sin(x) dx
    0.017453292519943295 mul
    mul 1 exch sub              % cos(x) -sin(x)*dx
    T                           % T(cos(x))
} def

/Tlogistic                      % Tx => T(1/(1+e^{-x}))
{
    0.0 Tconst exch Tsub Texp	% T(e^{-x})
    1.0 Tconst Tadd		% T(1+e^{-x})
    1.0 Tconst exch Tdiv	% T(1/(1+e^{-x}))
} def

/Tlogit                         % Tp => T(log(p/(1-p)))
{
    dup Tq -1.0 logistic lt     % Tp (p<logistic(-1))
    1 index Tq 1.0 logistic gt  % Tp (p<logistic(-1)) (p>logistic(1))
    or {
        dup 1.0 Tconst exch Tsub % Tp T(1-p)
        Tdiv Tln                 % T(log(p/(1-p)))
    } {
        dup 2.0 Tconst Tmul     % Tp T2p
        1.0 Tconst exch Tsub    % Tp T(1-2p)
        exch Tdiv               % T((1-2p)/p)
        Tln1p                   % T(log1p((1-2p)/p))
        0.0 Tconst exch Tsub    % T(-log1p((1-2p)/p))
    } ifelse
} def

/Tlogithalf                     % Tp => T(log((1/2+p)/(1/2-p)))
{
    dup Tq abs 0.5 1.0 3.718281828 div sub le {
        dup 2.0 Tconst Tmul     % Tp T(2p)
        exch 0.5 Tconst exch Tsub % T(2p) T(1/2-p)
        Tdiv Tln1p              % T(log(1+2p/(1/2-p)))
    } {
        dup 0.5 Tconst Tadd     % T(p) T(1/2+p)
        exch 0.5 Tconst exch Tsub % T(1/2+p) T(1/2-p)
        Tdiv Tln                % T(log((1/2+p)/(1/2-p)))
    } ifelse
} def

/Tlerp                          % Tt fxmin fxmax => Tx
{
    1 index sub Tconst          % Tt fxmin T(fxmax-fxmin)
    3 -1 roll Tmul              % fxmin T((fxmax-fxmin)*t)
    exch Tconst Tadd            % T(fxmin+(fxmax-fxmin)*t)
} def
