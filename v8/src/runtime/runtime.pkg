#| -*-Scheme-*-

Copyright (c) 1988-1999 Massachusetts Institute of Technology

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or (at
your option) any later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
|#

;;;; Runtime System Packaging

(define-package ()
  (files "blowfish"
	 "bitstr"
	 "boole"
	 "boot"
	 "equals"
	 "fixart"
	 "global"
	 "lambdx"
	 "msort"
	 "qsort"
	 "queue"
	 "sfile"
	 "symbol"
	 "udata"
	 "vector")
  (file-case os-type
    ((unix) "unxprm")
    ((dos) "dosprm")
    ((nt) "ntprm")
    (else)))

(define-package (package)
  ;; The information appearing here must be duplicated in the cold load
  ;; sequence.  If you change this package make sure to edit that also.
  (files "packag")
  (parent ())
  (export ()
	  *allow-package-redefinition?*
	  environment->package
	  find-package
	  name->package
	  package/add-child!
	  package/child
	  package/children
	  package/environment
	  package/name
	  package/parent
	  package/reference
	  package/system-loader
	  package?
	  system-global-package)
  (export (runtime environment)
	  package-name-tag)
  (initialization (initialize-package!)))

(define-package (runtime)
  (files "version")
  (parent ())
  (initialization (initialize-package!)))

(define-package (runtime string)
  (files "string")
  (parent ())
  (export ()
	  burst-string
	  char->string
	  list->string
	  guarantee-string
	  make-string
	  reverse-string
	  reverse-string!
	  reverse-substring
	  reverse-substring!
	  set-string-length!
	  string
	  string->list
	  string-allocate
	  string-append
	  string-capitalize
	  string-capitalize!
	  string-capitalized?
	  string-ci<=?
	  string-ci<?
	  string-ci=?
	  string-ci>=?
	  string-ci>?
	  string-compare
	  string-compare-ci
	  string-copy
	  string-downcase
	  string-downcase!
	  string-fill!
	  string-find-next-char
	  string-find-next-char-ci
	  string-find-next-char-in-set
	  string-find-previous-char
	  string-find-previous-char-ci
	  string-find-previous-char-in-set
	  string-hash
	  string-hash-mod
	  string-head
	  string-length
	  string-lower-case?
	  string-match-backward
	  string-match-backward-ci
	  string-match-forward
	  string-match-forward-ci
	  string-maximum-length
	  string-null?
	  string-pad-left
	  string-pad-right
	  string-prefix-ci?
	  string-prefix?
	  string-ref
	  string-replace
	  string-replace!
	  string-search-all
	  string-search-backward
	  string-search-forward
	  string-set!
	  string-suffix-ci?
	  string-suffix?
	  string-tail
	  string-trim
	  string-trim-left
	  string-trim-right
	  string-upcase
	  string-upcase!
	  string-upper-case?
	  string<=?
	  string<?
	  string=?
	  string>=?
	  string>?
	  string?
	  substring
	  substring->list
	  substring-capitalize!
	  substring-capitalized?
	  substring-ci<?
	  substring-ci=?
	  substring-downcase!
	  substring-fill!
	  substring-find-next-char
	  substring-find-next-char-ci
	  substring-find-next-char-in-set
	  substring-find-previous-char
	  substring-find-previous-char-ci
	  substring-find-previous-char-in-set
	  substring-lower-case?
	  substring-match-backward
	  substring-match-backward-ci
	  substring-match-forward
	  substring-match-forward-ci
	  substring-move-left!
	  substring-move-right!
	  substring-prefix-ci?
	  substring-prefix?
	  substring-replace
	  substring-replace!
	  substring-search-all
	  substring-search-backward
	  substring-search-forward
	  substring-suffix-ci?
	  substring-suffix?
	  substring-upcase!
	  substring-upper-case?
	  substring<?
	  substring=?
	  substring?
	  vector-8b-fill!
	  vector-8b-find-next-char
	  vector-8b-find-next-char-ci
	  vector-8b-find-previous-char
	  vector-8b-find-previous-char-ci
	  vector-8b-ref
	  vector-8b-set!)
  (export (runtime char-syntax)
	  guarantee-substring))

(define-package (runtime 1d-property)
  (files "prop1d")
  (parent ())
  (export ()
	  1d-table/for-each
	  1d-table/alist
	  1d-table/get
	  1d-table/lookup
	  1d-table/put!
	  1d-table/remove!
	  1d-table?
	  make-1d-table)
  (initialization (initialize-package!)))

(define-package (runtime 2d-property)
  (files "prop2d")
  (parent ())
  (export ()
	  2d-get
	  2d-get-alist-x
	  2d-get-alist-y
	  2d-put!
	  2d-remove!)
  (initialization (initialize-package!)))

(define-package (runtime advice)
  (files "advice")
  (parent ())
  (export ()
	  *args*
	  *proc*
	  *result*
	  advice
	  advise-entry
	  advise-exit
	  break
	  break-both
	  break-entry
	  break-exit
	  entry-advice
	  exit-advice
	  trace
	  trace-both
	  trace-entry
	  trace-exit
	  unadvise
	  unadvise-entry
	  unadvise-exit
	  unbreak
	  unbreak-entry
	  unbreak-exit
	  untrace
	  untrace-entry
	  untrace-exit)
  (initialization (initialize-package!)))

(define-package (runtime apply)
  (files "apply")
  (parent ())
  (initialization (initialize-package!)))

(define-package (runtime character)
  (files "char")
  (parent ())
  (export ()
	  ascii->char
	  char->ascii
	  char->digit
	  char->integer
	  char->name
	  char-ascii?
	  char-bits
	  char-bits-limit
	  char-ci<=?
	  char-ci<?
	  char-ci=?
	  char-ci>=?
	  char-ci>?
	  char-code
	  char-code-limit
	  char-downcase
	  char-integer-limit
	  char-upcase
	  char<=?
	  char<?
	  char=?
	  char>=?
	  char>?
	  char?
	  chars->ascii
	  code->char
	  digit->char
	  integer->char
	  make-char
	  name->char)
  (initialization (initialize-package!)))

(define-package (runtime character-set)
  (files "chrset")
  (parent ())
  (export ()
	  ascii-range->char-set
	  char-alphabetic?
	  char-alphanumeric?
	  char-graphic?
	  char-lower-case?
	  char-numeric?
	  char-set
	  char-set-difference
	  char-set-intersection
	  char-set-invert
	  char-set-member?
	  char-set-members
	  char-set-union
	  char-set:alphabetic
	  char-set:alphanumeric
	  char-set:graphic
	  char-set:lower-case
	  char-set:newline
	  char-set:not-graphic
	  char-set:not-whitespace
	  char-set:numeric
	  char-set:standard
	  char-set:upper-case
	  char-set:whitespace
	  char-set?
	  char-standard?
	  char-upper-case?
	  char-whitespace?
	  chars->char-set
	  predicate->char-set
	  string->char-set)
  (initialization (initialize-package!)))

(define-package (runtime compiler-info)
  (files "infstr" "infutl")
  (parent ())
  (export ()
	  *save-uncompressed-files?*
	  *uncompressed-file-lifetime*
	  compiled-entry/block
	  compiled-entry/dbg-object
	  compiled-entry/offset
	  compiled-expression/scode
	  compiled-module?
	  compiled-module-eval
	  compiled-procedure/name
	  compiled-procedure/lambda
	  discard-debugging-info!
	  load-debugging-info-on-demand?
	  uncompress-ports)
  (export (runtime load)
	  compiled-module/expression
	  compiled-module/purification-root
	  fasload/update-debugging-info!)
  ;;(export (runtime program-copier)
  ;;	  dbg-info-vector?)
  (export (runtime debugger-command-loop)
	  special-form-procedure-name?)
  (export (runtime environment)
	  ;;dbg-block/find-name
	  dbg-block/find-variable
	  dbg-block/parent
	  dbg-block/parent-path-prefix
	  dbg-block/procedure
	  dbg-block/type
	  dbg-block/variables
	  dbg-continuation?
	  dbg-continuation/block
	  dbg-expression?
	  dbg-procedure?
	  dbg-procedure/block
	  dbg-procedure/label
	  dbg-procedure/name
	  dbg-procedure/source-code
	  dbg-variable?
	  dbg-variable/name
	  dbg-variable/path)
  (export (runtime debugging-info)
	  dbg-continuation?
	  dbg-continuation/inner
	  dbg-continuation/outer
	  dbg-continuation/type
	  dbg-procedure?
	  dbg-procedure/block
	  dbg-procedure/source-code
	  dbg-expression?)
  (export (runtime unparser)
	  compiled-entry/filename-and-index)
  (export (runtime continuation-parser)
	  compiled-code-block/dbg-descriptor
	  compiled-code-block/name
	  dbg-locator/file)
  (export (runtime compress)
	  uncompress-internal)
  (initialization (initialize-package!)))

(define-package (runtime console-i/o-port)
  (files "ttyio")
  (parent ())
  (export ()
	  console-i/o-port
	  console-input-port
	  console-output-port
	  set-console-i/o-port!)
  (export (runtime emacs-interface)
	  the-console-port
	  the-console-port-type)
  (initialization (initialize-package!)))

(define-package (runtime continuation)
  (files "contin")
  (parent ())
  (export ()
	  call-with-current-continuation
	  continuation/block-thread-events?
	  continuation/control-point
	  continuation/dynamic-state
	  continuation/type
	  continuation?
	  guarantee-continuation
	  make-continuation
	  non-reentrant-call-with-current-continuation
	  within-continuation)
  (export (runtime thread)
	  %within-continuation))

(define-package (runtime continuation-parser)
  (files "conpar")
  (parent ())
  (export ()
	  continuation->stack-frame
	  continuation/first-subproblem
	  hardware-trap-frame?
	  hardware-trap-frame/describe
	  hardware-trap-frame/print-registers
	  hardware-trap-frame/print-stack
	  hardware-trap-frame/code
	  microcode-return/code->type
	  microcode-return/name->type
	  stack-frame->continuation
	  stack-frame-type/code
	  stack-frame-type/compiled-return-address
	  stack-frame-type/properties
	  stack-frame-type/subproblem?
	  stack-frame-type?
	  stack-frame/block-thread-events?
	  stack-frame/compiled-code?
	  stack-frame/compiled-interrupt?
	  stack-frame/dynamic-state
	  stack-frame/elements
	  stack-frame/interrupt-mask
	  stack-frame/length
	  stack-frame/next
	  stack-frame/next-subproblem
	  stack-frame/offset
	  stack-frame/previous-type
	  stack-frame/properties
	  stack-frame/reductions
	  stack-frame/ref
	  stack-frame/repl-eval-boundary?
	  stack-frame/resolve-stack-address
	  stack-frame/return-address
	  stack-frame/return-code
	  stack-frame/skip-non-subproblems
	  stack-frame/subproblem?
	  stack-frame/type
	  stack-frame?)
  (export (runtime debugging-info)
	  stack-frame-type/interrupt-compiled-procedure
	  stack-frame-type/interrupt-compiled-expression
	  stack-frame-type/interrupt-compiled-return-address
	  stack-frame-type/restore-regs)
  (initialization (initialize-package!)))

(define-package (runtime control-point)
  (files "cpoint")
  (parent ())
  (export ()
	  control-point/element-stream
	  control-point/history
	  control-point/interrupt-mask
	  control-point/n-elements
	  control-point/next-control-point
	  control-point/previous-history-control-point
	  control-point/previous-history-offset
	  control-point/reusable?
	  control-point/unused-length
	  control-point?
	  make-control-point))

(define-package (runtime date/time)
  (files "datime")
  (parent ())
  (export ()
	  day-of-week/long-string
	  day-of-week/short-string
	  decode-universal-time
	  decoded-time->string
	  decoded-time->universal-time
	  decoded-time/date-string
	  decoded-time/day
	  decoded-time/day-of-week
	  decoded-time/daylight-savings-time?
	  decoded-time/hour
	  decoded-time/minute
	  decoded-time/month
	  decoded-time/second
	  decoded-time/time-string
	  decoded-time/year
	  decoded-time/zone
	  encode-universal-time
	  epoch
	  file-time->global-time-string
	  file-time->local-time-string
	  file-time->string
	  get-decoded-time
	  get-universal-time
	  global-decoded-time
	  local-decoded-time
	  make-decoded-time
	  month/long-string
	  month/max-days
	  month/short-string
	  string->decoded-time
	  string->file-time
	  string->universal-time
	  time-zone->string
	  time-zone?
	  universal-time->global-decoded-time
	  universal-time->global-time-string
	  universal-time->local-decoded-time
	  universal-time->local-time-string
	  universal-time->string))

(define-package (runtime debugger)
  (files "debug")
  (parent (runtime debugger-command-loop))
  (export ()
	  debug
	  debugger:auto-toggle?
	  debugger:count-subproblems-limit
	  debugger:list-breadth-limit
	  debugger:list-depth-limit
	  debugger:print-return-values?
	  debugger:string-length-limit
	  debugger:student-walk?
	  debugger:use-history?)
  (initialization (initialize-package!)))

(define-package (runtime debugger-command-loop)
  (files "dbgcmd")
  (parent ())
  (initialization (initialize-package!)))

(define-package (runtime debugger-utilities)
  (files "dbgutl")
  (parent (runtime debugger-command-loop))
  (export (runtime debugger-command-loop)
	  debug/read-eval-print-1
	  debugger-failure
	  debugger-message
	  debugger-presentation
	  output-to-string
	  print-user-friendly-name
	  show-environment-bindings
	  show-environment-name
	  show-environment-procedure
	  show-frame
	  show-frames
	  write-dbg-name)
  (initialization (initialize-package!)))

(define-package (runtime debugging-info)
  (files "framex")
  (parent ())
  (export ()
	  debugging-info/compiled-code?
	  debugging-info/evaluated-object-value
	  debugging-info/evaluated-object?
	  debugging-info/undefined-environment?
	  debugging-info/undefined-expression?
	  debugging-info/unknown-expression?
	  debugging-info/noise
	  debugging-info/noise?
	  stack-frame/debugging-info)
  (initialization (initialize-package!)))

(define-package (runtime defstruct)
  (files "defstr")
  (parent ())
  (export ()
	  define-structure/keyword-parser
	  make-define-structure-type
	  named-structure/description
	  named-structure?)
  (export (runtime unparser)
	  structure-tag/unparser-method)
  (initialization (initialize-package!)))

(define-package (runtime directory)
  (file-case os-type
    ((unix) "unxdir")
    ((dos) "dosdir")
    ((nt) "ntdir")
    ;;(else "unkdir")
    (else))
  (parent ())
  (export (runtime pathname)
	  *expand-directory-prefixes?*)
  (export ()
	  directory-read))

(define-package (runtime emacs-interface)
  (files "emacs")
  (parent ())
  (initialization (initialize-package!)))

(define-package (runtime procedure)
  (files "uproc")
  (parent ())
  (export ()
	  apply-hook-extra
	  apply-hook-procedure
	  apply-hook?
	  arity-dispatched-procedure?
	  compiled-closure->entry
	  compiled-closure/ref
	  compiled-closure/set!
	  compiled-closure?
	  compiled-procedure?
	  compound-procedure?
	  entity-extra
	  entity-procedure
	  entity?
	  implemented-primitive-procedure?
	  make-apply-hook
	  make-arity-dispatched-procedure
	  make-entity
	  make-primitive-procedure
	  primitive-procedure-name
	  primitive-procedure?
	  procedure-arity
	  procedure-arity-valid?
	  procedure-components
	  procedure-environment
	  procedure-lambda
	  procedure?
	  set-apply-hook-extra!
	  set-apply-hook-procedure!
	  set-entity-extra!
	  set-entity-procedure!)
  (export (runtime continuation-parser)
	  compiled-procedure-frame-size))

(define-package (runtime environment)
  (files "uenvir")
  (parent ())
  (export ()
	  compiled-procedure/environment
	  environment-arguments
	  environment-assign!
	  environment-assignable?
	  environment-bindings
	  environment-bound-names
	  environment-bound?
	  environment-has-parent?
	  environment-lambda
	  environment-lookup
	  environment-parent
	  environment-procedure-name
	  environment?
	  extend-ic-environment
	  ic-environment?
	  interpreter-environment?
	  make-null-interpreter-environment
	  system-global-environment?)
  (export (runtime debugger-utilities)
	  unavailable?)
  (export (runtime advice)
	  ic-environment/arguments
	  ic-environment/procedure)
  (export (runtime debugging-info)
	  stack-frame/environment))

(define-package (runtime environment-inspector)
  (files "where")
  (parent (runtime debugger-command-loop))
  (export ()
	  where)
  (initialization (initialize-package!)))

(define-package (runtime error-handler)
  (files "error")
  (parent ())
  (export ()
	  abort
	  access-condition
	  bind-condition-handler
	  bind-default-condition-handler
	  bind-restart
	  bound-restarts
	  break-on-signals
	  condition-accessor
	  condition-constructor
	  condition-predicate
	  condition-signaller
	  condition-type/error?
	  condition-type/field-names
	  condition-type/generalizations
	  condition-type/get
	  condition-type/properties
	  condition-type/put!
	  condition-type:arithmetic-error
	  condition-type:bad-range-argument
	  condition-type:cell-error
	  condition-type:control-error
	  condition-type:datum-out-of-range
	  condition-type:derived-file-error
	  condition-type:derived-port-error
	  condition-type:derived-thread-error
	  condition-type:divide-by-zero
	  condition-type:error
	  condition-type:file-error
	  condition-type:file-operation-error
	  condition-type:floating-point-overflow
	  condition-type:floating-point-underflow
	  condition-type:illegal-datum
	  condition-type:illegal-pathname-component
	  condition-type:no-such-restart
	  condition-type:port-error
	  condition-type:serious-condition
	  condition-type:simple-condition
	  condition-type:simple-error
	  condition-type:simple-warning
	  condition-type:thread-error
	  condition-type:unassigned-variable
	  condition-type:unbound-variable
	  condition-type:variable-error
	  condition-type:warning
	  condition-type:wrong-number-of-arguments
	  condition-type:wrong-type-argument
	  condition-type:wrong-type-datum
	  condition-type?
	  condition/continuation
	  condition/derived-thread?
	  condition/error?
	  condition/get
	  condition/other-thread
	  condition/properties
	  condition/put!
	  condition/report-string
	  condition/restarts
	  condition/type
	  condition?
	  continue
	  default/invoke-condition-handler
	  error
	  error-irritant/noise
	  error:bad-range-argument
	  error:datum-out-of-range
	  error:derived-file
	  error:derived-port
	  error:derived-thread
	  error:divide-by-zero
	  error:file-operation
	  error:illegal-pathname-component
	  error:no-such-restart
	  error:wrong-number-of-arguments
	  error:wrong-type-argument
	  error:wrong-type-datum
	  find-restart
	  first-bound-restart
	  format-error-message
	  hook/invoke-condition-handler
	  ignore-errors
	  invoke-restart
	  invoke-restart-interactively
	  make-condition
	  make-condition-type
	  muffle-warning
	  restart/effector
	  restart/get
	  restart/interactor
	  restart/name
	  restart/properties
	  restart/put!
	  restart?
	  retry
	  signal-condition
	  standard-error-handler
	  standard-error-hook
	  standard-warning-handler
	  standard-warning-hook
	  store-value
	  use-value
	  warn
	  with-restart
	  with-simple-restart
	  write-condition-report
	  write-restart-report)
  (export (runtime microcode-errors)
	  write-operator)
  (export (runtime rep)
	  *bound-restarts*
	  dynamic-handler-frames)
  (export (runtime debugger)
	  continue-from-derived-thread-error)
  (export (runtime stream)
	  ordinal-number-string
	  write-operator)
  (initialization (initialize-package!)))

(define-package (runtime event-distributor)
  (files "events")
  (parent ())
  (export ()
	  add-event-receiver!
	  event-distributor/invoke!
	  event-distributor?
	  make-event-distributor
	  remove-event-receiver!)
  (initialization (initialize-package!)))

(define-package (runtime extended-scode-eval)
  (files "xeval")
  (parent ())
  (export ()
	  extended-scode-eval
	  hook/extended-scode-eval)
  (initialization (initialize-package!)))

(define-package (runtime file-i/o-port)
  (files "fileio")
  (parent ())
  (export ()
	  call-with-binary-input-file
	  call-with-binary-output-file
	  call-with-input-file
	  call-with-output-file
	  open-binary-i/o-file
	  open-binary-input-file
	  open-binary-output-file
	  open-i/o-file
	  open-input-file
	  open-output-file
	  pathname-newline-translation
	  with-input-from-binary-file
	  with-input-from-file
	  with-output-to-binary-file
	  with-output-to-file)
  (initialization (initialize-package!)))

(define-package (runtime transcript)
  (files "tscript")
  (parent ())
  (export ()
	  transcript-off
	  transcript-on)
  (export (runtime rep)
	  make-transcriptable-port)
  (export (runtime emacs-interface)
	  make-transcriptable-port
	  transcriptable-port?)
  (initialization (initialize-package!)))

(define-package (runtime format)
  (file-case options
    ((load) "format")
    (else))
  (parent ())
  (export ()
	  format)
  (initialization (initialize-package!)))

(define-package (runtime garbage-collector)
  (files "gc")
  (parent ())
  (export ()
	  constant-space/in-use
	  flush-purification-queue!
	  gc-flip
	  purify
	  set-gc-safety-margin!)
  (export (runtime gc-statistics)
	  hook/gc-finish
	  hook/gc-start)
  (export (runtime error-handler)
	  hook/hardware-trap)
  (initialization (initialize-package!)))

(define-package (runtime gc-daemons)
  (files "gcdemn")
  (parent ())
  (export ()
	  add-gc-daemon!
	  add-gc-daemon!/no-restore
	  add-secondary-gc-daemon!
	  gc-clean
	  trigger-secondary-gc-daemons!)
  (export (runtime hash)
	  add-primitive-gc-daemon!)
  (export (runtime hash-table)
	  add-primitive-gc-daemon!)
  (export (runtime generic-procedure eqht)
	  add-primitive-gc-daemon!)
  (export (runtime interrupt-handler)
	  trigger-gc-daemons!)
  (initialization (initialize-package!)))

(define-package (runtime gc-notification)
  (files "gcnote")
  (parent ())
  (export ()
	  gc-statistic->string
	  print-gc-statistics
	  set-gc-notification!
	  toggle-gc-notification!
	  with-gc-notification!))

(define-package (runtime gc-statistics)
  (files "gcstat")
  (parent ())
  (export ()
	  gc-history-mode
	  gc-statistic/heap-left
	  gc-statistic/last-gc-end
	  gc-statistic/last-gc-start
	  gc-statistic/last-gc-end-clock
	  gc-statistic/last-gc-start-clock
	  gc-statistic/meter
	  gc-statistic/this-gc-end
	  gc-statistic/this-gc-start
	  gc-statistic/this-gc-end-clock
	  gc-statistic/this-gc-start-clock
	  gc-statistics
	  gc-timestamp
	  gctime)
  (export (runtime gc-notification)
	  default/record-statistic!
	  hook/record-statistic!)
  (initialization (initialize-package!)))

(define-package (runtime generic-i/o-port)
  (files "genio")
  (parent ())
  (export ()
	  make-generic-i/o-port
	  make-generic-input-port
	  make-generic-output-port)
  (export (runtime console-i/o-port)
	  generic-i/o-type
	  operation/flush-output)
  (export (runtime file-i/o-port)
	  generic-i/o-type
	  generic-input-type
	  generic-output-type)
  (initialization (initialize-package!)))

(define-package (runtime gensym)
  (files "gensym")
  (parent ())
  (export ()
	  generate-uninterned-symbol)
  (initialization (initialize-package!)))

(define-package (runtime global-database)
  (files "gdatab")
  (parent ())
  (export ()
	  add-unparser-special-object!
	  add-unparser-special-pair!
	  event:after-restart
	  event:after-restore
	  event:before-exit
	  named-structure/get-tag-description
	  named-structure/set-tag-description!
	  unparse-with-brackets
	  unparser/set-tagged-pair-method!
	  unparser/set-tagged-vector-method!
	  unparser/tagged-pair-method
	  unparser/tagged-vector-method)
  (initialization (initialize-package!)))

(define-package (runtime hash)
  (files "hash")
  (parent ())
  (export ()
	  hash
	  hash-table/make
	  object-hash
	  object-hashed?
	  object-unhash
	  unhash
	  valid-hash-number?)
  (initialization (initialize-package!)))

(define-package (runtime hash-table)
  (file-case options
    ((load) "hashtb")
    (else))
  (parent ())
  (export ()
	  eq-hash
	  eq-hash-mod
	  equal-hash
	  equal-hash-mod
	  eqv-hash
	  eqv-hash-mod
	  hash-table->alist
	  hash-table/clean!
	  hash-table/clear!
	  hash-table/constructor
	  hash-table/count
	  hash-table/datum-list
	  hash-table/entries-list
	  hash-table/entries-vector
	  hash-table/entry-datum
	  hash-table/entry-key
	  hash-table/entry-value
	  hash-table/for-each
	  hash-table/get
	  hash-table/key-hash
	  hash-table/key-list
	  hash-table/key=?
	  hash-table/lookup
	  hash-table/make-entry
	  hash-table/put!
	  hash-table/rehash-size
	  hash-table/rehash-threshold
	  hash-table/remove!
	  hash-table/set-entry-datum!
	  hash-table/set-entry-value!
	  hash-table/size
	  hash-table?
	  make-eq-hash-table
	  make-equal-hash-table
	  make-eqv-hash-table
	  make-object-hash-table
	  make-string-hash-table
	  make-symbol-hash-table
	  set-hash-table/rehash-size!
	  set-hash-table/rehash-threshold!
	  strong-hash-table/constructor
	  weak-hash-table/constructor)
  (initialization (initialize-package!)))

(define-package (runtime history)
  (files "histry")
  (parent ())
  (export ()
	  with-new-history)
  (export (runtime continuation-parser)
	  history-reductions
	  history-superproblem
	  history-transform
	  history-untransform)
  (initialization (initialize-package!)))

(define-package (runtime krypt)
  (file-case options
    ((load) "krypt")
    (else))
  (parent ())
  (export ()
	  encrypt
	  decrypt))

(define-package (runtime compress)
  (file-case options
    ((load) "cpress")
    (else))
  (parent ())
  (export ()
	  compress
	  uncompress
	  compress-ports))

(define-package (runtime port)
  (files "port")
  (parent ())
  (export ()
	  close-input-port
	  close-output-port
	  close-port
	  current-input-port
	  current-output-port
	  encapsulated-port/port
	  encapsulated-port/state
	  encapsulated-port?
	  guarantee-encapsulated-port
	  guarantee-i/o-port
	  guarantee-input-port
	  guarantee-output-port
	  guarantee-port
	  guarantee-port-type
	  i/o-port-type?
	  i/o-port?
	  input-port-type?
	  input-port/channel
	  input-port/copy
	  input-port/custom-operation
	  input-port/operation
	  input-port/operation-names
	  input-port/state
	  input-port?
	  interaction-i/o-port
	  make-encapsulated-port
	  make-i/o-port
	  make-input-port
	  make-output-port
	  make-port
	  make-port-type
	  notification-output-port
	  output-port-type?
	  output-port/channel
	  output-port/copy
	  output-port/custom-operation
	  output-port/operation
	  output-port/operation-names
	  output-port/state
	  output-port?
	  port-type/operation
	  port-type/operation-names
	  port-type/operations
	  port-type?
	  port/copy
	  port/input-blocking-mode
	  port/input-channel
	  port/input-terminal-mode
	  port/operation
	  port/operation-names
	  port/output-blocking-mode
	  port/output-channel
	  port/output-terminal-mode
	  port/set-input-blocking-mode
	  port/set-input-terminal-mode
	  port/set-output-blocking-mode
	  port/set-output-terminal-mode
	  port/state
	  port/thread-mutex
	  port/type
	  port/with-input-blocking-mode
	  port/with-input-terminal-mode
	  port/with-output-blocking-mode
	  port/with-output-terminal-mode
	  port?
	  set-current-input-port!
	  set-current-output-port!
	  set-encapsulated-port/state!
	  set-input-port/state!
	  set-interaction-i/o-port!
	  set-notification-output-port!
	  set-output-port/state!
	  set-port/state!
	  set-trace-output-port!
	  trace-output-port
	  with-input-from-port
	  with-interaction-i/o-port
	  with-notification-output-port
	  with-output-to-port
	  with-trace-output-port)
  (export (runtime input-port)
	  input-port/operation/char-ready?
	  input-port/operation/discard-char
	  input-port/operation/discard-chars
	  input-port/operation/peek-char
	  input-port/operation/read-char
	  input-port/operation/read-string
	  input-port/operation/read-substring)
  (export (runtime output-port)
	  output-port/operation/discretionary-flush
	  output-port/operation/flush-output
	  output-port/operation/fresh-line
	  output-port/operation/write-char
	  output-port/operation/write-substring)
  (export (runtime rep)
	  *current-input-port*
	  *current-output-port*
	  *interaction-i/o-port*
	  *notification-output-port*
	  *trace-output-port*)
  (export (runtime emacs-interface)
	  set-port/thread-mutex!
	  standard-port-accessors))

(define-package (runtime input-port)
  (files "input")
  (parent ())
  (export ()
	  char-ready?
	  eof-object?
	  input-port/char-ready?
	  input-port/discard-char
	  input-port/discard-chars
	  input-port/peek-char
	  input-port/read-char
	  input-port/read-line
	  input-port/read-string
	  input-port/read-string!
	  input-port/read-substring!
	  make-eof-object
	  peek-char
	  read
	  read-char
	  read-char-no-hang
	  read-line
	  read-string
	  read-string!)
  (export (runtime primitive-io)
	  eof-object))

(define-package (runtime output-port)
  (files "output")
  (parent ())
  (export ()
	  beep
	  clear
	  display
	  flush-output
	  fresh-line
	  newline
	  output-port/discretionary-flush
	  output-port/flush-output
	  output-port/fresh-line
	  output-port/write-char
	  output-port/write-object
	  output-port/write-string
	  output-port/write-substring
	  output-port/x-size
	  output-port/y-size
	  write
	  write-char
	  write-line
	  write-string
	  write-substring))

(define-package (runtime interrupt-handler)
  (files "intrpt")
  (parent ())
  (export (runtime emacs-interface)
	  hook/^G-interrupt
	  hook/clean-input/flush-typeahead)
  (export (runtime load)
	  generate-suspend-file?)
  (initialization (initialize-package!)))

(define-package (runtime lambda-abstraction)
  (files "lambda")
  (parent ())
  (export ()
	  block-declaration?
	  block-declaration-text
	  lambda?
	  lambda-body
	  lambda-bound
	  lambda-components
	  lambda-name
	  make-block-declaration
	  make-lambda
	  set-lambda-body!)
  (export (runtime advice)
	  lambda-unwrap-body!
	  lambda-wrap-body!
	  lambda-wrapper-components)
  (export (runtime environment)
	  internal-lambda?)
  (export (runtime syntaxer)
	  make-block-declaration)
  (export (runtime compiler-info)
	  lambda-tag:internal-lambda
	  lambda-tag:internal-lexpr)
  (initialization (initialize-package!)))

(define-package (runtime list)
  (files "list")
  (parent ())
  (export ()
	  alist-copy
	  alist?
	  append
	  append!
	  append-map
	  append-map!
	  append-map*
	  append-map*!
	  assoc
	  association-procedure
	  assq
	  assv
	  caaaar
	  caaadr
	  caaar
	  caadar
	  caaddr
	  caadr
	  caar
	  cadaar
	  cadadr
	  cadar
	  caddar
	  cadddr
	  caddr
	  cadr
	  car
	  cdaaar
	  cdaadr
	  cdaar
	  cdadar
	  cdaddr
	  cdadr
	  cdar
	  cddaar
	  cddadr
	  cddar
	  cdddar
	  cddddr
	  cdddr
	  cddr
	  cdr
	  circular-list
	  cons
	  cons*
	  del-assoc
	  del-assoc!
	  del-assq
	  del-assq!
	  del-assv
	  del-assv!
	  delete
	  delete!
	  delete-association-procedure
	  delete-member-procedure
	  delq
	  delq!
	  delv
	  delv!
	  eighth
	  except-last-pair
	  except-last-pair!
	  fifth
	  first
	  fold-left
	  fold-right
	  for-each
	  fourth
	  general-car-cdr
	  last-pair
	  length
	  list
	  list->weak-list
	  list-copy
	  list-deletor
	  list-deletor!
	  list-head
	  list-ref
	  list-search-negative
	  list-search-positive
	  list-tail
	  list-transform-negative
	  list-transform-positive
	  list?
	  make-list
	  make-circular-list
	  make-initialized-list
	  map
	  map*
	  mapcan
	  mapcan*
	  member
	  member-procedure
	  memq
	  memv
	  ninth
	  null?
	  pair?
	  reduce
	  reduce-right
	  reverse
	  reverse!
	  second
	  set-car!
	  set-cdr!
	  seventh
	  sixth
	  sublist
	  tenth
	  third
	  tree-copy
	  weak-car
	  weak-cdr
	  weak-cons
	  weak-delq!
	  weak-list->list
	  weak-memq
	  weak-pair/car?
	  weak-pair?
	  weak-set-car!
	  weak-set-cdr!)
  (initialization (initialize-package!)))

(define-package (runtime load)
  (files "load")
  (parent ())
  (export ()
	  argument-command-line-parser
	  condition-type:not-loading
	  current-load-pathname
	  fasload
	  fasload-latest
	  fasload/default-types
	  load
	  load-latest
	  load-noisily
	  load-noisily?
	  load/default-find-pathname-with-type
	  load/default-types
	  load/loading?
	  load/purification-root
	  load/push-hook!
	  load/suppress-loading-message?
	  read-file
	  set-command-line-parser!
	  simple-command-line-parser)
  (initialization (initialize-package!)))

(define-package (runtime macros)
  (files "macros")
  (parent ())
  (initialization (initialize-package!)))

(define-package (runtime microcode-errors)
  (files "uerror")
  (parent (runtime error-handler))
  (export ()
	  condition-type:anomalous-microcode-error
	  condition-type:compiled-code-error
	  condition-type:fasdump-environment
	  condition-type:fasl-file-bad-data
	  condition-type:fasl-file-compiled-mismatch
	  condition-type:fasl-file-too-big
	  condition-type:fasload-band
	  condition-type:fasload-error
	  condition-type:hardware-trap
	  condition-type:impurify-object-too-large
	  condition-type:inapplicable-object
	  condition-type:out-of-file-handles
	  condition-type:primitive-io-error
	  condition-type:primitive-procedure-error
	  condition-type:system-call-error
	  condition-type:unimplemented-primitive
	  condition-type:unimplemented-primitive-for-os
	  condition-type:unlinkable-variable
	  condition-type:user-microcode-reset
	  condition-type:wrong-arity-primitives)
  (initialization (initialize-package!)))

(define-package (runtime microcode-tables)
  (files "utabs")
  (parent ())
  (export ()
	  char:newline
	  fixed-object/code->name
	  fixed-object/code-limit
	  fixed-object/name->code
	  fixed-objects-item
	  fixed-objects-vector-slot
	  microcode-error/code->name
	  microcode-error/code-limit
	  microcode-error/name->code
	  microcode-id/floating-epsilon
	  microcode-id/floating-mantissa-bits
	  microcode-id/modification
	  microcode-id/operating-system
	  microcode-id/operating-system-name
	  microcode-id/operating-system-variant
	  microcode-id/release-string
	  microcode-id/stack-type
	  microcode-id/tty-x-size
	  microcode-id/tty-y-size
	  microcode-id/version
	  microcode-identification-item
	  microcode-identification-vector-slot
	  microcode-object/unassigned
	  microcode-return/code->name
	  microcode-return/code-limit
	  microcode-return/name->code
	  microcode-system-call-error/code->name
	  microcode-system-call-error/name->code
	  microcode-system-call/code->name
	  microcode-system-call/name->code
	  microcode-termination/code->name
	  microcode-termination/code-limit
	  microcode-termination/name->code
	  microcode-type/code->name
	  microcode-type/code-limit
	  microcode-type/name->code)
  (export (runtime save/restore)
	  re-read-microcode-tables!)
  (initialization (initialize-package!)))

(define-package (runtime number)
  (files "arith" "dragon4")
  (parent ())
  (export ()
	  *
	  +
	  -
	  -1+
	  /
	  1+
	  <
	  <=
	  =
	  >
	  >=
	  abs
	  acos
	  angle
	  asin
	  atan
	  ceiling
	  ceiling->exact
	  complex?
	  conjugate
	  cos
	  denominator
	  even?
	  exact->inexact
	  exact-integer?
	  exact-nonnegative-integer?
	  exact-rational?
	  exact?
	  exp
	  expt
	  flonum-unparser-cutoff
	  flonum-unparser:engineering-output
	  flonum-unparser:normal-output
	  flonum-unparser:scientific-output
	  floor
	  floor->exact
	  gcd
	  imag-part
	  inexact->exact
	  inexact?
	  integer-ceiling
	  integer-divide
	  integer-divide-quotient
	  integer-divide-remainder
	  integer-floor
	  integer-round
	  integer-truncate
	  integer?
	  lcm
	  log
	  magnitude
	  make-polar
	  make-rectangular
	  max
	  min
	  modulo
	  negative?
	  number->string
	  number?
	  numerator
	  odd?
	  positive?
	  quotient
	  rational?
	  rationalize
	  rationalize->exact
	  real-part
	  real?
	  remainder
	  round
	  round->exact
	  simplest-exact-rational
	  simplest-rational
	  sin
	  square
	  sqrt
	  tan
	  truncate
	  truncate->exact
	  zero?)
  (initialization (initialize-package!)))

(define-package (runtime number interface)
  (file-case options
    ((load) "numint")
    (else))
  (parent (runtime number))
  (export ()
	  complex-package
	  integer-package
	  make-accumulation-operator
	  make-arithmetic-package
	  make-inverse-accumulation-operator
	  rational-package
	  real-package))

(define-package (runtime number-parser)
  (files "numpar")
  (parent ())
  (export ()
	  flonum-parser-fast?
	  string->number
	  substring->number))

(define-package (runtime options)
  (files "option")
  (parent ())
  (export ()
	  *initial-options-file*
	  declare-shared-library
	  define-load-option
	  further-load-options
	  load-option
	  local-load-options
	  standard-load-options
	  standard-option-loader
	  ))

(define-package (runtime parser)
  (files "parse")
  (parent ())
  (export ()
	  *parser-canonicalize-symbols?*
	  *parser-radix*
	  parse-object
	  parse-objects
	  system-global-parser-table)
  (export (runtime character)
	  char-set/atom-delimiters)
  (export (runtime syntaxer)
	  lambda-auxiliary-tag
	  lambda-optional-tag
	  lambda-rest-tag)
  (export (runtime unparser)
	  lambda-auxiliary-tag
	  lambda-optional-tag
	  lambda-rest-tag)
  (export (runtime macros)
	  lambda-auxiliary-tag
	  lambda-optional-tag
	  lambda-rest-tag)
  (export (runtime unsyntaxer)
	  lambda-auxiliary-tag
	  lambda-optional-tag
	  lambda-rest-tag)
  (export (runtime parser-table)
	  collect-list-wrapper)
  (initialization (initialize-package!)))

(define-package (runtime parser-table)
  (files "partab")
  (parent ())
  (export ()
	  current-parser-table
	  guarantee-parser-table
	  make-parser-table
	  parser-table/copy
	  parser-table/entry
	  parser-table/set-entry!
	  parser-table?
	  set-current-parser-table!
	  with-current-parser-table)
  (export (runtime parser)
	  parser-table/collect-list
	  parser-table/collect-list-special
	  parser-table/parse-object
	  parser-table/parse-object-special)
  (initialization (initialize-package!)))

(define-package (runtime pathname)
  (files "pathnm")
  (parent ())
  (export ()
	  *default-pathname-defaults*
	  ->namestring
	  ->pathname
	  ->truename
	  directory-namestring
	  directory-pathname
	  directory-pathname-as-file
	  enough-namestring
	  enough-pathname
	  file-namestring
	  file-pathname
	  host-namestring
	  host=?
	  host?
	  init-file-pathname
	  local-host
	  make-pathname
	  merge-pathnames
	  parse-namestring
	  pathname-absolute?
	  pathname-as-directory
	  pathname-default
	  pathname-default-device
	  pathname-default-directory
	  pathname-default-name
	  pathname-default-type
	  pathname-default-version
	  pathname-device
	  pathname-directory
	  pathname-end-of-line-string
	  pathname-host
	  pathname-name
	  pathname-new-device
	  pathname-new-directory
	  pathname-new-name
	  pathname-new-type
	  pathname-new-version
	  pathname-simplify
	  pathname-type
	  pathname-version
	  pathname-wild?
	  pathname=?
	  pathname?
	  system-library-directory-pathname
	  system-library-pathname
	  user-homedir-pathname)
  (initialization (initialize-package!)))

(define-package (runtime pathname unix)
  (files "unxpth")
  (parent (runtime pathname))
  (initialization (initialize-package!)))

(define-package (runtime pathname dos)
  (files "dospth")
  (parent (runtime pathname))
  (initialization (initialize-package!)))

(define-package (runtime population)
  (files "poplat")
  (parent ())
  (export ()
	  add-to-population!
	  exists-an-inhabitant?
	  for-all-inhabitants?
	  make-population
	  map-over-population
	  map-over-population!
	  population?
	  remove-from-population!)
  (initialization (initialize-package!)))

(define-package (runtime pretty-printer)
  (files "pp")
  (parent ())
  (export ()
	  *pp-arity-dispatched-procedure-style*
	  *pp-auto-highlighter*
	  *pp-avoid-circularity?*
	  *pp-default-as-code?*
	  *pp-forced-x-size*
	  *pp-lists-as-tables?*
	  *pp-named-lambda->define?*
	  *pp-no-highlights?*
	  *pp-primitives-by-name*
	  *pp-save-vertical-space?*
	  *pp-uninterned-symbols-by-name*
	  make-pretty-printer-highlight
	  pp
	  pp-description
	  pretty-print)
  (initialization (initialize-package!)))

(define-package (runtime primitive-io)
  (files "io") 
  (parent ())
  (export ()
	  add-to-protection-list!
	  all-open-channels
	  channel-blocking
	  channel-blocking?
	  channel-close
	  channel-closed?
	  channel-descriptor-for-select
	  channel-file-length
	  channel-file-position
	  channel-file-set-position
	  channel-nonblocking
	  channel-open?
	  channel-port
	  channel-read
	  channel-read-block
	  channel-table
	  channel-type
	  channel-type=directory?
	  channel-type=file?
	  channel-type=terminal?
	  channel-type=unknown?
	  channel-write
	  channel-write-block
	  channel-write-char-block
	  channel-write-string-block
	  channel?
	  clean-lost-protected-objects
	  close-all-open-channels
	  close-all-open-files
	  directory-channel-close
	  directory-channel-open
	  directory-channel-read
	  directory-channel-read-matching
	  directory-channel?
	  drop-all-protected-objects
	  file-open-append-channel
	  file-open-input-channel
	  file-open-io-channel
	  file-open-output-channel
	  make-pipe
	  make-protection-list
	  open-pty-master
	  protection-list-elements
	  pty-master-continue
	  pty-master-hangup
	  pty-master-interrupt
	  pty-master-kill
	  pty-master-quit
	  pty-master-send-signal
	  pty-master-stop
	  remove-from-protection-list!
	  search-protection-list
	  set-terminal-input-baud-rate!
	  set-terminal-output-baud-rate!
	  terminal-cooked-input
	  terminal-cooked-input?
	  terminal-cooked-output
	  terminal-cooked-output?
	  terminal-drain-output
	  terminal-flush-input
	  terminal-flush-output
	  terminal-get-state
	  terminal-input-baud-rate
	  terminal-output-baud-rate
	  terminal-raw-input
	  terminal-raw-output
	  terminal-set-state
	  test-for-input-on-channel
	  test-for-input-on-descriptor
	  tty-input-channel
	  tty-output-channel
	  with-channel-blocking)
  (export (runtime load)
	  channel-descriptor)
  (export (runtime socket)
	  channel-descriptor
	  open-channel)
  (export (runtime subprocess)
	  channel-descriptor)
  (export (runtime generic-i/o-port)
	  input-buffer/buffered-chars
	  input-buffer/channel
	  input-buffer/char-ready?
	  input-buffer/chars-remaining
	  input-buffer/close
	  input-buffer/discard-char
	  input-buffer/discard-until-delimiter
	  input-buffer/eof?
	  input-buffer/open?
	  input-buffer/peek-char
	  input-buffer/read-char
	  input-buffer/read-substring
	  input-buffer/read-until-delimiter
	  input-buffer/set-size
	  input-buffer/size
	  make-input-buffer
	  make-output-buffer
	  output-buffer/buffered-chars
	  output-buffer/channel
	  output-buffer/close
	  output-buffer/drain-block
	  output-buffer/line-start?
	  output-buffer/open?
	  output-buffer/set-size
	  output-buffer/size
	  output-buffer/write-char-block
	  output-buffer/write-substring
	  output-buffer/write-substring-block
	  set-channel-port!)
  (export (runtime file-i/o-port)
	  input-buffer/chars-remaining
	  input-buffer/read-substring
	  make-input-buffer
	  make-output-buffer
	  set-channel-port!)
  (export (runtime console-i/o-port)
	  input-buffer/buffer-contents
	  input-buffer/buffered-chars
	  input-buffer/channel
	  input-buffer/char-ready?
	  input-buffer/eof?
	  input-buffer/peek-char
	  input-buffer/read-char
	  input-buffer/set-buffer-contents
	  input-buffer/set-size
	  input-buffer/size
	  make-input-buffer
	  make-output-buffer
	  output-buffer/buffered-chars
	  output-buffer/channel
	  output-buffer/drain-block
	  output-buffer/line-start?
	  output-buffer/set-size
	  output-buffer/size
	  output-buffer/write-char-block
	  output-buffer/write-substring-block
	  set-channel-port!)
  (export (runtime microcode-errors)
	  port-error-test)
  (export (runtime x-graphics)
	  have-select?)
  (export (runtime thread)
	  have-select?)
  (export (runtime directory)
	  directory-channel/descriptor)
  (initialization (initialize-package!)))

(define-package (runtime program-copier)
  (files "prgcop")
  (parent ())
  (export ()
	  copy-program)
  (initialization (initialize-package!)))

(define-package (runtime random-number)
  (files "random")
  (parent ())
  (export ()
	  *random-state*
	  flo:random-unit
	  make-random-state
	  random
	  random-state?)
  (initialization (initialize-package!)))

(define-package (runtime record)
  (files "record")
  (parent ())
  (export ()
	  %make-record
	  %record
	  %record-copy
	  %record-length
	  %record-ref
	  %record-set!
	  %record?
	  make-record-type
	  record-accessor
	  record-constructor
	  record-copy
	  record-description
	  record-modifier
	  record-predicate
	  record-type-descriptor
	  record-type-dispatch-tag
	  record-type-field-names
	  record-type-name
	  record-type?
	  record-updater
	  record?
	  set-record-type-unparser-method!
	  unparse-record)
  (export (runtime record-slot-access)
	  record-type-field-index)
  (initialization (initialize-package!)))

(define-package (runtime reference-trap)
  (files "urtrap")
  (parent ())
  (export ()
	  make-unassigned-reference-trap
	  make-unbound-reference-trap
	  map-reference-trap
	  reference-trap-kind
	  reference-trap-kind-name
	  reference-trap?
	  unassigned-reference-trap?
	  unbound-reference-trap?
	  unmap-reference-trap))

(define-package (runtime rep)
  (files "rep")
  (parent ())
  (export ()
	  ->environment
	  abort->nearest
	  abort->previous
	  abort->top-level
	  bkpt
	  breakpoint
	  breakpoint-procedure
	  breakpoint/environment
	  cmdl-interrupt/abort-nearest
	  cmdl-interrupt/abort-previous
	  cmdl-interrupt/abort-top-level
	  cmdl-interrupt/breakpoint
	  cmdl-message/active
	  cmdl-message/append
	  cmdl-message/null
	  cmdl-message/strings
	  cmdl/base
	  cmdl/driver
	  cmdl/level
	  cmdl/operation
	  cmdl/operation-names
	  cmdl/parent
	  cmdl/port
	  cmdl/properties
	  cmdl/start
	  cmdl/state
	  cmdl?
	  condition-type:breakpoint
	  condition/breakpoint?
	  ge
	  gst
	  in
	  initial-top-level-repl
	  make-cmdl
	  make-repl
	  make-repl-history
	  make-repl-message
	  nearest-cmdl
	  nearest-cmdl/level
	  nearest-cmdl/port
	  nearest-repl
	  nearest-repl/condition
	  nearest-repl/environment
	  nearest-repl/syntax-table
	  out
	  pe
	  proceed
	  push-cmdl
	  push-repl
	  re
	  read-eval-print
	  repl-history/read
	  repl-history/record!
	  repl-history/size
	  repl-printer-history-size
	  repl-reader-history-size
	  repl-scode-eval
	  repl/base
	  repl/condition
	  repl/environment
	  repl/parent
	  repl/printer-history
	  repl/prompt
	  repl/reader-history
	  repl/start
	  repl/syntax-table
	  repl:allow-restart-notifications?
	  repl:write-result-hash-numbers?
	  repl?
	  restart
	  set-cmdl/state!
	  set-repl/environment!
	  set-repl/printer-history!
	  set-repl/prompt!
	  set-repl/reader-history!
	  set-repl/syntax-table!
	  signal-breakpoint
	  standard-breakpoint-handler
	  standard-breakpoint-hook
	  ve
	  with-repl-eval-boundary)
  (export (runtime load)
	  hook/repl-eval
	  hook/repl-write)
  (export (runtime emacs-interface)
	  hook/error-decision
	  set-cmdl/port!)
  (export (runtime user-interface)
	  hook/repl-eval)
  (export (runtime debugger)
	  write-restarts)
  (export (runtime working-directory)
	  cmdl/set-default-directory)
  (initialization (initialize-package!)))

(define-package (runtime save/restore)
  (files "savres")
  (parent ())
  (export ()
	  disk-restore
	  disk-save
	  dump-world
	  identify-world)
  (export (runtime gc-daemons)
	  *within-restore-window?*)
  (export (runtime user-interface)
	  *within-restore-window?*)
  (initialization (initialize-package!)))

(define-package (runtime scode)
  (files "scode")
  (parent ())
  (export ()
	  absolute-reference-name
	  absolute-reference-to?
	  absolute-reference?
	  access-components
	  access-environment
	  access-name
	  access?
	  assignment-components
	  assignment-components-with-variable
	  assignment-name
	  assignment-value
	  assignment-variable
	  assignment?
	  comment-components
	  comment-expression
	  comment-text
	  comment?
	  declaration-components
	  declaration-expression
	  declaration-text
	  declaration?
	  definition-components
	  definition-name
	  definition-value
	  definition?
	  delay-components
	  delay-expression
	  delay?
	  in-package-components
	  in-package-environment
	  in-package-expression
	  in-package?
	  make-absolute-reference
	  make-access
	  make-assignment
	  make-assignment-from-variable
	  make-comment
	  make-declaration
	  make-definition
	  make-delay
	  make-in-package
	  make-quotation
	  make-the-environment
	  make-variable
	  quotation-expression
	  quotation?
	  scode-constant?
	  set-comment-expression!
	  set-comment-text!
	  set-declaration-expression!
	  set-declaration-text!
	  the-environment?
	  variable-components
	  variable-name
	  variable?)
  (initialization (initialize-package!)))

(define-package (runtime scode-combinator)
  (files "scomb")
  (parent ())
  (export ()
	  combination-components
	  combination-operands
	  combination-operator
	  combination-size
	  combination?
	  conditional-alternative
	  conditional-components
	  conditional-consequent
	  conditional-predicate
	  conditional?
	  disjunction-alternative
	  disjunction-components
	  disjunction-predicate
	  disjunction?
	  make-combination
	  make-conditional
	  make-disjunction
	  make-sequence
	  make-unassigned?
	  sequence-actions
	  sequence-components
	  sequence-immediate-actions
	  sequence?
	  unassigned?-components
	  unassigned?-name
	  unassigned??
	  undefined-conditional-branch)
  (export (runtime debugging-info)
	  %make-combination)
  (initialization (initialize-package!)))

(define-package (runtime scode-data)
  (files "sdata")
  (parent ())
  (export (runtime lambda-abstraction)
	  &pair-car
	  &pair-cdr
	  &pair-set-car!
	  &pair-set-cdr!
	  &triple-first
	  &triple-second
	  &triple-set-first!
	  &triple-set-second!
	  &triple-set-third!
	  &triple-third
	  &typed-pair-cons
	  &typed-triple-cons)
  (export (runtime scode)
	  &pair-car
	  &pair-cdr
	  &pair-set-car!
	  &pair-set-cdr!
	  &singleton-element
	  &typed-pair-cons
	  &typed-singleton-cons)
  (export (runtime scode-combinator)
	  &pair-car
	  &pair-cdr
	  &pair-set-car!
	  &pair-set-cdr!
	  &subvector->list
	  &triple-first
	  &triple-second
	  &triple-set-first!
	  &triple-set-second!
	  &triple-set-third!
	  &triple-third
	  &typed-pair-cons
	  &typed-triple-cons
	  &typed-vector-cons
	  &vector-length
	  &vector-ref)
  (export (runtime scode-scan)
	  &pair-car
	  &pair-cdr
	  &pair-set-car!
	  &pair-set-cdr!
	  &triple-first
	  &triple-second
	  &triple-set-first!
	  &triple-set-second!
	  &triple-set-third!
	  &triple-third
	  &typed-pair-cons
	  &typed-triple-cons)
  (export (runtime debugging-info)
	  &pair-car
	  &pair-cdr
	  &triple-first
	  &triple-second
	  &triple-third
	  &vector-ref))

(define-package (runtime scode-scan)
  (files "scan")
  (parent ())
  (export ()
	  make-open-block
	  open-block-components
	  open-block?
	  scan-defines
	  unscan-defines))

(define-package (runtime scode-walker)
  (files "codwlk")
  (parent ())
  (export ()
	  make-scode-walker
	  scode-walk
	  scode-walker?)
  (initialization (initialize-package!)))

(define-package (runtime socket)
  (files "socket")
  (parent ())
  (export ()
	  allocate-host-address
	  canonical-host-name
	  close-tcp-server-socket
	  get-host-by-address
	  get-host-by-name
	  get-host-name
	  open-tcp-server-socket
	  open-tcp-stream-socket
	  open-tcp-stream-socket-channel
	  open-unix-stream-socket
	  open-unix-stream-socket-channel
	  os/hostname
	  tcp-server-connection-accept))

(define-package (runtime subprocess)
  (file-case options
    ((load) "process")
    (else))
  (parent ())
  (export ()
	  make-subprocess
	  process-environment-bind
	  run-subprocess-in-foreground
	  scheme-subprocess-environment
	  start-batch-subprocess
	  start-pipe-subprocess
	  start-pty-subprocess
	  start-subprocess-in-background
	  subprocess-arguments
	  subprocess-continue-background
	  subprocess-continue-foreground
	  subprocess-delete
	  subprocess-exit-reason
	  subprocess-filename
	  subprocess-get
	  subprocess-global-status-tick
	  subprocess-hangup
	  subprocess-i/o-port
	  subprocess-id
	  subprocess-input-channel
	  subprocess-input-port
	  subprocess-interrupt
	  subprocess-job-control-available?
	  subprocess-job-control-status
	  subprocess-kill
	  subprocess-list
	  subprocess-output-channel
	  subprocess-output-port
	  subprocess-properties
	  subprocess-pty-master
	  subprocess-put!
	  subprocess-quit
	  subprocess-remove!
	  subprocess-signal
	  subprocess-status
	  subprocess-status-tick
	  subprocess-stop
	  subprocess-wait
	  subprocess?)
  (export (runtime primitive-io)
	  handle-subprocess-status-change)
  (initialization (initialize-package!)))

(define-package (runtime synchronous-subprocess)
  (file-case options
    ((load) "syncproc")
    (else))
  (parent ())
  (export ()
	  condition-type:subprocess-abnormal-termination
	  condition-type:subprocess-signalled
	  condition-type:subprocess-stopped
	  run-shell-command
	  run-synchronous-subprocess))

(define-package (runtime graphics)
  (files "graphics")
  (parent ())
  (export ()
	  enumerate-graphics-types
	  graphics-bind-drawing-mode
	  graphics-bind-line-style
	  graphics-clear
	  graphics-close
	  graphics-coordinate-limits
	  graphics-device-coordinate-limits
	  graphics-device/descriptor
	  graphics-device/properties
	  graphics-device?
	  graphics-disable-buffering
	  graphics-drag-cursor
	  graphics-draw-line
	  graphics-draw-point
	  graphics-draw-text
	  graphics-enable-buffering
	  graphics-erase-point
	  graphics-flush
	  graphics-move-cursor
	  graphics-operation
	  graphics-reset-clip-rectangle
	  graphics-set-clip-rectangle
	  graphics-set-coordinate-limits
	  graphics-set-drawing-mode
	  graphics-set-line-style
	  graphics-type
	  graphics-type-available?
	  graphics-type-name
	  graphics-type-properties
	  image-type
	  image/create
	  image/descriptor
	  image/destroy
	  image/draw
	  image/draw-subimage
	  image/fill-from-byte-vector
	  image/height
	  image/width
	  image?
	  make-graphics-device
	  make-graphics-device-type)
  (export (runtime x-graphics)
	  make-image-type))

(define-package (runtime x-graphics)
  (file-case os-type
    ((unix) "x11graph")
    (else))
  (parent ())
  (export ()
	  create-x-colormap
	  create-x-image
	  x-character-bounds/ascent
	  x-character-bounds/descent
	  x-character-bounds/lbearing
	  x-character-bounds/rbearing
	  x-character-bounds/width
	  x-close-all-displays
	  x-colormap/allocate-color
	  x-colormap/free
	  x-colormap/query-color
	  x-colormap/store-color
	  x-colormap/store-colors
	  x-colormap?
	  x-display/name
	  x-display/properties
	  x-font-structure/all-chars-exist?
	  x-font-structure/character-bounds
	  x-font-structure/default-char
	  x-font-structure/direction
	  x-font-structure/max-ascent
	  x-font-structure/max-bounds
	  x-font-structure/max-descent
	  x-font-structure/min-bounds
	  x-font-structure/name
	  x-font-structure/start-index
	  x-geometry-string
	  x-graphics-default-display-name
	  x-graphics-default-geometry
	  x-graphics-device-type
	  x-graphics/available?
	  x-graphics/clear
	  x-graphics/close-display
	  x-graphics/close-window
	  x-graphics/color?
	  x-graphics/coordinate-limits
	  x-graphics/copy-area
	  x-graphics/device-coordinate-limits
	  x-graphics/disable-keyboard-focus
	  x-graphics/discard-events
	  x-graphics/display
	  x-graphics/drag-cursor
	  x-graphics/draw-arc
	  x-graphics/draw-circle
	  x-graphics/draw-line
	  x-graphics/draw-lines
	  x-graphics/draw-point
	  x-graphics/draw-points
	  x-graphics/draw-text
	  x-graphics/enable-keyboard-focus
	  x-graphics/fill-circle
	  x-graphics/flush
	  x-graphics/font-structure
	  x-graphics/get-colormap
	  x-graphics/get-default
	  x-graphics/iconify-window
	  x-graphics/image-depth
	  x-graphics/lower-window
	  x-graphics/map-window
	  x-graphics/move-cursor
	  x-graphics/move-window
	  x-graphics/open-display
	  x-graphics/query-pointer
	  x-graphics/raise-window
	  x-graphics/read-button
	  x-graphics/read-user-event
	  x-graphics/reset-clip-rectangle
	  x-graphics/resize-window
	  x-graphics/select-user-events
	  x-graphics/set-background-color
	  x-graphics/set-border-color
	  x-graphics/set-border-width
	  x-graphics/set-clip-rectangle
	  x-graphics/set-colormap
	  x-graphics/set-coordinate-limits
	  x-graphics/set-drawing-mode
	  x-graphics/set-font
	  x-graphics/set-foreground-color
	  x-graphics/set-icon-name
	  x-graphics/set-input-hint
	  x-graphics/set-internal-border-width
	  x-graphics/set-line-style
	  x-graphics/set-mouse-color
	  x-graphics/set-mouse-shape
	  x-graphics/set-window-name
	  x-graphics/starbase-filename
	  x-graphics/visual-info
	  x-graphics/window-id
	  x-graphics/withdraw-window
	  x-graphics:auto-raise?
	  x-image/destroy
	  x-image/draw
	  x-image/draw-subimage
	  x-image/fill-from-byte-vector
	  x-image/get-pixel
	  x-image/height
	  x-image/set-pixel
	  x-image/width
	  x-image?
	  x-visual-class:direct-color
	  x-visual-class:gray-scale
	  x-visual-class:pseudo-color
	  x-visual-class:static-color
	  x-visual-class:static-gray
	  x-visual-class:true-color
	  x-visual-info/bits-per-rgb
	  x-visual-info/blue-mask
	  x-visual-info/class
	  x-visual-info/colormap-size
	  x-visual-info/depth
	  x-visual-info/green-mask
	  x-visual-info/red-mask
	  x-visual-info/screen
	  x-visual-info/visual
	  x-visual-info/visual-id)
  (initialization (initialize-package!)))

(define-package (runtime starbase-graphics)
  (file-case os-type
    ((unix) "starbase")
    (else))
  (parent ())
  (export ()
	  starbase-graphics-device-type)
  (initialization (initialize-package!)))

(define-package (runtime state-space)
  (files "wind")
  (parent ())
  (export ()
	  dynamic-wind
	  shallow-fluid-bind)
  (export (runtime continuation)
	  get-dynamic-state
	  set-dynamic-state!)
  (export (runtime continuation-parser)
	  %translate-to-state-point
	  merge-dynamic-state)
  (export (runtime thread)
	  current-state-point
	  make-state-space
	  state-space:local
	  translate-to-state-point)
  (initialization (initialize-package!)))

(define-package (runtime stream)
  (files "stream")
  (parent ())
  (export ()
	  condition-type:illegal-stream-element
	  empty-stream?
	  head
	  list->stream
	  make-prime-numbers-stream
	  prime-numbers-stream
	  stream
	  stream->list
	  stream-accumulate
	  stream-append
	  stream-car
	  stream-cdr
	  stream-filter
	  stream-first
	  stream-for-each
	  stream-head
	  stream-length
	  stream-map
	  stream-null?
	  stream-pair?
	  stream-ref
	  stream-rest
	  stream-tail
	  stream-write
	  tail
	  the-empty-stream)
  (initialization (initialize-package!)))

(define-package (runtime string-input)
  (files "strnin")
  (parent ())
  (export ()
	  string->input-port
	  with-input-from-string)
  (initialization (initialize-package!)))

(define-package (runtime string-output)
  (files "strout")
  (parent ())
  (export ()
	  with-string-output-port
	  with-output-to-string)
  (initialization (initialize-package!)))

(define-package (runtime syntax-table)
  (files "syntab")
  (parent ())
  (export ()
	  guarantee-syntax-table
	  make-syntax-table
	  syntax-table-define
	  syntax-table-ref
	  syntax-table/copy
	  syntax-table/define
	  syntax-table/defined-names
	  syntax-table/extend
	  syntax-table/parent
	  syntax-table/ref
	  syntax-table?))

(define-package (runtime syntaxer)
  (files "syntax")
  (parent ())
  (export ()
	  environment-syntax-table
	  hook/syntax-expression
	  lambda-tag:fluid-let
	  lambda-tag:let
	  lambda-tag:make-environment
	  lambda-tag:unnamed
	  make-syntax-closure
	  set-environment-syntax-table!
	  syntax
	  syntax*
	  syntax-closure/expression
	  syntax-closure?
	  syntax/top-level?
	  system-global-syntax-table
	  user-initial-syntax-table)
  (export (runtime defstruct)
	  parse-lambda-list)
  (initialization (initialize-package!)))

(define-package (runtime illegal-definitions)
  (files "illdef")
  (parent ())
  (export (runtime syntaxer)
	  check-for-illegal-definitions)
  (initialization (initialize-package!)))

(define-package (runtime system)
  (files "system")
  (parent ())
  (export ()
	  add-identification!
	  add-subsystem-identification!
	  get-subsystem-identification-string
	  get-subsystem-names
	  get-subsystem-version
	  get-subsystem-version-string
	  remove-subsystem-identification!))

(define-package (runtime system-clock)
  (files "sysclk")
  (parent ())
  (export ()
	  internal-time/seconds->ticks
	  internal-time/ticks->seconds
	  measure-interval
	  process-time-clock
	  real-time-clock
	  runtime
	  system-clock
	  with-timings)
  (export (runtime gc-statistics)
	  increment-non-runtime!)
  (initialization (initialize-package!)))

(define-package (runtime system-macros)
  (files "sysmac")
  (parent ())
  (export ()
	  syntax-table/system-internal)
  (initialization (initialize-package!)))

(define-package (runtime truncated-string-output)
  (files "strott")
  (parent ())
  (export ()
	  with-output-to-truncated-string)
  (initialization (initialize-package!)))

(define-package (runtime unparser)
  (files "unpars")
  (parent ())
  (export ()
	  *unparse-abbreviate-quotations?*
	  *unparse-compound-procedure-names?*
	  *unparse-disambiguate-null-as-itself?*
	  *unparse-disambiguate-null-lambda-list?*
	  *unparse-primitives-by-name?*
	  *unparse-uninterned-symbols-by-name?*
	  *unparse-with-datum?*
	  *unparse-with-maximum-readability?*
	  *unparser-list-breadth-limit*
	  *unparser-list-depth-limit*
	  *unparser-radix*
	  *unparser-string-length-limit*
	  current-unparser-table
	  guarantee-unparser-state
	  guarantee-unparser-table
	  make-unparser-state
	  make-unparser-table
	  system-global-unparser-table
	  unparse-char
	  unparse-object
	  unparse-string
	  unparser-state/list-depth
	  unparser-state/port
	  unparser-state/slashify?
	  unparser-state/unparser-table
	  unparser-state?
	  unparser-table/copy
	  unparser-table/entry
	  unparser-table/set-entry!
	  unparser-table?
	  user-object-type
	  with-current-unparser-state)
  (export (runtime output-port)
	  unparse-object/top-level)
  (export (runtime pretty-printer)
	  unparse-list/prefix-pair?
	  unparse-list/unparser
	  unparse-vector/unparser)
  (initialization (initialize-package!)))

(define-package (runtime unsyntaxer)
  (files "unsyn")
  (parent ())
  (export ()
	  unsyntax
	  unsyntax-lambda-list
	  unsyntax-with-substitutions)
  (initialization (initialize-package!)))

(define-package (runtime working-directory)
  (files "wrkdir")
  (parent ())
  (export ()
	  set-working-directory-pathname!
	  with-working-directory-pathname
	  working-directory-pathname)
  (export (runtime rep)
	  *working-directory-pathname*)
  (initialization (initialize-package!)))

(define-package (runtime user-interface)
  (files "usrint")
  (parent ())
  (export ()
	  prompt-for-command-char
	  prompt-for-command-expression
	  prompt-for-confirmation
	  prompt-for-evaluated-expression
	  prompt-for-expression)
  (export (runtime rep)
	  port/set-default-environment
	  port/set-default-syntax-table
	  port/write-result)
  (export (runtime rep)
	  port/set-default-directory)
  (export (runtime debugger-command-loop)
	  port/debugger-failure
	  port/debugger-message
	  port/debugger-presentation)
  (export (runtime gc-statistics)
	  port/gc-finish
	  port/gc-start)
  (export (runtime emacs-interface)
	  port/read-finish
	  port/read-start))

(define-package (runtime thread)
  (files "thread")
  (parent ())
  (export ()
	  block-thread-events
	  condition-type:no-current-thread
	  condition-type:thread-dead
	  condition-type:thread-deadlock
	  condition-type:thread-detached
	  condition-type:thread-control-error
	  console-thread
	  create-thread
	  create-thread-continuation
	  current-thread
	  deregister-all-events
	  deregister-input-thread-event
	  deregister-timer-event
	  detach-thread
	  exit-current-thread
	  join-thread
	  lock-thread-mutex
	  make-thread-mutex
	  other-running-threads?
	  permanently-register-input-thread-event
	  register-input-thread-event
	  register-timer-event
	  restart-thread
	  set-thread-timer-interval!
	  signal-thread-event
	  sleep-current-thread
	  start-thread-timer
	  stop-current-thread
	  stop-thread-timer
	  suspend-current-thread
	  thread-continuation
	  thread-dead?
	  thread-execution-state
	  thread-mutex-owner
	  thread-mutex?
	  thread-timer-interval
	  thread?
	  threads-list
	  try-lock-thread-mutex
	  unblock-thread-events
	  unlock-thread-mutex
	  with-create-thread-continuation
	  with-thread-events-blocked
	  with-thread-mutex-locked
	  with-thread-timer-stopped
	  yield-current-thread)
  (export (runtime interrupt-handler)
	  thread-timer-interrupt-handler)
  (export (runtime primitive-io)
	  block-on-input-descriptor)
  (export (runtime continuation)
	  get-thread-event-block
	  set-thread-event-block!)
  (initialization (initialize-package!)))

(define-package (runtime rb-tree)
  (file-case options
    ((load) "rbtree")
    (else))
  (parent ())
  (export ()
	  alist->rb-tree
	  make-rb-tree
	  rb-tree->alist
	  rb-tree/copy
	  rb-tree/datum-list
	  rb-tree/delete!
	  rb-tree/delete-max!
	  rb-tree/delete-max-datum!
	  rb-tree/delete-max-pair!
	  rb-tree/delete-min!
	  rb-tree/delete-min-datum!
	  rb-tree/delete-min-pair!
	  rb-tree/empty?
	  rb-tree/equal?
	  rb-tree/height
	  rb-tree/insert!
	  rb-tree/key-list
	  rb-tree/lookup
	  rb-tree/max
	  rb-tree/max-datum
	  rb-tree/max-pair
	  rb-tree/min
	  rb-tree/min-datum
	  rb-tree/min-pair
	  rb-tree/size
	  rb-tree?))

(define-package (runtime wt-tree)
  (file-case options
    ((load) "wttree")
    (else))
  (parent ())
  (export ()
	  number-wt-type
	  string-wt-type
	  wt-tree/empty?
          alist->wt-tree
          make-wt-tree
          make-wt-tree-type
          singleton-wt-tree
          wt-tree/add
          wt-tree/add!
          wt-tree/delete
          wt-tree/delete!
          wt-tree/delete-min
          wt-tree/delete-min!
          wt-tree/difference
          wt-tree/fold
          wt-tree/for-each
          wt-tree/index
          wt-tree/index-datum
          wt-tree/index-pair
          wt-tree/intersection
          wt-tree/lookup
          wt-tree/member?
          wt-tree/min
          wt-tree/min-datum
          wt-tree/min-pair
          wt-tree/rank
          wt-tree/set-equal?
          wt-tree/size
          wt-tree/split<
          wt-tree/split>
          wt-tree/subset?
          wt-tree/union
          wt-tree/union-merge
          wt-tree?))

(define-package (runtime apropos)
  (files "apropos")
  (parent ())
  (export ()
	  apropos
	  apropos-list))

(define-package (runtime stepper)
  (file-case options
    ((load) "ystep")
    (else))
  (parent ())
  (export ()
	  step
	  step-form
	  step-n
	  step-over
	  step-proceed
	  step-quit
	  step-run
	  step-until
	  step-until-visibly))

(define-package (runtime ordered-vector)
  (file-case options
    ((load) "ordvec")
    (else))
  (parent ())
  (export ()
	  match-ordered-subvector
	  match-ordered-vector
	  ordered-subvector-matches
	  ordered-subvector-minimum-match
	  ordered-vector-matches
	  ordered-vector-minimum-match
	  search-ordered-subvector
	  search-ordered-vector))

(define-package (runtime gdbm)
  (file-case options
    ((load) "gdbm")
    (else))
  (parent ())
  (export ()
	  gdbm-available?
	  gdbm-close
	  gdbm-delete
	  gdbm-exists?
	  gdbm-fetch
	  gdbm-firstkey
	  gdbm-nextkey
	  gdbm-open
	  gdbm-reorganize
	  gdbm-setopt
	  gdbm-store
	  gdbm-sync
	  gdbm-version
	  gdbm_cachesize
	  gdbm_fast
	  gdbm_fastmode
	  gdbm_insert
	  gdbm_newdb
	  gdbm_reader
	  gdbm_replace
	  gdbm_wrcreat
	  gdbm_writer))

(define-package (runtime generic-procedure)
  (files "gentag" "gencache" "generic")
  (parent ())
  (export ()
	  ;; tag.scm:
	  dispatch-tag-contents
	  dispatch-tag?
	  guarantee-dispatch-tag
	  make-dispatch-tag
	  set-dispatch-tag-contents!

	  ;; generic.scm:
	  arity-max
	  arity-min
	  built-in-dispatch-tag
	  built-in-dispatch-tags
	  condition-type:no-applicable-methods
	  dispatch-tag
	  error:no-applicable-methods
	  generic-procedure-applicable?
	  generic-procedure-arity
	  generic-procedure-name
	  generic-procedure?
	  guarantee-generic-procedure
	  make-generic-procedure
	  purge-generic-procedure-cache
	  standard-generic-procedure-tag)
  (export (runtime generic-procedure multiplexer)
	  generic-procedure-generator
	  set-generic-procedure-generator!))

(define-package (runtime generic-procedure multiplexer)
  (files "genmult")
  (parent ())
  (export ()
	  add-generic-procedure-generator
	  condition-type:extra-applicable-methods
	  error:extra-applicable-methods
	  generic-procedure-default-generator
	  generic-procedure-generator-list
	  remove-generic-procedure-generator
	  remove-generic-procedure-generators
	  set-generic-procedure-default-generator!))

(define-package (runtime tagged-vector)
  (files "tvector")
  (parent ())
  (export ()
	  guarantee-tagged-vector
	  make-tagged-vector
	  record-slot-uninitialized
	  set-tagged-vector-element!
	  set-tagged-vector-tag!
	  tagged-vector
	  tagged-vector-element
	  tagged-vector-element-initialized?
	  tagged-vector-length
	  tagged-vector-tag
	  tagged-vector?))

(define-package (runtime record-slot-access)
  (files "recslot")
  (parent ())
  (export ()
	  condition-type:no-such-slot
	  condition-type:slot-error
	  condition-type:uninitialized-slot
	  %record-accessor
	  %record-accessor-generator
	  %record-initpred
	  %record-initpred-generator
	  %record-modifier
	  %record-modifier-generator
	  %record-slot-index
	  %record-slot-name
	  %record-slot-names)
  (export (runtime record)
	  error:no-such-slot))

(define-package (runtime generic-procedure eqht)
  (files "geneqht")
  (parent ())
  (export (runtime generic-procedure)
	  eqht/for-each
	  eqht/get
	  eqht/put!
	  make-eqht))

(define-package (runtime coerce-to-compiled-procedure)
  (files "coerce")
  (parent ())
  (export ()
	  %compiled-code-support:nonrestartable-continuation
	  %compiled-code-support:signal-error-in-primitive
	  ;;coerce-to-compiled-procedure
	  ))

(define-package (runtime regular-expression)
  (file-case options
    ((load) "regexp")
    (else))
  (parent ())
  (export ()
	  guarantee-re-register
	  guarantee-re-registers
	  preserving-re-registers
	  re-match-end-index
	  re-match-start-index
	  re-registers
	  re-registers?
	  re-string-match
	  re-string-search-backward
	  re-string-search-forward
	  re-substring-match
	  re-substring-search-backward
	  re-substring-search-forward
	  regexp-group
	  set-re-registers!)
  (initialization (initialize-package!)))

(define-package (runtime regular-expression-compiler)
  (file-case options
    ((load) "rgxcmp")
    (else))
  (parent ())
  (export ()
	  compiled-regexp?
	  compiled-regexp/byte-stream
	  compiled-regexp/translation-table
	  condition-type:re-compile-pattern
	  re-compile-char
	  re-compile-char-set
	  re-compile-pattern
	  re-compile-string
	  re-disassemble-pattern
	  re-quote-string
	  re-translation-table))

(define-package (runtime char-syntax)
  (file-case options
    ((load) "chrsyn")
    (else))
  (parent ())
  (export ()
	  char->syntax-code
	  char-syntax->string
	  char-syntax-table?
	  get-char-syntax
	  make-char-syntax-table
	  set-char-syntax!
	  standard-char-syntax-table
	  string->char-syntax
	  substring-find-next-char-not-of-syntax
	  substring-find-next-char-of-syntax)
  (export (runtime regular-expression)
	  char-syntax-table/entries)
  (initialization (initialize-package!)))